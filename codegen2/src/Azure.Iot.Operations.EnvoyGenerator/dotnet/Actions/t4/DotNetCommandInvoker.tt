<#@ template language="C#" linePragmas="false" #>
<#@ import namespace="Azure.Iot.Operations.CodeGeneration" #>
/* Code generated by Azure.Iot.Operations.ProtocolCompilerLib v<#=System.Reflection.Assembly.GetExecutingAssembly().GetName().Version#>; DO NOT EDIT. */

#nullable enable

namespace <#=this.projectName#>.<#=this.genNamespace.GetTypeName(TargetLanguage.CSharp)#>
{
    using System;
    using System.Collections.Generic;
    using Azure.Iot.Operations.Protocol;
    using Azure.Iot.Operations.Protocol.RPC;
    using Azure.Iot.Operations.Protocol.Models;
    using <#=this.projectName#>;

    public static partial class <#=this.serviceName.GetTypeName(TargetLanguage.CSharp)#>
    {
        /// <summary>
        /// Specializes the <c>CommandInvoker</c> class for Command '<#=this.commandName.AsGiven#>'.
        /// </summary>
        [CommandTopic("<#=this.topicPattern#>")]
        public class <#=this.componentName.GetTypeName(TargetLanguage.CSharp)#> : CommandInvoker<#=this.TypeParams()#>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="<#=this.componentName.GetTypeName(TargetLanguage.CSharp)#>"/> class.
            /// </summary>
            public <#=this.componentName.GetTypeName(TargetLanguage.CSharp)#>(ApplicationContext applicationContext, IMqttPubSubClient mqttClient)
                : base(applicationContext, mqttClient, "<#=this.commandName.AsGiven#>", new <#=string.Format(this.serializerClassName, this.TypeParams())#>())
            {
                this.ResponseTopicPrefix = "clients/{invokerClientId}"; // default value, can be overwritten by user code

                TopicTokenMap["modelId"] = "<#=this.modelId#>";
                if (mqttClient.ClientId != null)
                {
                    TopicTokenMap["invokerClientId"] = mqttClient.ClientId;
                }
                TopicTokenMap["commandName"] = "<#=this.commandName.AsGiven#>";
            }
        }
    }
}
<#+
    private string TypeParams() => $"<{this.reqSchema?.GetTypeName(TargetLanguage.CSharp) ?? serializerEmptyType.GetTypeName(TargetLanguage.CSharp)}, {this.respSchema?.GetTypeName(TargetLanguage.CSharp) ?? serializerEmptyType.GetTypeName(TargetLanguage.CSharp)}>";
#>
