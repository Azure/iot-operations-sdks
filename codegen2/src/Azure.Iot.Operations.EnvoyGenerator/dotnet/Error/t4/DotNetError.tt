<#@ template language="C#" linePragmas="false" #>
<#@ import namespace="Azure.Iot.Operations.CodeGeneration" #>
/* Code generated by Azure.Iot.Operations.ProtocolCompilerLib v<#=System.Reflection.Assembly.GetExecutingAssembly().GetName().Version#>; DO NOT EDIT. */
<#
string codeName = this.errorCodeName?.GetVariableName(TargetLanguage.CSharp);
string codeSchema = this.errorCodeSchema?.GetTypeName(TargetLanguage.CSharp);
string infoName = this.errorInfoName?.GetVariableName(TargetLanguage.CSharp) ?? "errorPayload";
string infoSchema = this.errorInfoSchema?.GetTypeName(TargetLanguage.CSharp) ?? "string";
#>

#nullable enable

namespace <#=this.projectName#>.<#=this.genNamespace.GetTypeName(TargetLanguage.CSharp)#>
{
    using System;
<# if (codeName != null) { #>
    using System.Diagnostics.CodeAnalysis;
<# } #>
    using <#=this.projectName#>;

    [System.CodeDom.Compiler.GeneratedCode("Azure.Iot.Operations.ProtocolCompilerLib", "<#=System.Reflection.Assembly.GetExecutingAssembly().GetName().Version#>")]
    public partial class <#=this.schemaName.GetTypeName(TargetLanguage.CSharp, "exception")#> : Exception
    {
<# if (codeName != null) { #>
        private <#=codeSchema#>? <#=codeName#> = default;
        private <#=infoSchema#>? <#=infoName#> = default;

<# } #>
        public <#=this.schemaName.GetTypeName(TargetLanguage.CSharp, "exception")#>(<#=this.schemaName.GetTypeName(TargetLanguage.CSharp)#> <#=this.schemaName.GetVariableName(TargetLanguage.CSharp)#>)
<# if (this.messageField != null) { #>
            : base(<#=this.schemaName.GetVariableName(TargetLanguage.CSharp)#>.<#=this.messageField.GetFieldName(TargetLanguage.CSharp)#><#=this.messageIsRequired ? "" : $" ?? \"{this.description}\""#>)
<# } else { #>
            : base("<#=this.description#>")
<# } #>
        {
            <#=this.schemaName.GetFieldName(TargetLanguage.CSharp)#> = <#=this.schemaName.GetVariableName(TargetLanguage.CSharp)#>;
        }

        public <#=this.schemaName.GetTypeName(TargetLanguage.CSharp)#> <#=this.schemaName.GetFieldName(TargetLanguage.CSharp)#> { get; }
<# if (codeName != null) { #>

        public <#=this.schemaName.GetTypeName(TargetLanguage.CSharp, "exception")#> WithApplicationError(<#=codeSchema#> <#=codeName#>, <#=infoSchema#>? <#=infoName#> = null)
        {
            this.<#=codeName#> = <#=codeName#>;
            this.<#=infoName#> = <#=infoName#>;

            return this;
        }

        public bool TryGetApplicationError([NotNullWhen(true)] out <#=codeSchema#>? <#=codeName#>, out <#=infoSchema#>? <#=infoName#>)
        {
            <#=codeName#> = this.<#=codeName#>;
            <#=infoName#> = this.<#=infoName#>;

            return <#=codeName#> != null;
        }
<# } #>
    }
}
