<#@ template language="C#" linePragmas="false" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Azure.Iot.Operations.CodeGeneration" #>
/* Code generated by Azure.Iot.Operations.ProtocolCompilerLib v<#=System.Reflection.Assembly.GetExecutingAssembly().GetName().Version#>; DO NOT EDIT. */

use std::collections::HashMap;
<# if (this.errorResultName != null) { #>
use std::error::Error;
<# } #>
use std::time::Duration;

use azure_iot_operations_mqtt::interface::ManagedClient;
use azure_iot_operations_protocol::application::ApplicationContext;
use azure_iot_operations_protocol::common::aio_protocol_error::{
    AIOProtocolError,
<# if (this.errorResultName != null) { #>
    AIOProtocolErrorKind,
<# } #>
};
<# if (this.reqSchema != null) { #>
use azure_iot_operations_protocol::common::payload_serialize::PayloadSerialize;
<# } #>
use azure_iot_operations_protocol::rpc_command;

<# if (this.reqSchema is CustomTypeName || this.respSchema is CustomTypeName) { #>
use super::super::common_types::custom_payload::CustomPayload;
<# } #>
<# if (this.reqSchema == null || this.respSchema == null) { #>
use super::super::common_types::<#=this.serializerEmptyType.GetFileName(TargetLanguage.Rust)#>::<#=this.serializerEmptyType.GetTypeName(TargetLanguage.Rust)#>;
<# } #>
use super::super::common_types::options::CommandInvokerOptions;
<# if (this.reqSchema is CodeName) { #>
use super::<#=this.reqSchema.GetFileName(TargetLanguage.Rust)#>::<#=this.reqSchema.GetTypeName(TargetLanguage.Rust)#>;
<# } #>
<# if (this.respSchema is CodeName) { #>
use super::<#=this.respSchema.GetFileName(TargetLanguage.Rust)#>::<#=this.respSchema.GetTypeName(TargetLanguage.Rust)#>;
<# } #>
<# if (this.errorResultName != null) { #>
use super::<#=this.normalResultSchema.GetFileName(TargetLanguage.Rust)#>::<#=this.normalResultSchema.GetTypeName(TargetLanguage.Rust)#>;
use super::<#=this.errorResultSchema.GetFileName(TargetLanguage.Rust)#>::<#=this.errorResultSchema.GetTypeName(TargetLanguage.Rust)#>;
<# } #>

pub type <#=this.commandName.GetTypeName(TargetLanguage.Rust, "request")#> = rpc_command::invoker::Request<<#=this.RequestType()#>>;
pub type <#=this.commandName.GetTypeName(TargetLanguage.Rust, "response")#> = rpc_command::invoker::Response<<#=this.InternalResponseType()#>>;
<# if (this.errorResultSchema != null) { #>
pub type <#=this.commandName.GetTypeName(TargetLanguage.Rust, "response", "error")#> = rpc_command::invoker::Response<<#=this.errorResultSchema.GetTypeName(TargetLanguage.Rust)#>>;
<# } #>
pub type <#=this.commandName.GetTypeName(TargetLanguage.Rust, "request", "builder", "error")#> = rpc_command::invoker::RequestBuilderError;

#[derive(Default)]
/// Builder for [`<#=this.commandName.GetTypeName(TargetLanguage.Rust, "request")#>`]
pub struct <#=this.commandName.GetTypeName(TargetLanguage.Rust, "request", "builder")#> {
    inner_builder: rpc_command::invoker::RequestBuilder<<#=this.RequestType()#>>,
<# if (this.doesCommandTargetExecutor) { #>
    set_executor_id: bool,
<# } #>
    topic_tokens: HashMap<String, String>,
}

impl <#=this.commandName.GetTypeName(TargetLanguage.Rust, "request", "builder")#> {
    /// Custom user data to set on the request
    pub fn custom_user_data(&mut self, custom_user_data: Vec<(String, String)>) -> &mut Self {
        self.inner_builder.custom_user_data(custom_user_data);
        self
    }

    /// Topic token keys/values to be replaced into the publish topic of the request message.
    /// A prefix of "ex:" will be prepended to each key before scanning the topic pattern.
    /// Thus, only tokens of the form `{ex:SOMEKEY}` will be replaced.
    pub fn topic_tokens(&mut self, topic_tokens: HashMap<String, String>) -> &mut Self {
        for (k, v) in topic_tokens {
            self.topic_tokens.insert(format!("ex:{k}"), v);
        }
        self
    }

    /// Timeout for the request
    pub fn timeout(&mut self, timeout: Duration) -> &mut Self {
        self.inner_builder.timeout(timeout);
        self
    }

<# if (this.doesCommandTargetExecutor) { #>
    /// Target executor ID
    pub fn executor_id(&mut self, executor_id: &str) -> &mut Self {
        self.topic_tokens
            .insert("executorId".to_string(), executor_id.to_string());
        self.set_executor_id = true;
        self
    }

<# } #>
<# if (this.reqSchema != null) { #>
    /// Payload of the request
    ///
    /// # Errors
    /// If the payload cannot be serialized
    pub fn payload(
        &mut self,
        payload: <#=this.reqSchema.GetTypeName(TargetLanguage.Rust)#>,
    ) -> Result<&mut Self, AIOProtocolError> {
        self.inner_builder.payload(payload)?;
        Ok(self)
    }

<# } #>
    /// Builds a new `<#=this.commandName.GetTypeName(TargetLanguage.Rust, "request")#>`
    ///
    /// # Errors
    /// If a required field has not been initialized
    #[allow(clippy::missing_panics_doc)] // The panic is not possible
    pub fn build(&mut self) -> Result<<#=this.commandName.GetTypeName(TargetLanguage.Rust, "request")#>, <#=this.commandName.GetTypeName(TargetLanguage.Rust, "request", "builder", "error")#>> {
<# if (this.doesCommandTargetExecutor) { #>
        if !self.set_executor_id {
            return Err(<#=this.commandName.GetTypeName(TargetLanguage.Rust, "request", "builder", "error")#>::UninitializedField(
                "executor_id",
            ));
        }

<# } #>
<# if (this.reqSchema == null) { #>
        self.inner_builder.payload(<#=this.serializerEmptyType.GetAllocator(TargetLanguage.Rust)#>).unwrap();

<# } #>
        self.inner_builder.topic_tokens(self.topic_tokens.clone());

        self.inner_builder.build()
    }
}

/// Command Invoker for `<#=this.commandName.AsGiven#>`
pub struct <#=this.componentName.GetTypeName(TargetLanguage.Rust)#><C>(
    rpc_command::Invoker<<#=this.RequestType()#>, <#=this.ExternalResponseType()#>, C>,
)
where
    C: ManagedClient + Clone + Send + Sync + 'static,
    C::PubReceiver: Send + Sync + 'static;

impl<C> <#=this.componentName.GetTypeName(TargetLanguage.Rust)#><C>
where
    C: ManagedClient + Clone + Send + Sync + 'static,
    C::PubReceiver: Send + Sync + 'static,
{
    /// Creates a new [`<#=this.componentName.GetTypeName(TargetLanguage.Rust)#>`]
    ///
    /// # Panics
    /// If the DTDL that generated this code was invalid
    pub fn new(application_context: ApplicationContext, client: C, options: &CommandInvokerOptions) -> Self {
        let mut invoker_options_builder = rpc_command::invoker::OptionsBuilder::default();
        if let Some(topic_namespace) = &options.topic_namespace {
            invoker_options_builder.topic_namespace(topic_namespace.clone());
        }

        let mut topic_token_map: HashMap<String, String> = options
            .topic_token_map
            .clone()
            .into_iter()
            .map(|(k, v)| (format!("ex:{k}"), v))
            .collect();

        topic_token_map.insert("modelId".to_string(), "<#=this.modelId#>".to_string());
        topic_token_map.insert("invokerClientId".to_string(), client.client_id().to_string());
        topic_token_map.insert("commandName".to_string(), "<#=this.commandName.AsGiven#>".to_string());

        let invoker_options = invoker_options_builder
            .request_topic_pattern("<#=this.topicPattern#>")
            .command_name("<#=this.commandName.AsGiven#>")
            .topic_token_map(topic_token_map)
            .response_topic_prefix(options.response_topic_prefix.clone())
            .response_topic_suffix(options.response_topic_suffix.clone())
            .build()
            .expect("DTDL schema generated invalid arguments");

        Self(
            rpc_command::Invoker::new(application_context, client, invoker_options)
                .expect("DTDL schema generated invalid arguments"),
        )
    }

    /// Invokes the [`<#=this.commandName.GetTypeName(TargetLanguage.Rust, "request")#>`]
    ///
    /// # Errors
    /// [`AIOProtocolError`] if there is a failure invoking the request
    pub async fn invoke(
        &self,
        request: <#=this.commandName.GetTypeName(TargetLanguage.Rust, "request")#>,
<# if (this.errorResultName != null) { #>
    ) -> Result<Result<<#=this.commandName.GetTypeName(TargetLanguage.Rust, "response")#>, <#=this.commandName.GetTypeName(TargetLanguage.Rust, "response", "error")#>>, AIOProtocolError> {
        let response = self.0.invoke(request).await;
        match response {
            Ok(response) => {
                if let Some(<#=this.errorResultName.GetVariableName(TargetLanguage.Rust)#>) = response.payload.<#=this.errorResultName.GetFieldName(TargetLanguage.Rust)#> {
                    Ok(Err(<#=this.commandName.GetTypeName(TargetLanguage.Rust, "response", "error")#> {
                        payload: <#=this.errorResultName.GetVariableName(TargetLanguage.Rust)#>,
                        content_type: response.content_type,
                        format_indicator: response.format_indicator,
                        custom_user_data: response.custom_user_data,
                        timestamp: response.timestamp,
                        executor_id: response.executor_id,
                    }))
                } else {
                    Ok(Ok(<#=this.commandName.GetTypeName(TargetLanguage.Rust, "response")#> {
                        payload: <#=this.normalResultSchema.GetTypeName(TargetLanguage.Rust)#> {
<# foreach (CodeName normalResultField in this.normalResultFields) { #>
<# if (this.normalRequiredFields.Contains(normalResultField)) { #>
                            <#=normalResultField.GetFieldName(TargetLanguage.Rust)#>: response.payload.<#=normalResultField.GetFieldName(TargetLanguage.Rust)#>.ok_or(<#=this.componentName.GetTypeName(TargetLanguage.Rust)#>::<C>::get_err("<#=normalResultField.AsGiven#>"))?,
<# } else { #>
                            <#=normalResultField.GetFieldName(TargetLanguage.Rust)#>: response.payload.<#=normalResultField.GetFieldName(TargetLanguage.Rust)#>,
<# } #>
<# } #>
                        },
                        content_type: response.content_type,
                        format_indicator: response.format_indicator,
                        custom_user_data: response.custom_user_data,
                        timestamp: response.timestamp,
                        executor_id: response.executor_id,
                    }))
                }
            }
            Err(err) => Err(err),
        }
<# } else { #>
    ) -> Result<<#=this.commandName.GetTypeName(TargetLanguage.Rust, "response")#>, AIOProtocolError> {
        self.0.invoke(request).await
<# } #>
    }

    /// Shutdown the [`<#=this.componentName.GetTypeName(TargetLanguage.Rust)#>`]. Unsubscribes from the response topic and cancels the receiver loop to drop the receiver and to prevent the task from looping indefinitely.
    ///
    /// Returns Ok(()) on success, otherwise returns [`AIOProtocolError`].
    /// # Errors
    /// [`AIOProtocolError`] of kind [`ClientError`](azure_iot_operations_protocol::common::aio_protocol_error::AIOProtocolErrorKind::ClientError) if the unsubscribe fails or if the unsuback reason code doesn't indicate success.
    pub async fn shutdown(&self) -> Result<(), AIOProtocolError> {
        self.0.shutdown().await
    }
<# if (this.errorResultName != null && this.normalRequiredFields.Any()) { #>

    fn get_err(field_name: &str) -> AIOProtocolError {
        AIOProtocolError {
            message: Some(format!("Command response missing field {field_name}")),
            kind: AIOProtocolErrorKind::PayloadInvalid,
            is_shallow: false,
            is_remote: false,
            nested_error: None,
            header_name: None,
            header_value: None,
            timeout_name: None,
            timeout_value: None,
            property_name: None,
            property_value: None,
            command_name: Some("<#=this.commandName.AsGiven#>".to_string()),
            protocol_version: None,
            supported_protocol_major_versions: None,
        }
    }
<# } #>
}
<#+
    private string RequestType() => this.reqSchema?.GetTypeName(TargetLanguage.Rust) ?? this.serializerEmptyType.GetTypeName(TargetLanguage.Rust);

    private string ExternalResponseType() => this.respSchema?.GetTypeName(TargetLanguage.Rust) ?? this.serializerEmptyType.GetTypeName(TargetLanguage.Rust);

    private string InternalResponseType() => (this.normalResultSchema ?? this.respSchema)?.GetTypeName(TargetLanguage.Rust) ?? this.serializerEmptyType.GetTypeName(TargetLanguage.Rust);
#>
