<#@ template language="C#" linePragmas="false" #>
use std::any::TypeId;
use std::collections::HashMap;
use lazy_static::lazy_static;
use <#=this.serializerValues.SerializerNamespace#>::<#=this.serializerValues.SchemaTypeName#>;

use crate::<#=this.genNamespace#>::*;

lazy_static! {
    pub static ref SCHEMATA: HashMap<TypeId, <#=this.serializerValues.SchemaTypeName#>> = {
        let mut m = HashMap::new();
<# foreach (string schemaType in this.schemaTypes) { #>
        m.insert(TypeId::of::<<#=FQName(schemaType)#>>(), <#=string.Format(this.serializerValues.Parser, FQName(schemaType))#>);
<# } #>
        m
    };
}
<#+
  string FQName(string schemaType) => $"{NamingSupport.ToSnakeCase(schemaType)}::{schemaType}";
#>
