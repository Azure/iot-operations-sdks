// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Akri.Dtdl.Codegen
{
    using Akri.Dtdl.Codegen;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class RustService : RustServiceBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("/* Code generated by Akri.Dtdl.Codegen; DO NOT EDIT. */\r\n#![allow(non_snake_case)" +
                    "]\r\n\r\nuse akri_mqtt_attributes::model_id;\r\n");
 if (this.commandTopic != null) { 
            this.Write("use akri_mqtt_attributes::command_topic;\r\n");
 } 
 if (this.telemetryTopic != null) { 
            this.Write("use akri_mqtt_attributes::telemetry_topic;\r\n");
 } 
 if (this.commandTopic != null && !this.doesCommandTargetExecutor) { 
            this.Write("use akri_mqtt_attributes::service_group_id;\r\n");
 } 
            this.Write("\r\n#[model_id(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.modelId));
            this.Write("\")]\r\n");
 if (this.commandTopic != null) { 
            this.Write("#[command_topic(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.commandTopic));
            this.Write("\")]\r\n");
 } 
 if (this.telemetryTopic != null) { 
            this.Write("#[telemetry_topic(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.telemetryTopic));
            this.Write("\")]\r\n");
 } 
 if (this.commandTopic != null && !this.doesCommandTargetExecutor) { 
            this.Write("#[service_group_id(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(Defaults.ServiceGroupId));
            this.Write("\")]\r\n");
 } 
            this.Write("pub mod ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.serviceName));
            this.Write(" {\r\n    use std::collections::HashMap;\r\n    use std::io::Error;\r\n    use std::syn" +
                    "c::Arc;\r\n    use std::thread::Scope;\r\n\r\n    use futures::executor::block_on;\r\n  " +
                    "  use futures::lock::Mutex;\r\n");
 if (this.cmdNameReqResps.Any()) { 
            this.Write("    use tokio::sync::{mpsc, oneshot};\r\n    use paho_mqtt::token::DeliveryToken;\r\n" +
                    "");
 } else { 
            this.Write("    use tokio::sync::mpsc;\r\n");
 } 
            this.Write("\r\n    use akri_mqtt::PubSub;\r\n");
 if (this.cmdNameReqResps.Any()) { 
            this.Write("    use akri_mqtt::rpc::error::CommandError;\r\n");
 } 
            this.Write("    use akri_mqtt::communication_options::CommunicationOptions;\r\n    use akri_mqt" +
                    "t::demultiplexer::InboundMessageDemux;\r\n\r\n");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
 if (cmdNameReqResp.Item2 != null && cmdNameReqResp.Item2 != string.Empty) { 
            this.Write("    use super::super::");
            this.Write(this.ToStringHelper.ToStringWithCulture(NamingSupport.ToSnakeCase(cmdNameReqResp.Item2)));
            this.Write("::");
            this.Write(this.ToStringHelper.ToStringWithCulture(cmdNameReqResp.Item2));
            this.Write(";\r\n");
 } 
 if (cmdNameReqResp.Item3 != null && cmdNameReqResp.Item3 != string.Empty) { 
            this.Write("    use super::super::");
            this.Write(this.ToStringHelper.ToStringWithCulture(NamingSupport.ToSnakeCase(cmdNameReqResp.Item3)));
            this.Write("::");
            this.Write(this.ToStringHelper.ToStringWithCulture(cmdNameReqResp.Item3));
            this.Write(";\r\n");
 } 
            this.Write("    use super::super::");
            this.Write(this.ToStringHelper.ToStringWithCulture(NamingSupport.ToSnakeCase($"{cmdNameReqResp.Item1}CommandExecutor")));
            this.Write("::");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(cmdNameReqResp.Item1)));
            this.Write("CommandExecutor;\r\n    use super::super::");
            this.Write(this.ToStringHelper.ToStringWithCulture(NamingSupport.ToSnakeCase($"{cmdNameReqResp.Item1}CommandInvoker")));
            this.Write("::");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(cmdNameReqResp.Item1)));
            this.Write("CommandInvoker;\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("\r\n    use super::super::");
            this.Write(this.ToStringHelper.ToStringWithCulture(NamingSupport.ToSnakeCase(telemSchema)));
            this.Write("::");
            this.Write(this.ToStringHelper.ToStringWithCulture(telemSchema));
            this.Write(";\r\n    use super::super::");
            this.Write(this.ToStringHelper.ToStringWithCulture(NamingSupport.ToSnakeCase($"{telemSchema}Sender")));
            this.Write("::");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(telemSchema)));
            this.Write("Sender;\r\n    use super::super::");
            this.Write(this.ToStringHelper.ToStringWithCulture(NamingSupport.ToSnakeCase($"{telemSchema}Receiver")));
            this.Write("::");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(telemSchema)));
            this.Write("Receiver;\r\n");
 } 
            this.Write("\r\n    pub struct Service<TPubSub: PubSub + Send + \'static> {\r\n        communicati" +
                    "on_options: CommunicationOptions,\r\n        inbound_message_demux: Arc<Mutex<Inbo" +
                    "undMessageDemux<TPubSub>>>,\r\n");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(NamingSupport.ToSnakeCase($"{cmdNameReqResp.Item1}CommandExecutor")));
            this.Write(": ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(cmdNameReqResp.Item1)));
            this.Write("CommandExecutor<TPubSub>,\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(NamingSupport.ToSnakeCase($"{telemSchema}Sender")));
            this.Write(": ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(telemSchema)));
            this.Write("Sender<TPubSub>,\r\n");
 } 
            this.Write("    }\r\n\r\n    pub struct Client<TPubSub: PubSub + Send + \'static> {\r\n        commu" +
                    "nication_options: CommunicationOptions,\r\n        inbound_message_demux: Arc<Mute" +
                    "x<InboundMessageDemux<TPubSub>>>,\r\n");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(NamingSupport.ToSnakeCase($"{cmdNameReqResp.Item1}CommandInvoker")));
            this.Write(": ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(cmdNameReqResp.Item1)));
            this.Write("CommandInvoker<TPubSub>,\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(NamingSupport.ToSnakeCase($"{telemSchema}Receiver")));
            this.Write(": ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(telemSchema)));
            this.Write("Receiver<TPubSub>,\r\n");
 } 
            this.Write("    }\r\n\r\n    impl<TPubSub: PubSub + Send + \'static> Service<TPubSub> {\r\n        p" +
                    "ub fn new(pub_sub: Arc<Mutex<TPubSub>>) -> Self {\r\n            let inbound_messa" +
                    "ge_demux = Arc::new(Mutex::new(InboundMessageDemux::new(pub_sub.clone())));\r\n   " +
                    "         let");
            this.Write(this.ToStringHelper.ToStringWithCulture((this.commandTopic != null && !this.doesCommandTargetExecutor) ? " mut" : ""));
            this.Write(" service = Self {\r\n                communication_options: CommunicationOptions::n" +
                    "ew(),\r\n                inbound_message_demux: inbound_message_demux.clone(),\r\n");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("                ");
            this.Write(this.ToStringHelper.ToStringWithCulture(NamingSupport.ToSnakeCase($"{cmdNameReqResp.Item1}CommandExecutor")));
            this.Write(": ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(cmdNameReqResp.Item1)));
            this.Write("CommandExecutor::new(pub_sub.clone(), inbound_message_demux.clone(), ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.CmdModelIdProp()));
            this.Write(", super::get_command_topic(), Some(HashMap::new())),\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("                ");
            this.Write(this.ToStringHelper.ToStringWithCulture(NamingSupport.ToSnakeCase($"{telemSchema}Sender")));
            this.Write(": ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(telemSchema)));
            this.Write("Sender::new(pub_sub.clone(), ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TelemModelIdProp()));
            this.Write(", super::get_telemetry_topic(), Some(HashMap::new())),\r\n");
 } 
            this.Write("            };\r\n");
 if (this.commandTopic != null && !this.doesCommandTargetExecutor) { 
            this.Write("\r\n            let mut communication_options = CommunicationOptions::new();\r\n     " +
                    "       communication_options.shared_subscription_id = Some(super::get_service_gr" +
                    "oup_id());\r\n            service.set_communication_options(communication_options)" +
                    ";\r\n");
 } 
            this.Write("\r\n            service\r\n        }\r\n\r\n        pub fn add_custom_topic_token(&mut se" +
                    "lf, token: String, replacement: String) {\r\n");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("            self.");
            this.Write(this.ToStringHelper.ToStringWithCulture(NamingSupport.ToSnakeCase($"{cmdNameReqResp.Item1}CommandExecutor")));
            this.Write(".add_custom_topic_token(token.clone(), replacement.clone());\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("            self.");
            this.Write(this.ToStringHelper.ToStringWithCulture(NamingSupport.ToSnakeCase($"{telemSchema}Sender")));
            this.Write(".add_custom_topic_token(token.clone(), replacement.clone());\r\n");
 } 
            this.Write(@"        }

        pub fn get_communication_options(&self) -> &CommunicationOptions { &self.communication_options }

        pub fn set_communication_options(&mut self, communication_options: CommunicationOptions ) {
            self.communication_options = communication_options;
");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("            self.");
            this.Write(this.ToStringHelper.ToStringWithCulture(NamingSupport.ToSnakeCase($"{cmdNameReqResp.Item1}CommandExecutor")));
            this.Write(".set_communication_options(communication_options);\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("            self.");
            this.Write(this.ToStringHelper.ToStringWithCulture(NamingSupport.ToSnakeCase($"{telemSchema}Sender")));
            this.Write(".set_communication_options(communication_options);\r\n");
 } 
            this.Write("        }\r\n\r\n        pub fn set_topic_namespace(&mut self, topic_namespace: &\'sta" +
                    "tic str) {\r\n");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("            self.");
            this.Write(this.ToStringHelper.ToStringWithCulture(NamingSupport.ToSnakeCase($"{cmdNameReqResp.Item1}CommandExecutor")));
            this.Write(".set_topic_namespace(topic_namespace);\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("            self.");
            this.Write(this.ToStringHelper.ToStringWithCulture(NamingSupport.ToSnakeCase($"{telemSchema}Sender")));
            this.Write(".set_topic_namespace(topic_namespace);\r\n");
 } 
            this.Write("        }\r\n");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("\r\n        pub async fn get_");
            this.Write(this.ToStringHelper.ToStringWithCulture(NamingSupport.ToSnakeCase(cmdNameReqResp.Item1)));
            this.Write("_channel(&self) -> mpsc::Receiver<");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.RecvrType(cmdNameReqResp.Item2, $"Box<dyn FnOnce(Result<{this.RespType(cmdNameReqResp.Item3)}, CommandError>) -> DeliveryToken + Send>")));
            this.Write("> {\r\n            self.");
            this.Write(this.ToStringHelper.ToStringWithCulture(NamingSupport.ToSnakeCase($"{cmdNameReqResp.Item1}CommandExecutor")));
            this.Write(".get_channel().await\r\n        }\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("\r\n        pub async fn send_");
            this.Write(this.ToStringHelper.ToStringWithCulture(NamingSupport.ToSnakeCase(telemSchema)));
            this.Write("(&self, telem: &");
            this.Write(this.ToStringHelper.ToStringWithCulture(telemSchema));
            this.Write(") -> Result<(), Error> {\r\n            self.");
            this.Write(this.ToStringHelper.ToStringWithCulture(NamingSupport.ToSnakeCase($"{telemSchema}Sender")));
            this.Write(".send_telemetry(telem).await\r\n        }\r\n");
 } 
            this.Write(@"
        pub fn start<'scope, 'env>(&self, scope: &'scope Scope<'scope, 'env>) {
            block_on(self.inbound_message_demux.lock()).start(scope);
        }
    }

    impl<TPubSub: PubSub + Send + 'static> Client<TPubSub> {
        pub fn new(pub_sub: Arc<Mutex<TPubSub>>) -> Self {
            let inbound_message_demux = Arc::new(Mutex::new(InboundMessageDemux::new(pub_sub.clone())));
            Self {
                communication_options: CommunicationOptions::new(),
                inbound_message_demux: inbound_message_demux.clone(),
");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("                ");
            this.Write(this.ToStringHelper.ToStringWithCulture(NamingSupport.ToSnakeCase($"{cmdNameReqResp.Item1}CommandInvoker")));
            this.Write(": ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(cmdNameReqResp.Item1)));
            this.Write("CommandInvoker::new(pub_sub.clone(), inbound_message_demux.clone(), Some(super::g" +
                    "et_model_id()), super::get_command_topic(), Some(HashMap::new())),\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("                ");
            this.Write(this.ToStringHelper.ToStringWithCulture(NamingSupport.ToSnakeCase($"{telemSchema}Receiver")));
            this.Write(": ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(telemSchema)));
            this.Write("Receiver::new(pub_sub.clone(), inbound_message_demux.clone(), Some(super::get_mod" +
                    "el_id()), super::get_telemetry_topic(), Some(HashMap::new())),\r\n");
 } 
            this.Write("            }\r\n        }\r\n\r\n        pub fn add_custom_topic_token(&mut self, toke" +
                    "n: String, replacement: String) {\r\n");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("            self.");
            this.Write(this.ToStringHelper.ToStringWithCulture(NamingSupport.ToSnakeCase($"{cmdNameReqResp.Item1}CommandInvoker")));
            this.Write(".add_custom_topic_token(token.clone(), replacement.clone());\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("            self.");
            this.Write(this.ToStringHelper.ToStringWithCulture(NamingSupport.ToSnakeCase($"{telemSchema}Receiver")));
            this.Write(".add_custom_topic_token(token.clone(), replacement.clone());\r\n");
 } 
            this.Write(@"        }

        pub fn get_communication_options(&self) -> &CommunicationOptions { &self.communication_options }

        pub fn set_communication_options(&mut self, communication_options: CommunicationOptions ) {
            self.communication_options = communication_options;
");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("            self.");
            this.Write(this.ToStringHelper.ToStringWithCulture(NamingSupport.ToSnakeCase($"{cmdNameReqResp.Item1}CommandInvoker")));
            this.Write(".set_communication_options(communication_options);\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("            self.");
            this.Write(this.ToStringHelper.ToStringWithCulture(NamingSupport.ToSnakeCase($"{telemSchema}Receiver")));
            this.Write(".set_communication_options(communication_options);\r\n");
 } 
            this.Write("        }\r\n\r\n        pub fn set_topic_namespace(&mut self, topic_namespace: &\'sta" +
                    "tic str) {\r\n");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("            self.");
            this.Write(this.ToStringHelper.ToStringWithCulture(NamingSupport.ToSnakeCase($"{cmdNameReqResp.Item1}CommandInvoker")));
            this.Write(".set_topic_namespace(topic_namespace);\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("            self.");
            this.Write(this.ToStringHelper.ToStringWithCulture(NamingSupport.ToSnakeCase($"{telemSchema}Receiver")));
            this.Write(".set_topic_namespace(topic_namespace);\r\n");
 } 
            this.Write("        }\r\n");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("\r\n        pub async fn ");
            this.Write(this.ToStringHelper.ToStringWithCulture(NamingSupport.ToSnakeCase(cmdNameReqResp.Item1)));
            this.Write("(&self");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ExecParam()));
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ReqParam(cmdNameReqResp.Item2)));
            this.Write(") -> Result<oneshot::Receiver<Result<");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.RespType(cmdNameReqResp.Item3)));
            this.Write(", Error>>, Error> {\r\n            self.");
            this.Write(this.ToStringHelper.ToStringWithCulture(NamingSupport.ToSnakeCase($"{cmdNameReqResp.Item1}CommandInvoker")));
            this.Write(".invoke_command(");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ExecArg()));
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ReqArg(cmdNameReqResp.Item2)));
            this.Write(").await\r\n        }\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("\r\n        pub async fn get_");
            this.Write(this.ToStringHelper.ToStringWithCulture(NamingSupport.ToSnakeCase(telemSchema)));
            this.Write("_channel(&self) -> mpsc::Receiver<(String, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(telemSchema));
            this.Write(")> {\r\n            self.");
            this.Write(this.ToStringHelper.ToStringWithCulture(NamingSupport.ToSnakeCase($"{telemSchema}Receiver")));
            this.Write(".get_channel().await\r\n        }\r\n");
 } 
            this.Write("\r\n        pub fn start<\'scope, \'env>(&self, scope: &\'scope Scope<\'scope, \'env>) {" +
                    "\r\n            block_on(self.inbound_message_demux.lock()).start(scope);\r\n       " +
                    " }\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }

    private string AsUpper(string name) => char.ToUpperInvariant(name[0]) + name.Substring(1);

    private string ReqParam(string reqSchema) => reqSchema != null ? $", request: &{this.AsSchema(reqSchema)}" : "";

    private string ReqArg(string reqSchema) => reqSchema != null ? $", request" : "";

    private string RespType(string respSchema) => respSchema != null ? this.AsSchema(respSchema) : "()";

    private string RecvrType(string reqSchema, string funcSig) => reqSchema != null ? $"({this.AsSchema(reqSchema)}, {funcSig})" : funcSig;

    private string ExecParam() => this.doesCommandTargetExecutor ? ", executor_id: &str" : "";

    private string ExecArg() => this.doesCommandTargetExecutor ? "Some(executor_id)" : "None";

    private string CmdModelIdProp() => this.doesCommandTargetService ? "Some(super::get_model_id())" : "None";

    private string TelemModelIdProp() => this.doesTelemetryTargetService ? "Some(super::get_model_id())" : "None";

    private string AsSchema(string schema) => schema == "" ? "String" : schema;

    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class RustServiceBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
