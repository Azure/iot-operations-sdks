<#@ template language="C#" linePragmas="false" #>
<#@ import namespace="Akri.Dtdl.Codegen" #>
/* Code generated by Akri.Dtdl.Codegen; DO NOT EDIT. */
#![allow(non_snake_case)]

<# foreach (string sourceFilePath in sourceFilePaths) { if (this.sourceFileRegex.IsMatch(sourceFilePath)) { #>
pub mod <#=Path.GetFileNameWithoutExtension(sourceFilePath)#>;
<# } } #>

pub const MODEL_ID: &str = "<#=this.modelId#>";
<# if (this.commandTopic != null) { #>
pub const REQUEST_TOPIC_PATTERN: &str = "<#=this.commandTopic#>";
<# } #>
<# if (this.telemetryTopic != null) { #>
pub const TELEMETRY_TOPIC_PATTERN: &str = "<#=this.telemetryTopic#>";
<# } #>

use azure_iot_operations_mqtt::interface::{
MqttProvider, MqttPubSub, MqttPubReceiver, MqttAck,
};
use azure_iot_operations_protocol::common::aio_protocol_error::AIOProtocolError;

use crate::common_types::common_options::CommonOptions;
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>

use <#=NamingSupport.ToSnakeCase($"{cmdNameReqResp.Item1}CommandExecutor")#>::<#=this.AsUpper(cmdNameReqResp.Item1)#>CommandExecutor;
use <#=NamingSupport.ToSnakeCase($"{cmdNameReqResp.Item1}CommandInvoker")#>::<#=this.AsUpper(cmdNameReqResp.Item1)#>CommandInvoker;
<# } #>
<# foreach (string telemSchema in this.telemSchemas) { #>

use <#=NamingSupport.ToSnakeCase($"{telemSchema}Sender")#>::<#=this.AsUpper(telemSchema)#>Sender;
use <#=NamingSupport.ToSnakeCase($"{telemSchema}Receiver")#>::<#=this.AsUpper(telemSchema)#>Receiver;
<# } #>

pub struct Service<PS: MqttPubSub + Clone + Send + Sync + 'static<#=this.cmdNameReqResps.Any() ? ", PR: MqttPubReceiver + MqttAck + Send + Sync + 'static" : ""#>> {
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
    pub <#=NamingSupport.ToSnakeCase($"{cmdNameReqResp.Item1}CommandExecutor")#>: <#=this.AsUpper(cmdNameReqResp.Item1)#>CommandExecutor<PS, PR>,
<# } #>
<# foreach (string telemSchema in this.telemSchemas) { #>
    pub <#=NamingSupport.ToSnakeCase($"{telemSchema}Sender")#>: <#=this.AsUpper(telemSchema)#>Sender<PS>,
<# } #>
}

pub struct Client<PS: MqttPubSub + Clone + Send + Sync + 'static<#=this.telemSchemas.Any() ? ", PR: MqttPubReceiver + MqttAck + Send + Sync + 'static" : ""#>> {
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
    pub <#=NamingSupport.ToSnakeCase($"{cmdNameReqResp.Item1}CommandInvoker")#>: <#=this.AsUpper(cmdNameReqResp.Item1)#>CommandInvoker<PS>,
<# } #>
<# foreach (string telemSchema in this.telemSchemas) { #>
    pub <#=NamingSupport.ToSnakeCase($"{telemSchema}Receiver")#>: <#=this.AsUpper(telemSchema)#>Receiver<PS, PR>,
<# } #>
}

impl<PS: MqttPubSub + Clone + Send + Sync + 'static<#=this.cmdNameReqResps.Any() ? ", PR: MqttPubReceiver + MqttAck + Send + Sync + 'static" : ""#>> Service<PS<#=this.cmdNameReqResps.Any() ? ", PR" : ""#>> {
    pub fn new<#=this.cmdNameReqResps.Any() ? "" : "<PR: MqttPubReceiver + MqttAck + Send + Sync + 'static>"#>(
        mqtt_provider: &mut impl MqttProvider<PS, PR>,
        common_options: &CommonOptions,
    ) -> Result<Self, AIOProtocolError> {
        let service = Self {
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
            <#=NamingSupport.ToSnakeCase($"{cmdNameReqResp.Item1}CommandExecutor")#>: <#=this.AsUpper(cmdNameReqResp.Item1)#>CommandExecutor::new(mqtt_provider, common_options)?,
<# } #>
<# foreach (string telemSchema in this.telemSchemas) { #>
            <#=NamingSupport.ToSnakeCase($"{telemSchema}Sender")#>: <#=this.AsUpper(telemSchema)#>Sender::new(mqtt_provider, common_options)?,
<# } #>
        };

        Ok(service)
    }
}

impl<PS: MqttPubSub + Clone + Send + Sync + 'static<#=this.telemSchemas.Any() ? ", PR: MqttPubReceiver + MqttAck + Send + Sync + 'static" : ""#>> Client<PS<#=this.telemSchemas.Any() ? ", PR" : ""#>> {
    pub fn new<#=this.telemSchemas.Any() ? "" : "<PR: MqttPubReceiver + MqttAck + Send + Sync + 'static>"#>(
        mqtt_provider: &mut impl MqttProvider<PS, PR>,
        common_options: &CommonOptions,
    ) -> Result<Self, AIOProtocolError> {
        let client = Self {
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
            <#=NamingSupport.ToSnakeCase($"{cmdNameReqResp.Item1}CommandInvoker")#>: <#=this.AsUpper(cmdNameReqResp.Item1)#>CommandInvoker::new(mqtt_provider, common_options)?,
<# } #>
<# foreach (string telemSchema in this.telemSchemas) { #>
            <#=NamingSupport.ToSnakeCase($"{telemSchema}Receiver")#>: <#=this.AsUpper(telemSchema)#>Receiver::new(mqtt_provider, common_options)?,
<# } #>
        };

        Ok(client)
    }
}
<#+
    private string AsUpper(string name) => char.ToUpperInvariant(name[0]) + name.Substring(1);
#>
