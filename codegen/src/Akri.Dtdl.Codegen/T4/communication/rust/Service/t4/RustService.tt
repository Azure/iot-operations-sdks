<#@ template language="C#" linePragmas="false" #>
<#@ import namespace="Akri.Dtdl.Codegen" #>
/* Code generated by Akri.Dtdl.Codegen; DO NOT EDIT. */
#![allow(non_snake_case)]

pub const MODEL_ID: &str = "<#=this.modelId#>";
<# if (this.commandTopic != null) { #>
pub const REQUEST_TOPIC_PATTERN: &str = "<#=this.commandTopic#>";
<# } #>
<# if (this.telemetryTopic != null) { #>
pub const TELEMETRY_TOPIC_PATTERN: &str = "<#=this.telemetryTopic#>";
<# } #>

pub mod <#=this.serviceName#> {
    use azure_iot_operations_mqtt::session::{
        SessionPubReceiver, SessionPubSub,
    };
    use azure_iot_operations_mqtt::interface::MqttProvider;
    use azure_iot_operations_protocol::common::aio_protocol_error::AIOProtocolError;

<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
    use super::super::<#=NamingSupport.ToSnakeCase($"{cmdNameReqResp.Item1}CommandExecutor")#>::<#=this.AsUpper(cmdNameReqResp.Item1)#>CommandExecutor;
    use super::super::<#=NamingSupport.ToSnakeCase($"{cmdNameReqResp.Item1}CommandInvoker")#>::<#=this.AsUpper(cmdNameReqResp.Item1)#>CommandInvoker;
<# } #>
<# foreach (string telemSchema in this.telemSchemas) { #>

    use super::super::<#=NamingSupport.ToSnakeCase($"{telemSchema}Sender")#>::<#=this.AsUpper(telemSchema)#>Sender;
    use super::super::<#=NamingSupport.ToSnakeCase($"{telemSchema}Receiver")#>::<#=this.AsUpper(telemSchema)#>Receiver;
<# } #>

    pub struct Service {
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
        pub <#=NamingSupport.ToSnakeCase($"{cmdNameReqResp.Item1}CommandExecutor")#>: <#=this.AsUpper(cmdNameReqResp.Item1)#>CommandExecutor,
<# } #>
<# foreach (string telemSchema in this.telemSchemas) { #>
        pub <#=NamingSupport.ToSnakeCase($"{telemSchema}Sender")#>: <#=this.AsUpper(telemSchema)#>Sender,
<# } #>
    }

    pub struct Client {
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
        pub <#=NamingSupport.ToSnakeCase($"{cmdNameReqResp.Item1}CommandInvoker")#>: <#=this.AsUpper(cmdNameReqResp.Item1)#>CommandInvoker,
<# } #>
<# foreach (string telemSchema in this.telemSchemas) { #>
        pub <#=NamingSupport.ToSnakeCase($"{telemSchema}Receiver")#>: <#=this.AsUpper(telemSchema)#>Receiver,
<# } #>
    }

    impl Service {
        pub fn new(mqtt_provider: &mut impl MqttProvider<SessionPubSub, SessionPubReceiver>) -> Result<Self, AIOProtocolError> {
            let service = Self {
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
                <#=NamingSupport.ToSnakeCase($"{cmdNameReqResp.Item1}CommandExecutor")#>: <#=this.AsUpper(cmdNameReqResp.Item1)#>CommandExecutor::new(mqtt_provider)?,
<# } #>
<# foreach (string telemSchema in this.telemSchemas) { #>
                <#=NamingSupport.ToSnakeCase($"{telemSchema}Sender")#>: <#=this.AsUpper(telemSchema)#>Sender::new(mqtt_provider)?,
<# } #>
            };

            Ok(service)
        }
    }

    impl Client {
        pub fn new(mqtt_provider: &mut impl MqttProvider<SessionPubSub, SessionPubReceiver>) -> Result<Self, AIOProtocolError> {
            let client = Self {
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
                <#=NamingSupport.ToSnakeCase($"{cmdNameReqResp.Item1}CommandInvoker")#>: <#=this.AsUpper(cmdNameReqResp.Item1)#>CommandInvoker::new(mqtt_provider)?,
<# } #>
<# foreach (string telemSchema in this.telemSchemas) { #>
                <#=NamingSupport.ToSnakeCase($"{telemSchema}Receiver")#>: <#=this.AsUpper(telemSchema)#>Receiver::new(mqtt_provider)?,
<# } #>
            };

            Ok(client)
        }
    }
}
<#+
    private string AsUpper(string name) => char.ToUpperInvariant(name[0]) + name.Substring(1);
#>
