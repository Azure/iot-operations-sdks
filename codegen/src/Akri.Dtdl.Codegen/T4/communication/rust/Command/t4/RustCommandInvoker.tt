<#@ template language="C#" linePragmas="false" #>
<#@ import namespace="Akri.Dtdl.Codegen" #>
/* Code generated by Akri.Dtdl.Codegen; DO NOT EDIT. */

use std::ops::{Deref, DerefMut};

use azure_iot_operations_mqtt::session::{
    SessionPubReceiver, SessionPubSub,
};
use azure_iot_operations_mqtt::interface::MqttProvider;
use azure_iot_operations_protocol::rpc::command_invoker::{
    CommandInvoker, CommandInvokerOptionsBuilder,
};
use azure_iot_operations_protocol::common::aio_protocol_error::AIOProtocolError;

<# if (this.reqSchema == null || this.respSchema == null) { #>
use super::super::common_types::<#=NamingSupport.ToSnakeCase(this.serialzerEmptyType)#>::<#=this.serialzerEmptyType#>;
<# } #>
<# if (this.reqSchema == "Bytes" || this.respSchema == "Bytes") { #>
use super::super::common_types::bytes::Bytes;
<# } #>
<# if (this.reqSchema != null && this.reqSchema != "Bytes") { #>
use super::<#=NamingSupport.ToSnakeCase(this.reqSchema)#>::<#=this.reqSchema#>;
<# } #>
<# if (this.respSchema != null && this.respSchema != "Bytes") { #>
use super::<#=NamingSupport.ToSnakeCase(this.respSchema)#>::<#=this.respSchema#>;
<# } #>

use super::wrapper::MODEL_ID;
use super::wrapper::REQUEST_TOPIC_PATTERN;

pub struct <#=this.capitalizedCommandName#>CommandInvoker(CommandInvoker<<#=this.TypeParams()#>, SessionPubSub>);

impl <#=this.capitalizedCommandName#>CommandInvoker {
    pub fn new(mqtt_provider: &mut impl MqttProvider<SessionPubSub, SessionPubReceiver>) -> Result<Self, AIOProtocolError> {
        let invoker_options = CommandInvokerOptionsBuilder::default()
            .model_id(MODEL_ID.to_string())
            .request_topic_pattern(REQUEST_TOPIC_PATTERN)
            .response_topic_pattern(format!("clients/{{invokerClientId}}/{REQUEST_TOPIC_PATTERN}"))
            .command_name("<#=this.commandName#>")
            .build()
            .unwrap();
        CommandInvoker::new(mqtt_provider, invoker_options).map(|ce| Self(ce))
    }
}

impl Deref for <#=this.capitalizedCommandName#>CommandInvoker {
    type Target = CommandInvoker<<#=this.TypeParams()#>, SessionPubSub>;

    fn deref(&self) -> &Self::Target {
        &self.0
    }
}

impl DerefMut for <#=this.capitalizedCommandName#>CommandInvoker {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.0
    }
}
<#+
    private string TypeParams() => $"{this.reqSchema ?? this.serialzerEmptyType}, {this.respSchema ?? this.serialzerEmptyType}";
#>
