<#@ template language="C#" linePragmas="false" #>
<#@ import namespace="Akri.Dtdl.Codegen" #>
/* Code generated by Akri.Dtdl.Codegen; DO NOT EDIT. */

use std::ops::{Deref, DerefMut};
<# if (this.ttl != null) { #>
use iso8601_duration;
<# } #>

use azure_iot_operations_mqtt::interface::{
    MqttProvider, MqttPubSub, MqttPubReceiver, MqttAck,
};
use azure_iot_operations_protocol::rpc::command_executor::{
    CommandExecutor, CommandExecutorOptionsBuilder,
};
use azure_iot_operations_protocol::common::aio_protocol_error::AIOProtocolError;

<# if (this.reqSchema == null || this.respSchema == null) { #>
use super::super::common_types::<#=NamingSupport.ToSnakeCase(this.serializerEmptyType)#>::<#=this.serializerEmptyType#>;
<# } #>
<# if (this.reqSchema == "Bytes" || this.respSchema == "Bytes") { #>
use super::super::common_types::bytes::Bytes;
<# } #>
<# if (this.reqSchema != null && this.reqSchema != "Bytes") { #>
use super::<#=NamingSupport.ToSnakeCase(this.reqSchema)#>::<#=this.reqSchema#>;
<# } #>
<# if (this.respSchema != null && this.respSchema != "Bytes") { #>
use super::<#=NamingSupport.ToSnakeCase(this.respSchema)#>::<#=this.respSchema#>;
<# } #>

use super::wrapper::MODEL_ID;
use super::wrapper::REQUEST_TOPIC_PATTERN;

pub struct <#=this.capitalizedCommandName#>CommandExecutor<PS: MqttPubSub + Clone + Send + Sync + 'static, PR: MqttPubReceiver + MqttAck + Send + Sync + 'static>(CommandExecutor<<#=this.TypeParams()#>, PS, PR>);

impl<PS: MqttPubSub + Clone + Send + Sync + 'static, PR: MqttPubReceiver + MqttAck + Send + Sync + 'static> <#=this.capitalizedCommandName#>CommandExecutor<PS, PR> {
    pub fn new(mqtt_provider: &mut impl MqttProvider<PS, PR>) -> Result<Self, AIOProtocolError> {
        let executor_options = CommandExecutorOptionsBuilder::default()
            .model_id(MODEL_ID.to_string())
            .request_topic_pattern(REQUEST_TOPIC_PATTERN)
            .command_name("<#=this.commandName#>")
<# if (this.ttl != null) { #>
            .cacheable_duration("<#=this.ttl#>".parse::<iso8601_duration::Duration>().unwrap().to_std().unwrap())
<# } #>
            .is_idempotent(<#=this.isIdempotent ? "true" : "false"#>)
            .build()
            .unwrap();
        CommandExecutor::new(mqtt_provider, executor_options).map(|ce| Self(ce))
    }
}

impl<PS: MqttPubSub + Clone + Send + Sync + 'static, PR: MqttPubReceiver + MqttAck + Send + Sync + 'static> Deref for <#=this.capitalizedCommandName#>CommandExecutor<PS, PR> {
    type Target = CommandExecutor<<#=this.TypeParams()#>, PS, PR>;

    fn deref(&self) -> &Self::Target {
        &self.0
    }
}

impl<PS: MqttPubSub + Clone + Send + Sync + 'static, PR: MqttPubReceiver + MqttAck + Send + Sync + 'static> DerefMut for <#=this.capitalizedCommandName#>CommandExecutor<PS, PR> {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.0
    }
}
<#+
    private string TypeParams() => $"{this.reqSchema ?? this.serializerEmptyType}, {this.respSchema ?? this.serializerEmptyType}";
#>
