<#@ template language="C#" linePragmas="false" #>
<#@ import namespace="Akri.Dtdl.Codegen" #>
/* Code generated by Akri.Dtdl.Codegen; DO NOT EDIT. */

use std::ops::{Deref, DerefMut};

use azure_iot_operations_mqtt::session::{
    SessionPubReceiver, SessionPubSub,
};
use azure_iot_operations_mqtt::interface::MqttProvider;
use azure_iot_operations_protocol::telemetry::telemetry_receiver::{
    TelemetryReceiver, TelemetryReceiverOptionsBuilder,
};
use azure_iot_operations_protocol::common::aio_protocol_error::AIOProtocolError;

use super::<#=NamingSupport.ToSnakeCase(this.schemaClassName)#>::<#=this.schemaClassName#>;

use super::wrapper::MODEL_ID;
use super::wrapper::TELEMETRY_TOPIC_PATTERN;

pub struct <#=this.schemaClassName#>Receiver(TelemetryReceiver<<#=this.schemaClassName#>, SessionPubSub, SessionPubReceiver>);

impl <#=this.schemaClassName#>Receiver {
    pub fn new(mqtt_provider: &mut impl MqttProvider<SessionPubSub, SessionPubReceiver>) -> Result<Self, AIOProtocolError> {
        let receiver_options = TelemetryReceiverOptionsBuilder::default()
            .model_id(MODEL_ID.to_string())
            .topic_pattern(TELEMETRY_TOPIC_PATTERN)
<# if (this.telemetryName != null) { #>
            .telemetry_name("<#=this.telemetryName#>")
<# } #>
            .build()
            .unwrap();
        TelemetryReceiver::new(mqtt_provider, receiver_options).map(|ce| Self(ce))
    }
}

impl Deref for <#=this.schemaClassName#>Receiver {
    type Target = TelemetryReceiver<<#=this.schemaClassName#>, SessionPubSub, SessionPubReceiver>;

    fn deref(&self) -> &Self::Target {
        &self.0
    }
}

impl DerefMut for <#=this.schemaClassName#>Receiver {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.0
    }
}
