<#@ template language="C#" linePragmas="false" #>
<#@ import namespace="Akri.Dtdl.Codegen" #>
/* Code generated by Akri.Dtdl.Codegen; DO NOT EDIT. */

use std::ops::{Deref, DerefMut};

use azure_iot_operations_mqtt::interface::{
    MqttProvider, MqttPubSub, MqttPubReceiver, MqttAck,
};
use azure_iot_operations_protocol::telemetry::telemetry_sender::{
    TelemetrySender, TelemetrySenderOptionsBuilder,
};
use azure_iot_operations_protocol::common::aio_protocol_error::AIOProtocolError;

use super::<#=NamingSupport.ToSnakeCase(this.schemaClassName)#>::<#=this.schemaClassName#>;

use super::MODEL_ID;
use super::TELEMETRY_TOPIC_PATTERN;

pub struct <#=this.schemaClassName#>Sender<PS: MqttPubSub + Clone + Send + Sync + 'static>(TelemetrySender<<#=this.schemaClassName#>, PS>);

impl<PS: MqttPubSub + Clone + Send + Sync + 'static> <#=this.schemaClassName#>Sender<PS> {
    pub fn new<PR: MqttPubReceiver + MqttAck + Send + Sync + 'static>(mqtt_provider: &mut impl MqttProvider<PS, PR>) -> Result<Self, AIOProtocolError> {
        let sender_options = TelemetrySenderOptionsBuilder::default()
            .model_id(MODEL_ID.to_string())
            .topic_pattern(TELEMETRY_TOPIC_PATTERN)
<# if (this.telemetryName != null) { #>
            .telemetry_name("<#=this.telemetryName#>")
<# } #>
            .build()
            .unwrap();
        TelemetrySender::new(mqtt_provider, sender_options).map(|ce| Self(ce))
    }
}

impl<PS: MqttPubSub + Clone + Send + Sync + 'static> Deref for <#=this.schemaClassName#>Sender<PS> {
    type Target = TelemetrySender<<#=this.schemaClassName#>, PS>;

    fn deref(&self) -> &Self::Target {
        &self.0
    }
}

impl<PS: MqttPubSub + Clone + Send + Sync + 'static> DerefMut for <#=this.schemaClassName#>Sender<PS> {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.0
    }
}
