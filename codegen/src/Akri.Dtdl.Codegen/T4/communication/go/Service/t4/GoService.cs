// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Akri.Dtdl.Codegen
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class GoService : GoServiceBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("// Code generated by Akri.Dtdl.Codegen; DO NOT EDIT.\r\npackage ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.genNamespace));
            this.Write("\r\n\r\nimport (\r\n\t\"context\"\r\n\r\n\t\"github.com/Azure/iot-operations-sdks/go/protocol\"\r\n" +
                    "\t\"github.com/Azure/iot-operations-sdks/go/protocol/mqtt\"\r\n)\r\n\r\ntype ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.serviceName));
            this.Write("Service struct {\r\n");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("\t*");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(cmdNameReqResp.Item1)));
            this.Write("CommandExecutor\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("\t*");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(telemSchema)));
            this.Write("Sender\r\n");
 } 
            this.Write("}\r\n\r\ntype ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.serviceName));
            this.Write("Client struct {\r\n");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("\t*");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(cmdNameReqResp.Item1)));
            this.Write("CommandInvoker\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("\t*");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(telemSchema)));
            this.Write("Receiver\r\n");
 } 
            this.Write("}\r\n\r\nconst (\r\n");
 if (this.doesCommandTargetService || this.doesTelemetryTargetService) { 
            this.Write("\tModelID = \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.modelId));
            this.Write("\"\r\n");
 } 
 if (this.commandTopic != null) { 
            this.Write("\tCommandTopic = \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.commandTopic));
            this.Write("\"\r\n");
 } 
 if (this.telemetryTopic != null) { 
            this.Write("\tTelemetryTopic = \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.telemetryTopic));
            this.Write("\"\r\n");
 } 
            this.Write(")\r\n\r\nfunc New");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.serviceName));
            this.Write("Service(\r\n\tclient mqtt.Client,\r\n");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("\t");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("Handler protocol.CommandHandler[");
            this.Write(this.ToStringHelper.ToStringWithCulture(cmdNameReqResp.Item2 ?? "any"));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(cmdNameReqResp.Item3 ?? "any"));
            this.Write("],\r\n");
 } 
            this.Write("\topts ...protocol.Option,\r\n) (*");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.serviceName));
            this.Write("Service, error) {\r\n\tvar err error\r\n\r\n\tserverOpts := []protocol.Option{\r\n\t\tprotoco" +
                    "l.WithTopicTokenNamespace(\"ex:\"),\r\n\t\tprotocol.WithTopicTokens{\r\n");
 if (this.doesCommandTargetService || this.doesTelemetryTargetService) { 
            this.Write("\t\t\t\"modelId\":    ModelID,\r\n");
 } 
 if (this.commandTopic != null) { 
            this.Write("\t\t\t\"executorId\": client.ClientID(),\r\n");
 } 
 if (this.telemetryTopic != null) { 
            this.Write("\t\t\t\"senderId\":   client.ClientID(),\r\n");
 } 
            this.Write("\t\t},\r\n\t}\r\n");
 if (this.cmdNameReqResps.Any()) { 
            this.Write("\r\n\tvar executorOpts protocol.CommandExecutorOptions\r\n\texecutorOpts.ApplyOptions(o" +
                    "pts, serverOpts...)\r\n");
 } 
 if (this.telemSchemas.Any()) { 
            this.Write("\r\n\tvar senderOpts protocol.TelemetrySenderOptions\r\n\tsenderOpts.ApplyOptions(opts," +
                    " serverOpts...)\r\n");
 } 
            this.Write("\r\n\t");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(this.serviceName)));
            this.Write("Service := &");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.serviceName));
            this.Write("Service{}\r\n");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("\r\n\t");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(this.serviceName)));
            this.Write("Service.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(cmdNameReqResp.Item1)));
            this.Write("CommandExecutor, err = New");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(cmdNameReqResp.Item1)));
            this.Write("CommandExecutor(\r\n\t\tclient,\r\n\t\tCommandTopic,\r\n\t\t");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("Handler,\r\n\t\t&executorOpts,\r\n\t)\r\n\tif err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("\r\n\t");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(this.serviceName)));
            this.Write("Service.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(telemSchema)));
            this.Write("Sender, err = New");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(telemSchema)));
            this.Write("Sender(\r\n\t\tclient,\r\n\t\tTelemetryTopic,\r\n\t\t&senderOpts,\r\n\t)\r\n\tif err != nil {\r\n\t\tre" +
                    "turn nil, err\r\n\t}\r\n");
 } 
            this.Write("\r\n\treturn ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(this.serviceName)));
            this.Write("Service, nil\r\n}\r\n\r\nfunc (service *");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.serviceName));
            this.Write("Service) Listen(\r\n\tctx context.Context,\r\n) (func(), error) {\r\n\treturn protocol.Li" +
                    "sten(\r\n\t\tctx,\r\n");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("\t\tservice.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(cmdNameReqResp.Item1)));
            this.Write("CommandExecutor,\r\n");
 } 
            this.Write("\t)\r\n}\r\n\r\nfunc New");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.serviceName));
            this.Write("Client(\r\n\tclient mqtt.Client,\r\n");
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("\t");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(telemSchema)));
            this.Write("Handler protocol.TelemetryHandler[");
            this.Write(this.ToStringHelper.ToStringWithCulture(telemSchema));
            this.Write("],\r\n");
 } 
            this.Write("\topts ...protocol.Option,\r\n) (*");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.serviceName));
            this.Write("Client, error) {\r\n\tvar err error\r\n\r\n\tclientOpts := []protocol.Option{\r\n\t\tprotocol" +
                    ".WithTopicTokenNamespace(\"ex:\"),\r\n\t\tprotocol.WithTopicTokens{\r\n");
 if (this.doesCommandTargetService || this.doesTelemetryTargetService) { 
            this.Write("\t\t\t\"modelId\":    ModelID,\r\n");
 } 
 if (this.commandTopic != null) { 
            this.Write("\t\t\t\"invokerClientId\": client.ClientID(),\r\n");
 } 
            this.Write("\t\t},\r\n\t}\r\n");
 if (this.cmdNameReqResps.Any()) { 
            this.Write("\r\n\tvar invokerOpts protocol.CommandInvokerOptions\r\n\tinvokerOpts.ApplyOptions(opts" +
                    ", clientOpts...)\r\n");
 } 
 if (this.telemSchemas.Any()) { 
            this.Write("\r\n\tvar receiverOpts protocol.TelemetryReceiverOptions\r\n\treceiverOpts.ApplyOptions" +
                    "(opts, clientOpts...)\r\n");
 } 
            this.Write("\r\n\t");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(this.serviceName)));
            this.Write("Client := &");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.serviceName));
            this.Write("Client{}\r\n");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("\r\n\t");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(this.serviceName)));
            this.Write("Client.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(cmdNameReqResp.Item1)));
            this.Write("CommandInvoker, err = New");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(cmdNameReqResp.Item1)));
            this.Write("CommandInvoker(\r\n\t\tclient,\r\n\t\tCommandTopic,\r\n\t\t&invokerOpts,\r\n\t)\r\n\tif err != nil " +
                    "{\r\n\t\treturn nil, err\r\n\t}\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("\r\n\t");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(this.serviceName)));
            this.Write("Client.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(telemSchema)));
            this.Write("Receiver, err = New");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(telemSchema)));
            this.Write("Receiver(\r\n\t\tclient,\r\n\t\tTelemetryTopic,\r\n\t\t");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(telemSchema)));
            this.Write("Handler,\r\n\t\t&receiverOpts,\r\n\t)\r\n\tif err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n");
 } 
            this.Write("\r\n\treturn ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(this.serviceName)));
            this.Write("Client, nil\r\n}\r\n\r\nfunc (client *");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.serviceName));
            this.Write("Client) Listen(\r\n\tctx context.Context,\r\n) (func(), error) {\r\n\treturn protocol.Lis" +
                    "ten(\r\n\t\tctx,\r\n");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("\t\tclient.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(cmdNameReqResp.Item1)));
            this.Write("CommandInvoker,\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("\t\tclient.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(telemSchema)));
            this.Write("Receiver,\r\n");
 } 
            this.Write("\t)\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }

    private string AsUpper(string name) => char.ToUpperInvariant(name[0]) + name.Substring(1);

    private string AsLower(string name) => char.ToLowerInvariant(name[0]) + name.Substring(1);

    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class GoServiceBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
