// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Akri.Dtdl.Codegen
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class DotNetService : DotNetServiceBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("/* This is an auto-generated file.  Do not modify. */\r\n\r\n#nullable enable\r\n\r\nname" +
                    "space ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.projectName));
            this.Write(".");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.genNamespace));
            this.Write("\r\n{\r\n    using System;\r\n    using System.Collections.Generic;\r\n    using System.L" +
                    "inq;\r\n");
 if (this.cmdNameReqResps.Any() || this.telemSchemas.Any()) { 
            this.Write("    using System.Threading;\r\n");
 } 
            this.Write("    using System.Threading.Tasks;\r\n    using Azure.Iot.Operations.Protocol.Models;\r\n" +
                    "    using Azure.Iot.Operations.Protocol;\r\n    using Azure.Iot.Operations.Protocol.RPC;\r\n    using Azure.Iot.Operations.Protocol.Te" +
                    "lemetry;\r\n    using ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.projectName));
            this.Write(";\r\n\r\n    [ModelId(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.modelId));
            this.Write("\")]\r\n");
 if (this.commandTopic != null) { 
            this.Write("    [CommandTopic(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.commandTopic));
            this.Write("\")]\r\n");
 } 
 if (this.telemetryTopic != null) { 
            this.Write("    [TelemetryTopic(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.telemetryTopic));
            this.Write("\")]\r\n");
 } 
 if (this.commandTopic != null && !this.doesCommandTargetExecutor) { 
            this.Write("    [ServiceGroupId(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(Defaults.ServiceGroupId));
            this.Write("\")]\r\n");
 } 
            this.Write("    public static partial class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.serviceName));
            this.Write("\r\n    {\r\n        public abstract partial class Service : IAsyncDisposable\r\n      " +
                    "  {\r\n");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("            private readonly ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(cmdNameReqResp.Item1)));
            this.Write("CommandExecutor ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("CommandExecutor;\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("            private readonly ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(telemSchema)));
            this.Write("Sender ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(telemSchema)));
            this.Write("Sender;\r\n");
 } 
            this.Write("\r\n            public Service(IMqttPubSubClient mqttClient)\r\n            {\r\n      " +
                    "          this.CustomTopicTokenMap = new();\r\n\r\n");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("                this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("CommandExecutor = new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(cmdNameReqResp.Item1)));
            this.Write("CommandExecutor(mqttClient) { OnCommandReceived = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(cmdNameReqResp.Item1)));
            this.Write("_Int, CustomTopicTokenMap = this.CustomTopicTokenMap };\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("                this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(telemSchema)));
            this.Write("Sender = new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(telemSchema)));
            this.Write("Sender(mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };\r\n");
 } 
            this.Write("            }\r\n\r\n");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("            public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(cmdNameReqResp.Item1)));
            this.Write("CommandExecutor ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(cmdNameReqResp.Item1)));
            this.Write("CommandExecutor { get => this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("CommandExecutor; }\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("            public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(telemSchema)));
            this.Write("Sender ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(telemSchema)));
            this.Write("Sender { get => this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(telemSchema)));
            this.Write("Sender; }\r\n");
 } 
            this.Write("\r\n            public Dictionary<string, string> CustomTopicTokenMap { get; privat" +
                    "e init; }\r\n");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("\r\n            public abstract ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ExtRespType(cmdNameReqResp, asTask: !this.syncApi)));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(cmdNameReqResp.Item1)));
            this.Write(this.ToStringHelper.ToStringWithCulture(this.syncApi ? "" : "Async"));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ReqParam(cmdNameReqResp)));
            this.Write("CommandRequestMetadata requestMetadata, CancellationToken cancellationToken);\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("\r\n            public async Task SendTelemetryAsync(");
            this.Write(this.ToStringHelper.ToStringWithCulture(telemSchema));
            this.Write(" telemetry, OutgoingTelemetryMetadata metadata, MqttQualityOfServiceLevel qos = M" +
                    "qttQualityOfServiceLevel.AtLeastOnce, TimeSpan? messageExpiryInterval = null, Ca" +
                    "ncellationToken cancellationToken = default)\r\n            {\r\n                awa" +
                    "it this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(telemSchema)));
            this.Write("Sender.SendTelemetryAsync(telemetry, metadata, qos, messageExpiryInterval, cancel" +
                    "lationToken);\r\n            }\r\n");
 } 
 if (this.cmdNameReqResps.Any()) { 
            this.Write("\r\n            public async Task StartAsync(int? preferredDispatchConcurrency = nu" +
                    "ll, CancellationToken cancellationToken = default)\r\n            {\r\n             " +
                    "   await Task.WhenAll(\r\n");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("                    this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("CommandExecutor.StartAsync(preferredDispatchConcurrency, cancellationToken)");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.IsLast(cmdNameReqResp) ? ").ConfigureAwait(false);" : ","));
            this.Write("\r\n");
 } 
            this.Write("            }\r\n\r\n            public async Task StopAsync(CancellationToken cancel" +
                    "lationToken = default)\r\n            {\r\n                await Task.WhenAll(\r\n");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("                    this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("CommandExecutor.StopAsync(cancellationToken)");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.IsLast(cmdNameReqResp) ? ").ConfigureAwait(false);" : ","));
            this.Write("\r\n");
 } 
            this.Write("            }\r\n");
 } 
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("            private");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.syncApi ? "" : " async"));
            this.Write(" Task<ExtendedResponse<");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.SchemaType(cmdNameReqResp.Item3)));
            this.Write(">> ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(cmdNameReqResp.Item1)));
            this.Write("_Int(ExtendedRequest<");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.SchemaType(cmdNameReqResp.Item2)));
            this.Write("> req, CancellationToken cancellationToken)\r\n            {\r\n");
 if (this.syncApi) { 
            this.Write("                ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.IntLValue(cmdNameReqResp)));
            this.Write("this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(cmdNameReqResp.Item1)));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ReqArgs(cmdNameReqResp, "req")));
            this.Write(", cancellationToken);\r\n                return Task.FromResult(new ExtendedRespons" +
                    "e<");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.SchemaType(cmdNameReqResp.Item3)));
            this.Write("> { ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.IntRValue(cmdNameReqResp)));
            this.Write("});\r\n");
 } else { 
            this.Write("                ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.IntLValue(cmdNameReqResp)));
            this.Write("await this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(cmdNameReqResp.Item1)));
            this.Write("Async(");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ReqArgs(cmdNameReqResp, "req")));
            this.Write(", cancellationToken);\r\n                return new ExtendedResponse<");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.SchemaType(cmdNameReqResp.Item3)));
            this.Write("> { ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.IntRValue(cmdNameReqResp)));
            this.Write("};\r\n");
 } 
            this.Write("            }\r\n");
 } 
            this.Write("\r\n            public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.cmdNameReqResps.Any() ? "async " : ""));
            this.Write("ValueTask DisposeAsync()\r\n            {\r\n");
 if (this.cmdNameReqResps.Any()) { 
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("                await this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("CommandExecutor.DisposeAsync().ConfigureAwait(false);\r\n");
 } 
 } else { 
            this.Write("                return ValueTask.CompletedTask;\r\n");
 } 
            this.Write("            }\r\n\r\n            public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.cmdNameReqResps.Any() ? "async " : ""));
            this.Write("ValueTask DisposeAsync(bool disposing)\r\n            {\r\n");
 if (this.cmdNameReqResps.Any()) { 
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("                await this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("CommandExecutor.DisposeAsync(disposing).ConfigureAwait(false);\r\n");
 } 
 } else { 
            this.Write("                return ValueTask.CompletedTask;\r\n");
 } 
            this.Write("            }\r\n        }\r\n\r\n        public abstract partial class Client");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.cmdNameReqResps.Any() ? " : IAsyncDisposable" : ""));
            this.Write("\r\n        {\r\n");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("            private readonly ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(cmdNameReqResp.Item1)));
            this.Write("CommandInvoker ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("CommandInvoker;\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("            private readonly ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(telemSchema)));
            this.Write("Receiver ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(telemSchema)));
            this.Write("Receiver;\r\n");
 } 
            this.Write("\r\n            public Client(IMqttPubSubClient mqttClient)\r\n            {\r\n       " +
                    "         this.CustomTopicTokenMap = new();\r\n\r\n");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("                this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("CommandInvoker = new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(cmdNameReqResp.Item1)));
            this.Write("CommandInvoker(mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("                this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(telemSchema)));
            this.Write("Receiver = new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(telemSchema)));
            this.Write("Receiver(mqttClient) { OnTelemetryReceived = this.ReceiveTelemetry, CustomTopicTo" +
                    "kenMap = this.CustomTopicTokenMap };\r\n");
 } 
            this.Write("            }\r\n\r\n");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("            public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(cmdNameReqResp.Item1)));
            this.Write("CommandInvoker ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(cmdNameReqResp.Item1)));
            this.Write("CommandInvoker { get => this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("CommandInvoker; }\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("            public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(telemSchema)));
            this.Write("Receiver ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(telemSchema)));
            this.Write("Receiver { get => this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(telemSchema)));
            this.Write("Receiver; }\r\n");
 } 
            this.Write("\r\n            public Dictionary<string, string> CustomTopicTokenMap { get; privat" +
                    "e init; }\r\n");
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("\r\n            public abstract Task ReceiveTelemetry(string senderId, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(telemSchema));
            this.Write(" telemetry, IncomingTelemetryMetadata metadata);\r\n");
 } 
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("\r\n            public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.CallAsyncType(cmdNameReqResp)));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(cmdNameReqResp.Item1)));
            this.Write("Async(");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ExecParam()));
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ReqParam(cmdNameReqResp)));
            this.Write(@"CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                return new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.CallAsyncType(cmdNameReqResp)));
            this.Write("(this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("CommandInvoker.InvokeCommandAsync(");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ExecArg()));
            this.Write(this.ToStringHelper.ToStringWithCulture(cmdNameReqResp.Item2 != null ? $"request" : this.allocateEmpty));
            this.Write(", metadata, commandTimeout, cancellationToken), metadata.CorrelationId);\r\n       " +
                    "     }\r\n");
 } 
 if (this.telemSchemas.Any()) { 
            this.Write("\r\n            public async Task StartAsync(CancellationToken cancellationToken = " +
                    "default)\r\n            {\r\n                await Task.WhenAll(\r\n");
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("                    this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(telemSchema)));
            this.Write("Receiver.StartAsync(cancellationToken)");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.IsLast(telemSchema) ? ").ConfigureAwait(false);" : ","));
            this.Write("\r\n");
 } 
            this.Write("            }\r\n");
 } 
 if (this.telemSchemas.Any()) { 
            this.Write("\r\n            public async Task StopAsync(CancellationToken cancellationToken = d" +
                    "efault)\r\n            {\r\n                await Task.WhenAll(\r\n");
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("                    this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(telemSchema)));
            this.Write("Receiver.StopAsync(cancellationToken)");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.IsLast(telemSchema) ? ").ConfigureAwait(false);" : ","));
            this.Write("\r\n");
 } 
            this.Write("            }\r\n");
 } 
 if (this.cmdNameReqResps.Any()) { 
            this.Write("\r\n            public async ValueTask DisposeAsync()\r\n            {\r\n");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("                await this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("CommandInvoker.DisposeAsync().ConfigureAwait(false);\r\n");
 } 
            this.Write("            }\r\n\r\n            public async ValueTask DisposeAsync(bool disposing)\r" +
                    "\n            {\r\n");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("                await this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("CommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);\r\n");
 } 
            this.Write("            }\r\n");
 } 
            this.Write("        }\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }

    private string IntLValue((string, string, string) cmdNameReqResp) => (cmdNameReqResp.Item3 != null ? $"ExtendedResponse<{this.SchemaType(cmdNameReqResp.Item3)}> extended = " : $"CommandResponseMetadata? responseMetadata = ");

    private string IntRValue((string, string, string) cmdNameReqResp) => (cmdNameReqResp.Item3 != null ? "Response = extended.Response, ResponseMetadata = extended.ResponseMetadata " : "ResponseMetadata = responseMetadata ");

    private string ExtRespType((string, string, string) cmdNameReqResp, bool asTask) => this.CondWrap(cmdNameReqResp.Item3 != null ? $"ExtendedResponse<{this.SchemaType(cmdNameReqResp.Item3)}>" : "CommandResponseMetadata?", asTask);

    private string CondWrap(string type, bool asTask) => asTask ? $"Task<{type}>" : type;

    private string ReqParam((string, string, string) cmdNameReqResp) => cmdNameReqResp.Item2 != null ? $"{this.SchemaType(cmdNameReqResp.Item2)} request, " : "";

    private string ReqArgs((string, string, string) cmdNameReqResp, string reqVar) => cmdNameReqResp.Item2 != null ? $"{reqVar}.Request!, {reqVar}.RequestMetadata!" : $"{reqVar}.RequestMetadata!";

    private string CallAsyncType((string, string, string) cmdNameReqResp) => $"RpcCallAsync<{this.SchemaType(cmdNameReqResp.Item3)}>";

    private string SchemaType(string schema) => schema == null ? this.serialzerEmptyType : schema == "" ? "byte[]" : schema;

    private string ExecParam() => this.doesCommandTargetExecutor ? "string executorId, " : "";

    private string ExecArg() => this.doesCommandTargetExecutor ? "executorId, " : "\"\", ";

    private bool IsLast((string, string, string) cmdNameReqResp) => cmdNameReqResp.Item1 == this.cmdNameReqResps.Last().Item1;

    private bool IsLast(string telemSchema) => telemSchema == this.telemSchemas.Last();

    private string AsUpper(string name) => char.ToUpperInvariant(name[0]) + name.Substring(1);

    private string AsLower(string name) => char.ToLowerInvariant(name[0]) + name.Substring(1);

    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class DotNetServiceBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
