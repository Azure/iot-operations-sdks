<#@ template language="C#" linePragmas="false" #>
# Code generated by Akri.Dtdl.Codegen; DO NOT EDIT.

from abc import ABC, abstractmethod

from communication.CommunicationOptions import CommunicationOptions
from communication.model_id import model_id
<# if (this.commandTopic != null) { #>
from communication.command_topic import command_topic
<# } #>
<# if (this.telemetryTopic != null) { #>
from communication.telemetry_topic import telemetry_topic
<# } #>
<# if (this.commandTopic != null && !this.doesCommandTargetExecutor) { #>
from communication.service_group_id import service_group_id
<# } #>

<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
from <#=this.AsUpper(cmdNameReqResp.Item1)#>CommandExecutor_g import <#=this.AsUpper(cmdNameReqResp.Item1)#>CommandExecutor
from <#=this.AsUpper(cmdNameReqResp.Item1)#>CommandInvoker_g import <#=this.AsUpper(cmdNameReqResp.Item1)#>CommandInvoker
<# } #>
<# foreach (string telemSchema in this.telemSchemas) { #>
from <#=this.AsUpper(telemSchema)#>Sender_g import <#=this.AsUpper(telemSchema)#>Sender
from <#=this.AsUpper(telemSchema)#>Receiver_g import <#=this.AsUpper(telemSchema)#>Receiver
<# } #>

@model_id("<#=this.modelId#>")
<# if (this.commandTopic != null) { #>
@command_topic("<#=this.commandTopic#>")
<# } #>
<# if (this.telemetryTopic != null) { #>
@telemetry_topic("<#=this.telemetryTopic#>")
<# } #>
<# if (this.commandTopic != null && !this.doesCommandTargetExecutor) { #>
@service_group_id("<#=Defaults.ServiceGroupId#>")
<# } #>

class <#=this.serviceName#>(object):
    """<#=this.serviceName#>"""
    def __init__(self):
        self.Service.get_model_id = self.get_model_id
        self.Client.get_model_id = self.get_model_id
<# if (this.commandTopic != null) { #>
        self.Service.get_command_topic = self.get_command_topic
        self.Client.get_command_topic = self.get_command_topic
<# } #>
<# if (this.telemetryTopic != null) { #>
        self.Service.get_telemetry_topic = self.get_telemetry_topic
        self.Client.get_telemetry_topic = self.get_telemetry_topic
<# } #>
<# if (this.commandTopic != null && !this.doesCommandTargetExecutor) { #>
        self.Service.get_service_group_id = self.get_service_group_id
<# } #>

    class Service(<#=this.cmdNameReqResps.Any() ? "ABC" : "object"#>):
        """<#=this.serviceName#> service"""
        def __init__(self, mqtt_client):
            self._custom_topic_token_map = {}

<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
            self.<#=this.AsLower(cmdNameReqResp.Item1)#>_command_executor = <#=this.AsUpper(cmdNameReqResp.Item1)#>CommandExecutor(mqtt_client, self.get_command_topic()<#=this.CmdModelIdProp()#>, custom_topic_token_map = self.custom_topic_token_map)
            self.<#=this.AsLower(cmdNameReqResp.Item1)#>_command_executor.on_command_received = self.<#=this.AsLower(cmdNameReqResp.Item1)#>
<# } #>
<# foreach (string telemSchema in this.telemSchemas) { #>
            self.<#=this.AsLower(telemSchema)#>_sender = <#=this.AsUpper(telemSchema)#>Sender(mqtt_client, self.get_telemetry_topic()<#=this.TelemModelIdProp()#>, custom_topic_token_map = self.custom_topic_token_map)
<# } #>

<# if (this.commandTopic != null && !this.doesCommandTargetExecutor) { #>
            self.communication_options = CommunicationOptions(shared_subscription_id = self.get_service_group_id())
<# } else { #>
            self.communication_options = CommunicationOptions()
<# } #>

        @property
        def custom_topic_token_map(self):
            return self._custom_topic_token_map

        @property
        def communication_options(self):
            return self._communication_options

        @communication_options.setter
        def communication_options(self, value):
            self._communication_options = value
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
            self.<#=this.AsLower(cmdNameReqResp.Item1)#>_command_executor.communication_options = value
<# } #>
<# foreach (string telemSchema in this.telemSchemas) { #>
            self.<#=this.AsLower(telemSchema)#>_sender.communication_options = value
<# } #>

        def set_topic_namespace(self, value):
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
            self.<#=this.AsLower(cmdNameReqResp.Item1)#>_command_executor.topic_namespace = value
<# } #>
<# foreach (string telemSchema in this.telemSchemas) { #>
            self.<#=this.AsLower(telemSchema)#>_sender.topic_namespace = value
<# } #>
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>

        @abstractmethod
        async def <#=this.AsLower(cmdNameReqResp.Item1)#>(self<#=this.ReqParam(cmdNameReqResp)#>):
            pass
<# } #>
<# foreach (string telemSchema in this.telemSchemas) { #>

        async def send_<#=this.AsLower(telemSchema)#>(self, telemetry):
            await self.<#=this.AsLower(telemSchema)#>_sender.send_telemetry(telemetry)
<# } #>
<# if (this.cmdNameReqResps.Any()) { #>

        async def start(self):
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
            await self.<#=this.AsLower(cmdNameReqResp.Item1)#>_command_executor.start()
<# } #>
<# } #>

    class Client(<#=this.telemSchemas.Any() ? "ABC" : "object"#>):
        """<#=this.serviceName#> client"""
        def __init__(self, mqtt_client):
            self._custom_topic_token_map = {}

<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
            self.<#=this.AsLower(cmdNameReqResp.Item1)#>_command_invoker = <#=this.AsUpper(cmdNameReqResp.Item1)#>CommandInvoker(mqtt_client, self.get_command_topic()<#=this.CmdModelIdProp()#>, custom_topic_token_map = self.custom_topic_token_map)
<# } #>
<# foreach (string telemSchema in this.telemSchemas) { #>
            self.<#=this.AsLower(telemSchema)#>_receiver = <#=this.AsUpper(telemSchema)#>Receiver(mqtt_client, self.get_telemetry_topic()<#=this.TelemModelIdProp()#>, custom_topic_token_map = self.custom_topic_token_map)
            self.<#=this.AsLower(telemSchema)#>_receiver.on_telemetry_received = self.receive_<#=this.AsLower(telemSchema)#>
<# } #>

            self.communication_options = CommunicationOptions()

        @property
        def custom_topic_token_map(self):
            return self._custom_topic_token_map

        @property
        def communication_options(self):
            return self._communication_options

        @communication_options.setter
        def communication_options(self, value):
            self._communication_options = value
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
            self.<#=this.AsLower(cmdNameReqResp.Item1)#>_command_invoker.communication_options = value
<# } #>
<# foreach (string telemSchema in this.telemSchemas) { #>
            self.<#=this.AsLower(telemSchema)#>_receiver.communication_options = value
<# } #>

        def set_topic_namespace(self, value):
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
            self.<#=this.AsLower(cmdNameReqResp.Item1)#>_command_invoker.topic_namespace = value
<# } #>
<# foreach (string telemSchema in this.telemSchemas) { #>
            self.<#=this.AsLower(telemSchema)#>_receiver.topic_namespace = value
<# } #>
<# foreach (string telemSchema in this.telemSchemas) { #>

        @abstractmethod
        def receive_<#=this.AsLower(telemSchema)#>(self, sender_id, telemetry):
            pass
<# } #>
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>

        async def <#=this.AsLower(cmdNameReqResp.Item1)#>(self<#=this.ExecParam()#><#=this.ReqParam(cmdNameReqResp)#>, timeout):
            <#=this.OptRet(cmdNameReqResp)#>await self.<#=this.AsLower(cmdNameReqResp.Item1)#>_command_invoker.invoke_command(<#=this.ExecArg()#><#=this.ReqArg(cmdNameReqResp)#>timeout)
<# } #>
<# if (this.telemSchemas.Any()) { #>

        async def start(self):
<# foreach (string telemSchema in this.telemSchemas) { #>
            await self.<#=this.AsLower(telemSchema)#>_receiver.start()
<# } #>
<# } #>
<#+
    private string OptRet((string, string, string) cmdNameReqResp) => cmdNameReqResp.Item3 != "None" ? "return " : "";

    private string ReqParam((string, string, string) cmdNameReqResp) => cmdNameReqResp.Item2 != "None" ? ", request" : "";

    private string ReqArg((string, string, string) cmdNameReqResp) => cmdNameReqResp.Item2 != "None" ? "request, " : "";

    private string ExecParam() => this.doesCommandTargetExecutor ? ", executor_id" : "";

    private string ExecArg() => this.doesCommandTargetExecutor ? "executor_id, " : "\"\", ";

    private string CmdModelIdProp() => this.doesCommandTargetService ? ", model_id = self.get_model_id()" : "";

    private string TelemModelIdProp() => this.doesTelemetryTargetService ? ", model_id = self.get_model_id()" : "";

    private string AsUpper(string name) => char.ToUpperInvariant(name[0]) + name.Substring(1);

    private string AsLower(string name) => char.ToLowerInvariant(name[0]) + name.Substring(1);
#>
