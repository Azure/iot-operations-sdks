<#@ template language="C#" linePragmas="false" #>
/* This is an auto-generated file.  Do not modify. */
#![allow(non_camel_case_types)]
#![allow(unused_imports)]

use std::collections::HashMap;
use chrono::{DateTime, Utc};
use iso8601_duration::Duration;
use serde::{Deserialize, Serialize};
use akri_mqtt::encapsulation::{Date, Time};

<# foreach (var referencedSchema in this.referencedSchemaNames) { #>
use super::<#=NamingSupport.ToSnakeCase(referencedSchema)#>::<#=referencedSchema#>;
<# } #>

<# if (this.objectType.Description != null) { #>
// <#=this.objectType.Description#>
<# } #>
#[derive(Serialize, Deserialize)]
pub struct <#=this.objectType.SchemaName#> {
<# foreach (var fieldInfo in this.objectType.FieldInfos) { #>

<# if (fieldInfo.Value.Description != null) { #>
    // <#=fieldInfo.Value.Description#>
<# } #>
<# if (NamingSupport.ToSnakeCase(fieldInfo.Key) != fieldInfo.Key) { #>
    #[serde(rename="<#=fieldInfo.Key#>")]
<# } #>
<# if (!fieldInfo.Value.IsRequired) { #>
    #[serde(skip_serializing_if="Option::is_none")]
<# } #>
    pub <#=NamingSupport.ToSnakeCase(fieldInfo.Key)#>: <#=RustSchemaSupport.GetType(fieldInfo.Value.SchemaType, fieldInfo.Value.IsRequired)#>,
<# } #>
}
