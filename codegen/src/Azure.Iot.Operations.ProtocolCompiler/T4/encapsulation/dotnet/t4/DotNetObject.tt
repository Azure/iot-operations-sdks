<#@ template language="C#" linePragmas="false" #>
/* Code generated by Azure.Iot.Operations.ProtocolCompiler v<#=System.Reflection.Assembly.GetExecutingAssembly().GetName().Version#>; DO NOT EDIT. */

#nullable enable

namespace <#=this.projectName#>.<#=this.objectType.Namespace.GetTypeName(TargetLanguage.CSharp)#>
{
    using System;
    using System.Collections.Generic;
<# if (this.serFormat == SerializationFormat.Avro) { #>
    using Avro;
    using Avro.Specific;
<# } else if (this.serFormat == SerializationFormat.Json) { #>
    using System.Text.Json.Serialization;
<# } #>
    using <#=this.projectName#>;
<# foreach (CodeName referencedNamespace in this.referencedNamespaces) { #>
    using <#=this.projectName#>.<#=referencedNamespace.GetTypeName(TargetLanguage.CSharp)#>;
<# } #>

<# if (this.serFormat == SerializationFormat.Avro) { #>
    [System.CodeDom.Compiler.GeneratedCode("Azure.Iot.Operations.ProtocolCompiler", "<#=System.Reflection.Assembly.GetExecutingAssembly().GetName().Version#>")]
    public class <#=this.objectType.SchemaName.GetTypeName(TargetLanguage.CSharp, "base")#>
    {
        public virtual Schema Schema { get => Schema.Parse(@"{""namespace"":""<#=this.projectName#>.<#=this.objectType.Namespace.GetTypeName(TargetLanguage.CSharp)#>"",""name"":""<#=this.objectType.SchemaName.AsGiven#>"",""type"":""record"",""fields"":[]}"); }
    }

<# } #>
<# if (this.objectType.Description != null) { #>
    /// <summary>
    /// <#=this.objectType.Description#>
    /// </summary>
<# } #>
    [System.CodeDom.Compiler.GeneratedCode("Azure.Iot.Operations.ProtocolCompiler", "<#=System.Reflection.Assembly.GetExecutingAssembly().GetName().Version#>")]
    public partial class <#=this.objectType.SchemaName.GetTypeName(TargetLanguage.CSharp)#><#=this.Exports()#>
    {
<# foreach (var fieldInfo in this.objectType.FieldInfos) { #>
<# if (fieldInfo.Value.Description != null) { #>
        /// <summary>
        /// <#=fieldInfo.Value.Description#>
        /// </summary>
<# } #>
<# if (this.serFormat == SerializationFormat.Json) { #>
        [JsonPropertyName("<#=fieldInfo.Key.AsGiven#>")]
        [JsonIgnore(Condition = JsonIgnoreCondition.<#=fieldInfo.Value.IsRequired ? "Never" : "WhenWritingDefault"#>)]
<# if (fieldInfo.Value.IsRequired) { #>
        [JsonRequired]
<# } #>
<# } #>
<# if (fieldInfo.Value.Index != null) { #>
        [Dahomey.Cbor.Attributes.CborPropertyAttribute(index: <#=fieldInfo.Value.Index#>)]
<# } #>
        public <#=fieldInfo.Value.IsRequired ? "required " : ""#><#=DotNetSchemaSupport.GetType(fieldInfo.Value.SchemaType)#><#=fieldInfo.Value.IsRequired ? "" : "?"#> <#=fieldInfo.Key.GetFieldName(TargetLanguage.CSharp)#> { get; set; } <#=fieldInfo.Value.IsRequired ? "" : "= default;"#>

<# } #>
<# if (this.serFormat == SerializationFormat.Avro) { #>
        public virtual object Get(int fieldPos)
        {
            switch (fieldPos)
            {
<# int ix = 0; foreach (var fieldInfo in this.objectType.FieldInfos) { #>
                case <#=ix#>: return this.<#=fieldInfo.Key.GetFieldName(TargetLanguage.CSharp)#>!;
<# ++ix; } #>
                default: throw new Avro.AvroRuntimeException("Bad index " + fieldPos + " in Get()");
            };
        }

        public virtual void Put(int fieldPos, object fieldValue)
        {
            switch (fieldPos)
            {
<# ix = 0; foreach (var fieldInfo in this.objectType.FieldInfos) { #>
                case <#=ix#>: this.<#=fieldInfo.Key.GetFieldName(TargetLanguage.CSharp)#> = (<#=DotNetSchemaSupport.GetType(fieldInfo.Value.SchemaType)#><#=fieldInfo.Value.IsRequired ? "" : "?"#>)<#=fieldInfo.Value.SchemaType is ReferenceType refType && refType.IsEnum ? (fieldInfo.Value.IsRequired ? "(int)" : "(int?)") : ""#>fieldValue; break;
<# ++ix; } #>
                default: throw new Avro.AvroRuntimeException("Bad index " + fieldPos + " in Put()");
            };
        }
<# } else if (this.serFormat == SerializationFormat.Json && this.needsNullCheck) { #>
        void IJsonOnDeserialized.OnDeserialized()
        {
<# foreach (var fieldInfo in this.objectType.FieldInfos) { #>
<# if (fieldInfo.Value.IsRequired && DotNetSchemaSupport.IsNullable(fieldInfo.Value.SchemaType)) { #>
            if (<#=fieldInfo.Key.GetFieldName(TargetLanguage.CSharp)#> is null)
            {
                throw new ArgumentNullException("<#=fieldInfo.Key.AsGiven#> field cannot be null");
            }
<# } #>
<# } #>
        }

        void IJsonOnSerializing.OnSerializing()
        {
<# foreach (var fieldInfo in this.objectType.FieldInfos) { #>
<# if (fieldInfo.Value.IsRequired && DotNetSchemaSupport.IsNullable(fieldInfo.Value.SchemaType)) { #>
            if (<#=fieldInfo.Key.GetFieldName(TargetLanguage.CSharp)#> is null)
            {
                throw new ArgumentNullException("<#=fieldInfo.Key.AsGiven#> field cannot be null");
            }
<# } #>
<# } #>
        }
<# } #>
    }
}
<#+
    public string Exports() => this.serFormat switch
    {
        SerializationFormat.Avro => $" : {this.objectType.SchemaName.GetTypeName(TargetLanguage.CSharp, "base")}, ISpecificRecord",
        SerializationFormat.Json when this.needsNullCheck => " : IJsonOnDeserialized, IJsonOnSerializing",
        _ => "",
    };
#>
