<#@ template language="C#" linePragmas="false" #>
// Code generated by Azure.Iot.Operations.ProtocolCompiler; DO NOT EDIT.
package <#=this.genNamespace#>

import (
<# if ((this.generateServer && this.cmdNameReqResps.Any()) || (this.generateClient && this.separateTelemetries && this.telemNameSchemas.Any())) { #>
	"context"

<# } #>
	"github.com/Azure/iot-operations-sdks/go/protocol"
)

<# if (this.generateServer) { #>
<# if (this.cmdNameReqResps.Any()) { #>
type <#=this.serviceName#>CommandHandlers interface {
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>

	<#=this.AsUpper(cmdNameReqResp.Item1)#>(
		context.Context,
		*protocol.CommandRequest[<#=this.AsSchema(cmdNameReqResp.Item2)#>],
	) (*protocol.CommandResponse[<#=this.AsSchema(cmdNameReqResp.Item3)#>], error)
<# } #>
}

<# } #>
type <#=this.serviceName#>Service struct {
	protocol.Listeners
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
	*<#=this.AsUpper(cmdNameReqResp.Item1)#>CommandExecutor
<# } #>
<# foreach (var telemNameSchema in this.telemNameSchemas) { #>
	*<#=this.TelemComp(telemNameSchema)#>Sender
<# } #>
}

<# } #>
<# if (this.generateClient) { #>
<# if (this.separateTelemetries && this.telemNameSchemas.Any()) { #>
type <#=this.serviceName#>TelemetryHandlers interface {
<# foreach (var telemNameSchema in this.telemNameSchemas) { #>

	<#=this.TelemComp(telemNameSchema)#>(
		context.Context,
		*protocol.TelemetryMessage[<#=this.AsSchema(telemNameSchema.Item2)#>],
	) error
<# } #>
}

<# } #>
type <#=this.serviceName#>Client struct {
	protocol.Listeners
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
	*<#=this.AsUpper(cmdNameReqResp.Item1)#>CommandInvoker
<# } #>
<# foreach (var telemNameSchema in this.telemNameSchemas) { #>
	*<#=this.TelemComp(telemNameSchema)#>Receiver
<# } #>
}

<# } #>
const (
<# if (this.doesCommandTargetService || this.doesTelemetryTargetService) { #>
	ModelID = "<#=this.modelId#>"
<# } #>
<# if (this.commandTopic != null) { #>
	CommandTopic = "<#=this.commandTopic#>"
<# } #>
<# if (this.telemetryTopic != null) { #>
	TelemetryTopic = "<#=this.telemetryTopic#>"
<# } #>
)
<# if (this.generateServer) { #>

func New<#=this.serviceName#>Service(
	client protocol.MqttClient,
<# if (this.cmdNameReqResps.Any()) { #>
	commandHandlers <#=this.serviceName#>CommandHandlers,
<# } #>
	opts ...protocol.Option,
) (*<#=this.serviceName#>Service, error) {
	var err error

	serverOpts := []protocol.Option{
<# if (this.cmdServiceGroupId != null) { #>
		protocol.WithShareName("<#=this.cmdServiceGroupId#>"),
<# } #>
		protocol.WithTopicTokenNamespace("ex:"),
		protocol.WithTopicTokens{
<# if (this.doesCommandTargetService || this.doesTelemetryTargetService) { #>
			"modelId":    ModelID,
<# } #>
<# if (this.commandTopic != null) { #>
			"executorId": client.ID(),
<# } #>
<# if (this.telemetryTopic != null) { #>
			"senderId":   client.ID(),
<# } #>
		},
	}
<# if (this.cmdNameReqResps.Any()) { #>

	var executorOpts protocol.CommandExecutorOptions
	executorOpts.ApplyOptions(opts, serverOpts...)
<# } #>
<# if (this.telemNameSchemas.Any()) { #>

	var senderOpts protocol.TelemetrySenderOptions
	senderOpts.ApplyOptions(opts, serverOpts...)
<# } #>

	<#=this.AsLower(this.serviceName)#>Service := &<#=this.serviceName#>Service{}
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>

	<#=this.AsLower(this.serviceName)#>Service.<#=this.AsUpper(cmdNameReqResp.Item1)#>CommandExecutor, err = New<#=this.AsUpper(cmdNameReqResp.Item1)#>CommandExecutor(
		client,
		CommandTopic,
		commandHandlers.<#=this.AsUpper(cmdNameReqResp.Item1)#>,
		&executorOpts,
	)
	if err != nil {
		<#=this.AsLower(this.serviceName)#>Service.Close()
		return nil, err
	}
	<#=this.AsLower(this.serviceName)#>Service.Listeners = append(<#=this.AsLower(this.serviceName)#>Service.Listeners, <#=this.AsLower(this.serviceName)#>Service.<#=this.AsUpper(cmdNameReqResp.Item1)#>CommandExecutor)
<# } #>
<# foreach (var telemNameSchema in this.telemNameSchemas) { #>

	<#=this.AsLower(this.serviceName)#>Service.<#=this.TelemComp(telemNameSchema)#>Sender, err = New<#=this.TelemComp(telemNameSchema)#>Sender(
		client,
		TelemetryTopic,
		&senderOpts,
	)
	if err != nil {
		<#=this.AsLower(this.serviceName)#>Service.Close()
		return nil, err
	}
<# } #>

	return <#=this.AsLower(this.serviceName)#>Service, nil
}
<# } #>
<# if (this.generateClient) { #>

func New<#=this.serviceName#>Client(
	client protocol.MqttClient,
<# if (this.telemNameSchemas.Any()) { #>
<# if (this.separateTelemetries) { #>
	telemetryHandlers <#=this.serviceName#>TelemetryHandlers,
<# } else { #>
	telemetryHandler protocol.TelemetryHandler[<#=this.AsSchema(this.telemNameSchemas.First().Item2)#>],
<# } #>
<# } #>
	opts ...protocol.Option,
) (*<#=this.serviceName#>Client, error) {
	var err error

	clientOpts := []protocol.Option{
<# if (this.telemServiceGroupId != null) { #>
		protocol.WithShareName("<#=this.telemServiceGroupId#>"),
<# } #>
		protocol.WithTopicTokenNamespace("ex:"),
		protocol.WithTopicTokens{
<# if (this.doesCommandTargetService || this.doesTelemetryTargetService) { #>
			"modelId":    ModelID,
<# } #>
<# if (this.commandTopic != null) { #>
			"invokerClientId": client.ID(),
<# } #>
		},
	}
<# if (this.cmdNameReqResps.Any()) { #>

	var invokerOpts protocol.CommandInvokerOptions
	invokerOpts.ApplyOptions(opts, clientOpts...)
<# } #>
<# if (this.telemNameSchemas.Any()) { #>

	var receiverOpts protocol.TelemetryReceiverOptions
	receiverOpts.ApplyOptions(opts, clientOpts...)
<# } #>

	<#=this.AsLower(this.serviceName)#>Client := &<#=this.serviceName#>Client{}
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>

	<#=this.AsLower(this.serviceName)#>Client.<#=this.AsUpper(cmdNameReqResp.Item1)#>CommandInvoker, err = New<#=this.AsUpper(cmdNameReqResp.Item1)#>CommandInvoker(
		client,
		CommandTopic,
		&invokerOpts,
	)
	if err != nil {
		<#=this.AsLower(this.serviceName)#>Client.Close()
		return nil, err
	}
	<#=this.AsLower(this.serviceName)#>Client.Listeners = append(<#=this.AsLower(this.serviceName)#>Client.Listeners, <#=this.AsLower(this.serviceName)#>Client.<#=this.AsUpper(cmdNameReqResp.Item1)#>CommandInvoker)
<# } #>
<# foreach (var telemNameSchema in this.telemNameSchemas) { #>

	<#=this.AsLower(this.serviceName)#>Client.<#=this.TelemComp(telemNameSchema)#>Receiver, err = New<#=this.TelemComp(telemNameSchema)#>Receiver(
		client,
		TelemetryTopic,
<# if (this.separateTelemetries) { #>
		telemetryHandlers.<#=this.TelemComp(telemNameSchema)#>,
<# } else { #>
		telemetryHandler,
<# } #>
		&receiverOpts,
	)
	if err != nil {
		<#=this.AsLower(this.serviceName)#>Client.Close()
		return nil, err
	}
	<#=this.AsLower(this.serviceName)#>Client.Listeners = append(<#=this.AsLower(this.serviceName)#>Client.Listeners, <#=this.AsLower(this.serviceName)#>Client.<#=this.TelemComp(telemNameSchema)#>Receiver)
<# } #>

	return <#=this.AsLower(this.serviceName)#>Client, nil
}
<# } #>
<#+
    private string AsUpper(string name) => string.IsNullOrEmpty(name) ? name : char.ToUpperInvariant(name[0]) + name.Substring(1);

    private string AsLower(string name) => string.IsNullOrEmpty(name) ? name : char.ToLowerInvariant(name[0]) + name.Substring(1);

    private string AsSchema(string schema) => schema == null ? "any" : schema == "" ? "[]byte" : schema;

    private string TelemComp((string, string) telemNameSchema) => telemNameSchema.Item2 == "" ? $"{(telemNameSchema.Item1 != null ? AsUpper(telemNameSchema.Item1) : string.Empty)}Telemetry" : telemNameSchema.Item2;

    private string TelemItem((string, string) telemNameSchema) => AsLower(TelemComp(telemNameSchema));

    private string TelemName((string, string) telemNameSchema) => telemNameSchema.Item2 == "" ? AsUpper(telemNameSchema.Item1) ?? string.Empty : string.Empty;
#>
