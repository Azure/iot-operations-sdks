<#@ template language="C#" linePragmas="false" #>
// Code generated by Azure.Iot.Operations.ProtocolCompiler v<#=System.Reflection.Assembly.GetExecutingAssembly().GetName().Version#>; DO NOT EDIT.
package <#=this.genNamespace.GetFolderName(TargetLanguage.Go)#>

import (
<# if ((this.generateServer && this.cmdNameReqResps.Any()) || (this.generateClient && this.separateTelemetries && this.telemNameSchemas.Any())) { #>
	"context"

<# } #>
	"github.com/Azure/iot-operations-sdks/go/protocol"
)

<# if (this.generateServer) { #>
<# if (this.cmdNameReqResps.Any()) { #>
type <#=this.serviceName.GetTypeName(TargetLanguage.Go, "command", "handlers")#> interface {
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>

	<#=cmdNameReqResp.Item1.GetMethodName(TargetLanguage.Go)#>(
		context.Context,
		*protocol.CommandRequest[<#=this.AsSchema(cmdNameReqResp.Item2)#>],
	) (*protocol.CommandResponse[<#=this.AsSchema(cmdNameReqResp.Item3)#>], error)
<# } #>
}

<# } #>
type <#=this.serviceName.GetTypeName(TargetLanguage.Go, "service")#> struct {
	protocol.Listeners
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
	*<#=cmdNameReqResp.Item1.GetTypeName(TargetLanguage.Go, "command", "executor")#>
<# } #>
<# foreach (var telemNameSchema in this.telemNameSchemas) { #>
	*<#=telemNameSchema.Item1.GetTypeName(TargetLanguage.Go, "telemetry", "sender")#>
<# } #>
}

<# } #>
<# if (this.generateClient) { #>
<# if (this.separateTelemetries && this.telemNameSchemas.Any()) { #>
type <#=this.serviceName.GetTypeName(TargetLanguage.Go, "telemetry", "handlers")#> interface {
<# foreach (var telemNameSchema in this.telemNameSchemas) { #>

	<#=telemNameSchema.Item1.GetMethodName(TargetLanguage.Go)#>(
		context.Context,
		*protocol.TelemetryMessage[<#=this.AsSchema(telemNameSchema.Item2)#>],
	) error
<# } #>
}

<# } #>
type <#=this.serviceName.GetTypeName(TargetLanguage.Go, "client")#> struct {
	protocol.Listeners
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
	*<#=cmdNameReqResp.Item1.GetTypeName(TargetLanguage.Go, "command", "invoker")#>
<# } #>
<# foreach (var telemNameSchema in this.telemNameSchemas) { #>
	*<#=telemNameSchema.Item1.GetTypeName(TargetLanguage.Go, "telemetry", "receiver")#>
<# } #>
}

<# } #>
const (
<# if (this.doesCommandTargetService || this.doesTelemetryTargetService) { #>
	ModelID = "<#=this.modelId#>"
<# } #>
<# if (this.commandTopic != null) { #>
	CommandTopic = "<#=this.commandTopic#>"
<# } #>
<# if (this.telemetryTopic != null) { #>
	TelemetryTopic = "<#=this.telemetryTopic#>"
<# } #>
)
<# if (this.generateServer) { #>

func <#=this.serviceName.GetMethodName(TargetLanguage.Go, "service", prefix: "new")#>(
	app *protocol.Application,
	client protocol.MqttClient,
<# if (this.cmdNameReqResps.Any()) { #>
	commandHandlers <#=this.serviceName.GetTypeName(TargetLanguage.Go, "command", "handlers")#>,
<# } #>
	opts ...protocol.Option,
) (*<#=this.serviceName.GetTypeName(TargetLanguage.Go, "service")#>, error) {
	var err error

	serverOpts := []protocol.Option{
<# if (this.cmdServiceGroupId != null) { #>
		protocol.WithShareName("<#=this.cmdServiceGroupId#>"),
<# } #>
		protocol.WithTopicTokenNamespace("ex:"),
		protocol.WithTopicTokens{
<# if (this.doesCommandTargetService || this.doesTelemetryTargetService) { #>
			"modelId":    ModelID,
<# } #>
<# if (this.commandTopic != null) { #>
			"executorId": client.ID(),
<# } #>
<# if (this.telemetryTopic != null) { #>
			"senderId":   client.ID(),
<# } #>
		},
	}
<# if (this.cmdNameReqResps.Any()) { #>

	var executorOpts protocol.CommandExecutorOptions
	executorOpts.ApplyOptions(opts, serverOpts...)
<# } #>
<# if (this.telemNameSchemas.Any()) { #>

	var senderOpts protocol.TelemetrySenderOptions
	senderOpts.ApplyOptions(opts, serverOpts...)
<# } #>

	<#=this.serviceName.GetVariableName(TargetLanguage.Go, "service")#> := &<#=this.serviceName.GetTypeName(TargetLanguage.Go, "service")#>{}
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>

	<#=this.serviceName.GetVariableName(TargetLanguage.Go, "service")#>.<#=cmdNameReqResp.Item1.GetTypeName(TargetLanguage.Go, "command", "executor")#>, err = <#=cmdNameReqResp.Item1.GetMethodName(TargetLanguage.Go, "command", "executor", prefix: "new")#>(
		app,
		client,
		CommandTopic,
		commandHandlers.<#=cmdNameReqResp.Item1.GetMethodName(TargetLanguage.Go)#>,
		&executorOpts,
	)
	if err != nil {
		<#=this.serviceName.GetVariableName(TargetLanguage.Go, "service")#>.Close()
		return nil, err
	}
	<#=this.serviceName.GetVariableName(TargetLanguage.Go, "service")#>.Listeners = append(<#=this.serviceName.GetVariableName(TargetLanguage.Go, "service")#>.Listeners, <#=this.serviceName.GetVariableName(TargetLanguage.Go, "service")#>.<#=cmdNameReqResp.Item1.GetTypeName(TargetLanguage.Go, "command", "executor")#>)
<# } #>
<# foreach (var telemNameSchema in this.telemNameSchemas) { #>

	<#=this.serviceName.GetVariableName(TargetLanguage.Go, "service")#>.<#=telemNameSchema.Item1.GetTypeName(TargetLanguage.Go, "telemetry", "sender")#>, err = <#=telemNameSchema.Item1.GetMethodName(TargetLanguage.Go, "telemetry", "sender", prefix: "new")#>(
		app,
		client,
		TelemetryTopic,
		&senderOpts,
	)
	if err != nil {
		<#=this.serviceName.GetVariableName(TargetLanguage.Go, "service")#>.Close()
		return nil, err
	}
<# } #>

	return <#=this.serviceName.GetVariableName(TargetLanguage.Go, "service")#>, nil
}
<# } #>
<# if (this.generateClient) { #>

func <#=this.serviceName.GetMethodName(TargetLanguage.Go, "client", prefix: "new")#>(
	app *protocol.Application,
	client protocol.MqttClient,
<# if (this.telemNameSchemas.Any()) { #>
<# if (this.separateTelemetries) { #>
	telemetryHandlers <#=this.serviceName.GetTypeName(TargetLanguage.Go, "telemetry", "handlers")#>,
<# } else { #>
	telemetryHandler protocol.TelemetryHandler[<#=this.AsSchema(this.telemNameSchemas.First().Item2)#>],
<# } #>
<# } #>
	opts ...protocol.Option,
) (*<#=this.serviceName.GetTypeName(TargetLanguage.Go, "client")#>, error) {
	var err error

	clientOpts := []protocol.Option{
<# if (this.telemServiceGroupId != null) { #>
		protocol.WithShareName("<#=this.telemServiceGroupId#>"),
<# } #>
		protocol.WithTopicTokenNamespace("ex:"),
		protocol.WithTopicTokens{
<# if (this.doesCommandTargetService || this.doesTelemetryTargetService) { #>
			"modelId":    ModelID,
<# } #>
<# if (this.commandTopic != null) { #>
			"invokerClientId": client.ID(),
<# } #>
		},
	}
<# if (this.cmdNameReqResps.Any()) { #>

	var invokerOpts protocol.CommandInvokerOptions
	invokerOpts.ApplyOptions(opts, clientOpts...)
<# } #>
<# if (this.telemNameSchemas.Any()) { #>

	var receiverOpts protocol.TelemetryReceiverOptions
	receiverOpts.ApplyOptions(opts, clientOpts...)
<# } #>

	<#=this.serviceName.GetVariableName(TargetLanguage.Go, "client")#> := &<#=this.serviceName.GetTypeName(TargetLanguage.Go, "client")#>{}
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>

	<#=this.serviceName.GetVariableName(TargetLanguage.Go, "client")#>.<#=cmdNameReqResp.Item1.GetTypeName(TargetLanguage.Go, "command", "invoker")#>, err = <#=cmdNameReqResp.Item1.GetMethodName(TargetLanguage.Go, "command", "invoker", prefix: "new")#>(
		app,
		client,
		CommandTopic,
		&invokerOpts,
	)
	if err != nil {
		<#=this.serviceName.GetVariableName(TargetLanguage.Go, "client")#>.Close()
		return nil, err
	}
	<#=this.serviceName.GetVariableName(TargetLanguage.Go, "client")#>.Listeners = append(<#=this.serviceName.GetVariableName(TargetLanguage.Go, "client")#>.Listeners, <#=this.serviceName.GetVariableName(TargetLanguage.Go, "client")#>.<#=cmdNameReqResp.Item1.GetTypeName(TargetLanguage.Go, "command", "invoker")#>)
<# } #>
<# foreach (var telemNameSchema in this.telemNameSchemas) { #>

	<#=this.serviceName.GetVariableName(TargetLanguage.Go, "client")#>.<#=telemNameSchema.Item1.GetTypeName(TargetLanguage.Go, "telemetry", "receiver")#>, err = <#=telemNameSchema.Item1.GetMethodName(TargetLanguage.Go, "telemetry", "receiver", prefix: "new")#>(
		app,
		client,
		TelemetryTopic,
<# if (this.separateTelemetries) { #>
		telemetryHandlers.<#=telemNameSchema.Item1.GetMethodName(TargetLanguage.Go)#>,
<# } else { #>
		telemetryHandler,
<# } #>
		&receiverOpts,
	)
	if err != nil {
		<#=this.serviceName.GetVariableName(TargetLanguage.Go, "client")#>.Close()
		return nil, err
	}
	<#=this.serviceName.GetVariableName(TargetLanguage.Go, "client")#>.Listeners = append(<#=this.serviceName.GetVariableName(TargetLanguage.Go, "client")#>.Listeners, <#=this.serviceName.GetVariableName(TargetLanguage.Go, "client")#>.<#=telemNameSchema.Item1.GetTypeName(TargetLanguage.Go, "telemetry", "receiver")#>)
<# } #>

	return <#=this.serviceName.GetVariableName(TargetLanguage.Go, "client")#>, nil
}
<# } #>
<#+
	    private string AsSchema(ITypeName schema) => schema?.GetTypeName(TargetLanguage.Go) ?? "any";
#>
