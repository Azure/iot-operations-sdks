<#@ template language="C#" linePragmas="false" #>
// Code generated by Azure.Iot.Operations.ProtocolCompiler v<#=System.Reflection.Assembly.GetExecutingAssembly().GetName().Version#>; DO NOT EDIT.
package <#=this.genNamespace#>

import (
	"context"

	"github.com/Azure/iot-operations-sdks/go/protocol"
)

type <#=this.componentName#>Sender struct {
	*protocol.TelemetrySender[<#=this.AsSchema(this.schemaClassName)#>]
}

func New<#=this.componentName#>Sender(
	client protocol.MqttClient,
	topic string,
	opt ...protocol.TelemetrySenderOption,
) (*<#=this.componentName#>Sender, error) {
	var err error
	sender := &<#=this.componentName#>Sender{}

	var opts protocol.TelemetrySenderOptions
	opts.Apply(
		opt,
<# if (this.telemetryName != null) { #>
		protocol.WithTopicTokens{
			"telemetryName":     "<#=this.telemetryName#>",
		},
<# } #>
	)

	sender.TelemetrySender, err = protocol.NewTelemetrySender(
		client,
		protocol.<#=this.GetSerializer(this.schemaClassName)#>{},
		topic,
		&opts,
	)

	return sender, err
}

func (sender <#=this.componentName#>Sender) Send<#=this.componentName#>(
	ctx context.Context,
	telemetry <#=this.AsSchema(this.schemaClassName)#>,
	opt ...protocol.SendOption,
) error {
	return sender.Send(ctx, telemetry, opt...)
}
<#+
    private string AsSchema(string schema) => schema == null ? "any" : schema == "" ? "[]byte" : schema;

    private string GetSerializer(string schema) => schema == null ? "Empty" : schema == "" ? "Raw" : $"{this.serializerSubNamespace}[{schema}]";
#>
