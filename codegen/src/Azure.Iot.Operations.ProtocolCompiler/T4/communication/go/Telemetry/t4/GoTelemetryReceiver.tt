<#@ template language="C#" linePragmas="false" #>
// Code generated by Azure.Iot.Operations.ProtocolCompiler v<#=System.Reflection.Assembly.GetExecutingAssembly().GetName().Version#>; DO NOT EDIT.
package <#=this.genNamespace.GetFolderName(TargetLanguage.Go)#>

import (
	"github.com/Azure/iot-operations-sdks/go/protocol"
)

type <#=this.componentName.GetTypeName(TargetLanguage.Go)#> struct {
	*protocol.TelemetryReceiver[<#=this.schemaType.GetTypeName(TargetLanguage.Go)#>]
}

func New<#=this.componentName.GetTypeName(TargetLanguage.Go)#>(
	app *protocol.Application,
	client protocol.MqttClient,
	topic string,
	handler protocol.TelemetryHandler[<#=this.schemaType.GetTypeName(TargetLanguage.Go)#>],
	opt ...protocol.TelemetryReceiverOption,
) (*<#=this.componentName.GetTypeName(TargetLanguage.Go)#>, error) {
	var err error
	receiver := &<#=this.componentName.GetTypeName(TargetLanguage.Go)#>{}

	var opts protocol.TelemetryReceiverOptions
	opts.Apply(
		opt,
<# if (!this.telemetryName.IsEmpty) { #>
		protocol.WithTopicTokens{
			"telemetryName":     "<#=this.telemetryName.AsGiven#>",
		},
<# } #>
	)

	receiver.TelemetryReceiver, err = protocol.NewTelemetryReceiver(
		app,
		client,
		protocol.<#=this.GetSerializer(this.schemaType)#>{},
		topic,
		handler,
		&opts,
	)

	return receiver, err
}
<#+
    private string GetSerializer(ITypeName schema) => schema is RawTypeName ? "Raw" : $"{this.serializerSubNamespace}[{schema.GetTypeName(TargetLanguage.Go)}]";
#>
