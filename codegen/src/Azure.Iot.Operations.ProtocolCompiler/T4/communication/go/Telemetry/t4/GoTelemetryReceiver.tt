<#@ template language="C#" linePragmas="false" #>
// Code generated by Azure.Iot.Operations.ProtocolCompiler v<#=System.Reflection.Assembly.GetExecutingAssembly().GetName().Version#>; DO NOT EDIT.
package <#=this.genNamespace#>

import (
	"github.com/Azure/iot-operations-sdks/go/protocol"
)

type <#=this.componentName#>Receiver struct {
	*protocol.TelemetryReceiver[<#=this.AsSchema(this.schemaClassName)#>]
}

func New<#=this.componentName#>Receiver(
	app *protocol.Application,
	client protocol.MqttClient,
	topic string,
	handler protocol.TelemetryHandler[<#=this.AsSchema(this.schemaClassName)#>],
	opt ...protocol.TelemetryReceiverOption,
) (*<#=this.componentName#>Receiver, error) {
	var err error
	receiver := &<#=this.componentName#>Receiver{}

	var opts protocol.TelemetryReceiverOptions
	opts.Apply(
		opt,
<# if (this.telemetryName != null) { #>
		protocol.WithTopicTokens{
			"telemetryName":     "<#=this.telemetryName#>",
		},
<# } #>
	)

	receiver.TelemetryReceiver, err = protocol.NewTelemetryReceiver(
		app,
		client,
		protocol.<#=this.GetSerializer(this.schemaClassName)#>{},
		topic,
		handler,
		&opts,
	)

	return receiver, err
}
<#+
    private string AsSchema(string schema) => schema == null ? "any" : schema == "" ? "[]byte" : schema;

    private string GetSerializer(string schema) => schema == null ? "Empty" : schema == "" ? "Raw" : $"{this.serializerSubNamespace}[{schema}]";
#>
