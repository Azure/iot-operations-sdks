//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Azure.Iot.Operations.ProtocolCompiler {
    using System;
    
    
    public partial class GoCommandInvoker : GoCommandInvokerBase {
        

    private string AsSchema(string schema) => schema == null ? "any" : schema == "" ? "[]byte" : schema;

    private string GetSerializer(string schema) => schema == null ? "Empty" : schema == "" ? "Raw" : $"{this.serializerSubNamespace}[{schema}]";

        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            this.Write("// Code generated by Azure.Iot.Operations.ProtocolCompiler; DO NOT EDIT.\r\npackage" +
                    " ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.genNamespace));
            this.Write("\r\n\r\nimport (\r\n\t\"context\"\r\n\r\n\t\"github.com/Azure/iot-operations-sdks/go/protocol\"\r\n" +
                    ")\r\n\r\ntype ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.capitalizedCommandName));
            this.Write("CommandInvoker struct {\r\n\t*protocol.CommandInvoker[");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsSchema(this.reqSchema)));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsSchema(this.respSchema)));
            this.Write("]\r\n}\r\n\r\nfunc New");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.capitalizedCommandName));
            this.Write("CommandInvoker(\r\n\tclient protocol.MqttClient,\r\n\trequestTopic string,\r\n\topt ...pro" +
                    "tocol.CommandInvokerOption,\r\n) (*");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.capitalizedCommandName));
            this.Write("CommandInvoker, error) {\r\n\tvar err error\r\n\tinvoker := &");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.capitalizedCommandName));
            this.Write("CommandInvoker{}\r\n\r\n\tvar opts protocol.CommandInvokerOptions\r\n\topts.Apply(\r\n\t\topt" +
                    ",\r\n\t\tprotocol.WithTopicTokenNamespace(\"ex:\"),\r\n\t\tprotocol.WithTopicTokens{\r\n\t\t\t\"" +
                    "commandName\":     \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.commandName));
            this.Write("\",\r\n\t\t\t\"invokerClientId\": client.ClientID(),\r\n\t\t},\r\n\t)\r\n\r\n\tinvoker.CommandInvoker" +
                    ", err = protocol.NewCommandInvoker(\r\n\t\tclient,\r\n\t\tprotocol.");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetSerializer(this.reqSchema)));
            this.Write("{},\r\n\t\tprotocol.");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetSerializer(this.respSchema)));
            this.Write("{},\r\n\t\trequestTopic,\r\n\t\t&opts,\r\n\t)\r\n\r\n\treturn invoker, err\r\n}\r\n\r\nfunc (invoker ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.capitalizedCommandName));
            this.Write("CommandInvoker) ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.capitalizedCommandName));
            this.Write("(\r\n\tctx context.Context,\r\n");
 if (this.doesCommandTargetExecutor) { 
            this.Write("\texecutorId string,\r\n");
 } 
 if (this.reqSchema != null) { 
            this.Write("\trequest ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsSchema(this.reqSchema)));
            this.Write(",\r\n");
 } 
            this.Write("\topt ...protocol.InvokeOption,\r\n");
 if (this.respSchema != null) { 
            this.Write(") (*protocol.CommandResponse[");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsSchema(this.respSchema)));
            this.Write("], error) {\r\n");
 } else { 
            this.Write(") error {\r\n");
 } 
 if (this.doesCommandTargetExecutor) { 
            this.Write("\tvar opts protocol.InvokeOptions\r\n\topts.Apply(\r\n\t\topt,\r\n\t\tprotocol.WithTopicToken" +
                    "s{\r\n\t\t\t\"executorId\": executorId,\r\n\t\t},\r\n\t)\r\n\r\n");
 } 
            this.Write("\t");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.respSchema != null ? "response" : "_"));
            this.Write(", err := invoker.Invoke(\r\n\t\tctx,\r\n\t\t");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.reqSchema != null ? "request" : "nil"));
            this.Write(",\r\n");
 if (this.doesCommandTargetExecutor) { 
            this.Write("\t\t&opts,\r\n");
 } else { 
            this.Write("\t\topt...,\r\n");
 } 
            this.Write("\t)\r\n\r\n\treturn ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.respSchema != null ? "response, " : ""));
            this.Write("err\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class GoCommandInvokerBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
