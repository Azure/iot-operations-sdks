<#@ template language="C#" linePragmas="false" #>
// Code generated by Azure.Iot.Operations.ProtocolCompiler v<#=System.Reflection.Assembly.GetExecutingAssembly().GetName().Version#>; DO NOT EDIT.
package <#=this.genNamespace#>

import (
	"github.com/Azure/iot-operations-sdks/go/protocol"
)

type <#=this.capitalizedCommandName#>CommandExecutor struct {
	*protocol.CommandExecutor[<#=this.AsSchema(this.reqSchema)#>, <#=this.AsSchema(this.respSchema)#>]
}

func New<#=this.capitalizedCommandName#>CommandExecutor(
	app *protocol.Application,
	client protocol.MqttClient,
	requestTopic string,
	handler protocol.CommandHandler[<#=this.AsSchema(this.reqSchema)#>, <#=this.AsSchema(this.respSchema)#>],
	opt ...protocol.CommandExecutorOption,
) (*<#=this.capitalizedCommandName#>CommandExecutor, error) {
	var err error
	executor := &<#=this.capitalizedCommandName#>CommandExecutor{}

	var opts protocol.CommandExecutorOptions
	opts.Apply(
		opt,
		protocol.WithTopicTokens{
			"commandName": "<#=this.commandName#>",
		},
		protocol.WithIdempotent(<#=this.isIdempotent ? "true" : "false"#>),
	)

	executor.CommandExecutor, err = protocol.NewCommandExecutor(
		app,
		client,
		protocol.<#=GetSerializer(this.reqSchema)#>{},
		protocol.<#=GetSerializer(this.respSchema)#>{},
		requestTopic,
		handler,
		&opts,
	)

	return executor, err
}
<#+
    private string AsSchema(string schema) => schema == null ? "any" : schema == "" ? "[]byte" : schema;

    private string GetSerializer(string schema) => schema == null ? "Empty" : schema == "" ? "Raw" : $"{this.serializerSubNamespace}[{schema}]";
#>
