<#@ template language="C#" linePragmas="false" #>
// Code generated by Azure.Iot.Operations.ProtocolCompiler v<#=System.Reflection.Assembly.GetExecutingAssembly().GetName().Version#>; DO NOT EDIT.
package <#=this.genNamespace.GetFolderName(TargetLanguage.Go)#>

import (
	"github.com/Azure/iot-operations-sdks/go/protocol"
)

type <#=this.commandName.GetTypeName(TargetLanguage.Go, "command", "executor")#> struct {
	*protocol.CommandExecutor[<#=this.AsSchema(this.reqSchema)#>, <#=this.AsSchema(this.respSchema)#>]
}

func <#=this.commandName.GetMethodName(TargetLanguage.Go, "command", "executor", prefix: "new")#>(
	app *protocol.Application,
	client protocol.MqttClient,
	requestTopic string,
	handler protocol.CommandHandler[<#=this.AsSchema(this.reqSchema)#>, <#=this.AsSchema(this.respSchema)#>],
	opt ...protocol.CommandExecutorOption,
) (*<#=this.commandName.GetTypeName(TargetLanguage.Go, "command", "executor")#>, error) {
	var err error
	executor := &<#=this.commandName.GetTypeName(TargetLanguage.Go, "command", "executor")#>{}

	var opts protocol.CommandExecutorOptions
	opts.Apply(
		opt,
		protocol.WithTopicTokens{
			"commandName": "<#=this.commandName.AsGiven#>",
		},
		protocol.WithIdempotent(<#=this.isIdempotent ? "true" : "false"#>),
	)

	executor.CommandExecutor, err = protocol.NewCommandExecutor(
		app,
		client,
		protocol.<#=GetSerializer(this.reqSchema)#>{},
		protocol.<#=GetSerializer(this.respSchema)#>{},
		requestTopic,
		handler,
		&opts,
	)

	return executor, err
}
<#+
    private string AsSchema(ITypeName schema) => schema == null ? "any" : schema.GetTypeName(TargetLanguage.Go);

    private string GetSerializer(ITypeName schema) => schema == null ? "Empty" : schema is RawTypeName ? "Raw" : $"{this.serializerSubNamespace}[{schema.GetTypeName(TargetLanguage.Go)}]";
#>
