// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Azure.Iot.Operations.ProtocolCompiler
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class PythonService : PythonServiceBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("# Code generated by Azure.Iot.Operations.ProtocolCompiler; DO NOT EDIT.\r\n\r\nfrom a" +
                    "bc import ABC, abstractmethod\r\n\r\nfrom communication.CommunicationOptions import " +
                    "CommunicationOptions\r\nfrom communication.model_id import model_id\r\n");
 if (this.commandTopic != null) { 
            this.Write("from communication.command_topic import command_topic\r\n");
 } 
 if (this.telemetryTopic != null) { 
            this.Write("from communication.telemetry_topic import telemetry_topic\r\n");
 } 
 if (this.commandTopic != null && !this.doesCommandTargetExecutor) { 
            this.Write("from communication.service_group_id import service_group_id\r\n");
 } 
            this.Write("\r\n");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("from ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(cmdNameReqResp.Item1)));
            this.Write("CommandExecutor_g import ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(cmdNameReqResp.Item1)));
            this.Write("CommandExecutor\r\nfrom ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(cmdNameReqResp.Item1)));
            this.Write("CommandInvoker_g import ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(cmdNameReqResp.Item1)));
            this.Write("CommandInvoker\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("from ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(telemSchema)));
            this.Write("Sender_g import ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(telemSchema)));
            this.Write("Sender\r\nfrom ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(telemSchema)));
            this.Write("Receiver_g import ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(telemSchema)));
            this.Write("Receiver\r\n");
 } 
            this.Write("\r\n@model_id(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.modelId));
            this.Write("\")\r\n");
 if (this.commandTopic != null) { 
            this.Write("@command_topic(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.commandTopic));
            this.Write("\")\r\n");
 } 
 if (this.telemetryTopic != null) { 
            this.Write("@telemetry_topic(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.telemetryTopic));
            this.Write("\")\r\n");
 } 
 if (this.serviceGroupId != null) { 
            this.Write("@service_group_id(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.serviceGroupId));
            this.Write("\")\r\n");
 } 
            this.Write("\r\nclass ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.serviceName));
            this.Write("(object):\r\n    \"\"\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.serviceName));
            this.Write("\"\"\"\r\n    def __init__(self):\r\n        self.Service.get_model_id = self.get_model_" +
                    "id\r\n        self.Client.get_model_id = self.get_model_id\r\n");
 if (this.commandTopic != null) { 
            this.Write("        self.Service.get_command_topic = self.get_command_topic\r\n        self.Cli" +
                    "ent.get_command_topic = self.get_command_topic\r\n");
 } 
 if (this.telemetryTopic != null) { 
            this.Write("        self.Service.get_telemetry_topic = self.get_telemetry_topic\r\n        self" +
                    ".Client.get_telemetry_topic = self.get_telemetry_topic\r\n");
 } 
 if (this.commandTopic != null && !this.doesCommandTargetExecutor) { 
            this.Write("        self.Service.get_service_group_id = self.get_service_group_id\r\n");
 } 
            this.Write("\r\n    class Service(");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.cmdNameReqResps.Any() ? "ABC" : "object"));
            this.Write("):\r\n        \"\"\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.serviceName));
            this.Write(" service\"\"\"\r\n        def __init__(self, mqtt_client):\r\n            self._custom_t" +
                    "opic_token_map = {}\r\n\r\n");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("            self.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("_command_executor = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(cmdNameReqResp.Item1)));
            this.Write("CommandExecutor(mqtt_client, self.get_command_topic()");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.CmdModelIdProp()));
            this.Write(", custom_topic_token_map = self.custom_topic_token_map)\r\n            self.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("_command_executor.on_command_received = self.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("            self.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(telemSchema)));
            this.Write("_sender = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(telemSchema)));
            this.Write("Sender(mqtt_client, self.get_telemetry_topic()");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TelemModelIdProp()));
            this.Write(", custom_topic_token_map = self.custom_topic_token_map)\r\n");
 } 
            this.Write("\r\n");
 if (this.commandTopic != null && !this.doesCommandTargetExecutor) { 
            this.Write("            self.communication_options = CommunicationOptions(shared_subscription" +
                    "_id = self.get_service_group_id())\r\n");
 } else { 
            this.Write("            self.communication_options = CommunicationOptions()\r\n");
 } 
            this.Write(@"
        @property
        def custom_topic_token_map(self):
            return self._custom_topic_token_map

        @property
        def communication_options(self):
            return self._communication_options

        @communication_options.setter
        def communication_options(self, value):
            self._communication_options = value
");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("            self.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("_command_executor.communication_options = value\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("            self.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(telemSchema)));
            this.Write("_sender.communication_options = value\r\n");
 } 
            this.Write("\r\n        def set_topic_namespace(self, value):\r\n");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("            self.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("_command_executor.topic_namespace = value\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("            self.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(telemSchema)));
            this.Write("_sender.topic_namespace = value\r\n");
 } 
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("\r\n        @abstractmethod\r\n        async def ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("(self");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ReqParam(cmdNameReqResp)));
            this.Write("):\r\n            pass\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("\r\n        async def send_");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(telemSchema)));
            this.Write("(self, telemetry):\r\n            await self.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(telemSchema)));
            this.Write("_sender.send_telemetry(telemetry)\r\n");
 } 
 if (this.cmdNameReqResps.Any()) { 
            this.Write("\r\n        async def start(self):\r\n");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("            await self.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("_command_executor.start()\r\n");
 } 
 } 
            this.Write("\r\n    class Client(");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.telemSchemas.Any() ? "ABC" : "object"));
            this.Write("):\r\n        \"\"\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.serviceName));
            this.Write(" client\"\"\"\r\n        def __init__(self, mqtt_client):\r\n            self._custom_to" +
                    "pic_token_map = {}\r\n\r\n");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("            self.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("_command_invoker = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(cmdNameReqResp.Item1)));
            this.Write("CommandInvoker(mqtt_client, self.get_command_topic()");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.CmdModelIdProp()));
            this.Write(", custom_topic_token_map = self.custom_topic_token_map)\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("            self.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(telemSchema)));
            this.Write("_receiver = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(telemSchema)));
            this.Write("Receiver(mqtt_client, self.get_telemetry_topic()");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TelemModelIdProp()));
            this.Write(", custom_topic_token_map = self.custom_topic_token_map)\r\n            self.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(telemSchema)));
            this.Write("_receiver.on_telemetry_received = self.receive_");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(telemSchema)));
            this.Write("\r\n");
 } 
            this.Write(@"
            self.communication_options = CommunicationOptions()

        @property
        def custom_topic_token_map(self):
            return self._custom_topic_token_map

        @property
        def communication_options(self):
            return self._communication_options

        @communication_options.setter
        def communication_options(self, value):
            self._communication_options = value
");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("            self.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("_command_invoker.communication_options = value\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("            self.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(telemSchema)));
            this.Write("_receiver.communication_options = value\r\n");
 } 
            this.Write("\r\n        def set_topic_namespace(self, value):\r\n");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("            self.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("_command_invoker.topic_namespace = value\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("            self.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(telemSchema)));
            this.Write("_receiver.topic_namespace = value\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("\r\n        @abstractmethod\r\n        def receive_");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(telemSchema)));
            this.Write("(self, sender_id, telemetry):\r\n            pass\r\n");
 } 
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("\r\n        async def ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("(self");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ExecParam()));
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ReqParam(cmdNameReqResp)));
            this.Write(", timeout):\r\n            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.OptRet(cmdNameReqResp)));
            this.Write("await self.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("_command_invoker.invoke_command(");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ExecArg()));
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ReqArg(cmdNameReqResp)));
            this.Write("timeout)\r\n");
 } 
 if (this.telemSchemas.Any()) { 
            this.Write("\r\n        async def start(self):\r\n");
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("            await self.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(telemSchema)));
            this.Write("_receiver.start()\r\n");
 } 
 } 
            return this.GenerationEnvironment.ToString();
        }

    private string OptRet((string, string, string) cmdNameReqResp) => cmdNameReqResp.Item3 != "None" ? "return " : "";

    private string ReqParam((string, string, string) cmdNameReqResp) => cmdNameReqResp.Item2 != "None" ? ", request" : "";

    private string ReqArg((string, string, string) cmdNameReqResp) => cmdNameReqResp.Item2 != "None" ? "request, " : "";

    private string ExecParam() => this.doesCommandTargetExecutor ? ", executor_id" : "";

    private string ExecArg() => this.doesCommandTargetExecutor ? "executor_id, " : "\"\", ";

    private string CmdModelIdProp() => this.doesCommandTargetService ? ", model_id = self.get_model_id()" : "";

    private string TelemModelIdProp() => this.doesTelemetryTargetService ? ", model_id = self.get_model_id()" : "";

    private string AsUpper(string name) => char.ToUpperInvariant(name[0]) + name.Substring(1);

    private string AsLower(string name) => char.ToLowerInvariant(name[0]) + name.Substring(1);

    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class PythonServiceBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
