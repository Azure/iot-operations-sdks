<#@ template language="C#" linePragmas="false" #>
/* Code generated by Azure.Iot.Operations.ProtocolCompiler v<#=System.Reflection.Assembly.GetExecutingAssembly().GetName().Version#>; DO NOT EDIT. */
<#
string codeName = this.errorCodeName.GetVariableName(TargetLanguage.CSharp);
string codeSchema = this.errorCodeSchema.GetTypeName(TargetLanguage.CSharp);
string infoName = this.errorInfoName?.GetVariableName(TargetLanguage.CSharp) ?? "errorPayload";
string infoSchema = this.errorInfoSchema?.GetTypeName(TargetLanguage.CSharp) ?? "string";
#>

#nullable enable

namespace <#=this.projectName#>.<#=this.genNamespace.GetTypeName(TargetLanguage.CSharp)#>
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Text;
    using System.Text.Json;
    using Azure.Iot.Operations.Protocol.RPC;
<# if (this.addlNamespace != null) { #>
    using <#=this.projectName#>.<#=this.addlNamespace.GetTypeName(TargetLanguage.CSharp)#>;
<# } #>

    public static class <#=this.respSchema.GetTypeName(TargetLanguage.CSharp, "extensions")#>
    {
<# if (this.generateServer) { #>
        public static ExtendedResponse<<#=this.respSchema.GetTypeName(TargetLanguage.CSharp)#>> WithApplicationError(this ExtendedResponse<<#=this.respSchema.GetTypeName(TargetLanguage.CSharp)#>> extResp, <#=codeSchema#> <#=codeName#>, <#=infoSchema#>? <#=infoName#> = null)
        {
            string errorCode = <#=codeName#> switch
            {
<# foreach (KeyValuePair<CodeName, string> kvp in this.errorCodeEnumeration) { #>
                <#=codeSchema#>.<#=kvp.Key.GetTypeName(TargetLanguage.CSharp)#> => "<#=kvp.Value#>",
<# } #>
                _ => throw new InvalidOperationException($"Unable to map <#=codeSchema#>({<#=codeName#>}) to a valid string value"),
            };

            return extResp.WithApplicationError(errorCode, <#=this.errorInfoSchema != null ? $"{infoName} != null ? Encoding.UTF8.GetString(JsonSerializer.SerializeToUtf8Bytes({infoName})) : null" : infoName#>);
        }
<# } #>
<# if (this.generateClient && this.generateServer) { #>

<# } #>
<# if (this.generateClient) { #>
        public static bool TryGetApplicationError(this ExtendedResponse<<#=this.respSchema.GetTypeName(TargetLanguage.CSharp)#>> extResp, [NotNullWhen(true)] out <#=codeSchema#>? <#=codeName#>, out <#=infoSchema#>? <#=infoName#>)
        {
            if (!extResp.TryGetApplicationError(out string? errorCode, out <#=this.errorInfoSchema != null ? "string? " : ""#>errorPayload))
            {
                <#=codeName#> = null;
                <#=infoName#> = null;
                return false;
            }

            <#=codeName#> = errorCode switch
            {
<# foreach (KeyValuePair<CodeName, string> kvp in this.errorCodeEnumeration) { #>
                "<#=kvp.Value#>" => <#=codeSchema#>.<#=kvp.Key.GetTypeName(TargetLanguage.CSharp)#>,
<# } #>
                _ => throw new InvalidOperationException($"Unable to map string \"{errorCode}\" to <#=codeSchema#> enumeration value")
            };

<# if (this.errorInfoSchema != null) { #>
            <#=infoName#> = errorPayload != null ? JsonSerializer.Deserialize<<#=infoSchema#>>(Encoding.UTF8.GetBytes(errorPayload)) : null;

<# } #>
            return true;
        }
<# } #>
    }
}
