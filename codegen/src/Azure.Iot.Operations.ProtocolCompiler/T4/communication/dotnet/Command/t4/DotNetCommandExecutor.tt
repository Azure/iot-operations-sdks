<#@ template language="C#" linePragmas="false" #>
/* Code generated by Azure.Iot.Operations.ProtocolCompiler v<#=System.Reflection.Assembly.GetExecutingAssembly().GetName().Version#>; DO NOT EDIT. */

#nullable enable

namespace <#=this.projectName#>.<#=this.genNamespace.GetTypeName(TargetLanguage.CSharp)#>
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Xml;
    using Azure.Iot.Operations.Protocol;
    using Azure.Iot.Operations.Protocol.RPC;
    using Azure.Iot.Operations.Protocol.Models;
    using <#=this.projectName#>;

    public static partial class <#=this.serviceName.GetTypeName(TargetLanguage.CSharp)#>
    {
        /// <summary>
        /// Specializes a <c>CommandExecutor</c> class for Command '<#=this.commandName.AsGiven#>'.
        /// </summary>
<# if (this.isIdempotent) { #>
<# if (this.ttl != null) { #>
        [CommandBehavior(idempotent: true, cacheTtl: "<#=this.ttl#>")]
<# } else { #>
        [CommandBehavior(idempotent: true)]
<# } #>
<# } else if (this.ttl != null) { #>
        [CommandBehavior(idempotent = false, cacheTtl: "<#=this.ttl#>")]
<# } #>
        public class <#=this.commandName.GetTypeName(TargetLanguage.CSharp, "command", "executor")#> : CommandExecutor<#=this.TypeParams()#>
        {
            private CombinedPrefixedReadOnlyDictionary<string> effectiveTopicTokenMap;

            /// <summary>
            /// Optionally initializes a custom token map to a dictionary that maps token values to replacement strings; defaults to new empty dictionary.
            /// </summary>
            public Dictionary<string, string> CustomTopicTokenMap { private get; init; } = new();

            /// <summary>
            /// Gets a dictionary for adding custom token keys and their replacement strings, which will be substituted in request and response topic patterns.
            /// Note that keys will automatically be prefixed by "ex:" when used for substitution searches in topic pattern strings.
            /// </summary>
            public override Dictionary<string, string> TopicTokenMap { get => CustomTopicTokenMap; }

            /// <summary>
            /// Gets a dictionary used by the base class's code for substituting tokens in request and response topic patterns.
            /// </summary>
            protected override IReadOnlyDictionary<string, string> EffectiveTopicTokenMap { get => effectiveTopicTokenMap; }

            /// <summary>
            /// Initializes a new instance of the <see cref="<#=this.commandName.GetTypeName(TargetLanguage.CSharp, "command", "executor")#>"/> class.
            /// </summary>
            internal <#=this.commandName.GetTypeName(TargetLanguage.CSharp, "command", "executor")#>(ApplicationContext applicationContext, IMqttPubSubClient mqttClient)
                : base(applicationContext, mqttClient, "<#=this.commandName.AsGiven#>", new <#=string.Format(this.serializerClassName, this.TypeParams())#>())
            {
                this.effectiveTopicTokenMap = new(string.Empty, (IReadOnlyDictionary<string, string>)base.TopicTokenMap, "ex:", this.CustomTopicTokenMap);

                base.TopicTokenMap["modelId"] = "<#=this.modelId#>";
                base.TopicTokenMap["commandName"] = "<#=this.commandName.AsGiven#>";
            }
        }
    }
}
<#+
    private string TypeParams() => $"<{this.reqSchema?.GetTypeName(TargetLanguage.CSharp) ?? serializerEmptyType.GetTypeName(TargetLanguage.CSharp)}, {this.respSchema?.GetTypeName(TargetLanguage.CSharp) ?? serializerEmptyType.GetTypeName(TargetLanguage.CSharp)}>";
#>
