<#@ template language="C#" linePragmas="false" #>
/* Code generated by Azure.Iot.Operations.ProtocolCompiler v<#=System.Reflection.Assembly.GetExecutingAssembly().GetName().Version#>; DO NOT EDIT. */

#nullable enable

namespace <#=this.projectName#>.<#=this.genNamespace.GetTypeName(TargetLanguage.CSharp)#>
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
<# if (this.cmdNameReqResps.Any() || this.telemNameSchemas.Any()) { #>
    using System.Threading;
<# } #>
    using System.Threading.Tasks;
    using Azure.Iot.Operations.Protocol.Models;
    using Azure.Iot.Operations.Protocol;
    using Azure.Iot.Operations.Protocol.RPC;
    using Azure.Iot.Operations.Protocol.Telemetry;
    using <#=this.projectName#>;
<# if (this.sharedNamespace != null) { #>
    using <#=this.projectName#>.<#=this.sharedNamespace.GetTypeName(TargetLanguage.CSharp)#>;
<# } #>

<# if (this.commandTopic != null) { #>
    [CommandTopic("<#=this.commandTopic#>")]
<# } #>
<# if (this.telemetryTopic != null) { #>
    [TelemetryTopic("<#=this.telemetryTopic#>")]
<# } #>
    [System.CodeDom.Compiler.GeneratedCode("Azure.Iot.Operations.ProtocolCompiler", "<#=System.Reflection.Assembly.GetExecutingAssembly().GetName().Version#>")]
    public static partial class <#=this.serviceName.GetTypeName(TargetLanguage.CSharp)#>
    {
<# if (this.generateServer) { #>
<# if (this.cmdServiceGroupId != null) { #>
        [ServiceGroupId("<#=this.cmdServiceGroupId#>")]
<# } #>
        public abstract partial class Service : IAsyncDisposable
        {
            private ApplicationContext applicationContext;
            private IMqttPubSubClient mqttClient;
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
            private readonly <#=cmdNameReqResp.Item1.GetTypeName(TargetLanguage.CSharp, "command", "executor")#> <#=cmdNameReqResp.Item1.GetVariableName(TargetLanguage.CSharp, "command", "executor")#>;
<# } #>
<# foreach (var telemNameSchema in this.telemNameSchemas) { #>
            private readonly <#=telemNameSchema.Item1.GetTypeName(TargetLanguage.CSharp, "telemetry", "sender")#> <#=telemNameSchema.Item1.GetVariableName(TargetLanguage.CSharp, "telemetry", "sender")#>;
<# } #>

            /// <summary>
            /// Construct a new instance of this service.
            /// </summary>
            /// <param name="applicationContext">The shared context for your application.</param>
            /// <param name="mqttClient">The MQTT client to use.</param>
            /// <param name="topicTokenMap">
            /// The topic token replacement map to use for all operations by default. Generally, this will include the token values
            /// for topic tokens such as "modelId" which should be the same for the duration of this service's lifetime. Note that
            /// additional topic tokens can be specified when starting the service with <see cref="StartAsync(Dictionary{string, string}?, int?, CancellationToken)"/> and
            /// can be specified per-telemetry message.
            /// </param>
            public Service(ApplicationContext applicationContext, IMqttPubSubClient mqttClient, Dictionary<string, string>? topicTokenMap = null)
            {
                this.applicationContext = applicationContext;
                this.mqttClient = mqttClient;

<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
                this.<#=cmdNameReqResp.Item1.GetVariableName(TargetLanguage.CSharp, "command", "executor")#> = new <#=cmdNameReqResp.Item1.GetTypeName(TargetLanguage.CSharp, "command", "executor")#>(applicationContext, mqttClient) { OnCommandReceived = <#=cmdNameReqResp.Item1.GetMethodName(TargetLanguage.CSharp, "int")#>};
                if (topicTokenMap != null)
                {
                    foreach (string topicTokenKey in topicTokenMap.Keys)
                    {
                        this.<#=cmdNameReqResp.Item1.GetVariableName(TargetLanguage.CSharp, "command", "executor")#>.TopicTokenMap.TryAdd(topicTokenKey, topicTokenMap[topicTokenKey]);
                    }
                }
<# } #>
<# foreach (var telemNameSchema in this.telemNameSchemas) { #>
                this.<#=telemNameSchema.Item1.GetVariableName(TargetLanguage.CSharp, "telemetry", "sender")#> = new <#=telemNameSchema.Item1.GetTypeName(TargetLanguage.CSharp, "telemetry", "sender")#>(applicationContext, mqttClient);
                if (topicTokenMap != null)
                {
                    foreach (string topicTokenKey in topicTokenMap.Keys)
                    {
                        this.<#=telemNameSchema.Item1.GetVariableName(TargetLanguage.CSharp, "telemetry", "sender")#>.TopicTokenMap.TryAdd(topicTokenKey, topicTokenMap[topicTokenKey]);
                    }
                }
<# } #>
            }

<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
            public <#=cmdNameReqResp.Item1.GetTypeName(TargetLanguage.CSharp, "command", "executor")#> <#=cmdNameReqResp.Item1.GetTypeName(TargetLanguage.CSharp, "command", "executor")#> { get => this.<#=cmdNameReqResp.Item1.GetVariableName(TargetLanguage.CSharp, "command", "executor")#>; }
<# } #>
<# foreach (var telemNameSchema in this.telemNameSchemas) { #>
            public <#=telemNameSchema.Item1.GetTypeName(TargetLanguage.CSharp, "telemetry", "sender")#> <#=telemNameSchema.Item1.GetTypeName(TargetLanguage.CSharp, "telemetry", "sender")#> { get => this.<#=telemNameSchema.Item1.GetVariableName(TargetLanguage.CSharp, "telemetry", "sender")#>; }
<# } #>

<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>

            public <#=this.defaultImpl ? "virtual" : "abstract"#> <#=this.ExtRespType(cmdNameReqResp, asTask: !this.syncApi)#> <#=cmdNameReqResp.Item1.GetMethodName(TargetLanguage.CSharp, this.syncApi ? null : "async")#>(<#=this.ReqParam(cmdNameReqResp)#>CommandRequestMetadata requestMetadata, CancellationToken cancellationToken)<#=this.defaultImpl ? "" : ";"#>
<# if (this.defaultImpl) { #>
            {
                return <#=this.EmptyResp(cmdNameReqResp, asTask: !this.syncApi)#>;
            }
<# } #>
<# } #>
<# foreach (var telemNameSchema in this.telemNameSchemas) { #>

            /// <summary>
            /// Send telemetry.
            /// </summary>
            /// <param name="telemetry">The payload of the telemetry.</param>
            /// <param name="metadata">The metadata of the telemetry.</param>
            /// <param name="additionalTopicTokenMap">
            /// The topic token replacement map to use in addition to the topic token map provided in the constructor. If this map
            /// contains any keys that topic token map provided in the constructor also has, then values specified in this map will take precedence.
            /// </param>
            /// <param name="qos">The quality of service to send the telemetry with.</param>
            /// <param name="telemetryTimeout">How long the telemetry message will be available on the broker for a receiver to receive.</param>
            /// <param name="cancellationToken">Cancellation token.</param>
            public async Task <#=this.TelemMethodName(telemNameSchema, "send", "async")#>(<#=SchemaType(telemNameSchema.Item2)#> telemetry, OutgoingTelemetryMetadata metadata, Dictionary<string, string>? additionalTopicTokenMap = null, MqttQualityOfServiceLevel qos = MqttQualityOfServiceLevel.AtLeastOnce, TimeSpan? telemetryTimeout = null, CancellationToken cancellationToken = default)
            {
                await this.<#=telemNameSchema.Item1.GetVariableName(TargetLanguage.CSharp, "telemetry", "sender")#>.SendTelemetryAsync(telemetry, metadata, additionalTopicTokenMap, qos, telemetryTimeout, cancellationToken);
            }
<# } #>
<# if (this.cmdNameReqResps.Any()) { #>

            /// <summary>
            /// Begin accepting command invocations for all command executors.
            /// </summary>
            /// <param name="additionalTopicTokenMap">
            /// The topic token replacements to use in addition to any topic tokens specified in the constructor. If this map
            /// contains any keys that topic tokens provided in the constructor also has, then values specified in this map will take precedence.
            /// </param>
            /// <param name="preferredDispatchConcurrency">The dispatch concurrency count for the command response cache to use.</param>
            /// <param name="cancellationToken">Cancellation token.</param>
            /// <remarks>
            /// Specifying custom topic tokens in <paramref name="additionalTopicTokenMap"/> allows you to make command executors only
            /// accept commands over a specific topic.
            ///
            /// Note that a given command executor can only be started with one set of topic token replacements. If you want a command executor
            /// to only handle commands for several specific sets of topic token values (as opposed to all possible topic token values), then you will
            /// instead need to create a command executor per topic token set.
            /// </remarks>
            public async Task StartAsync(Dictionary<string, string>? additionalTopicTokenMap = null, int? preferredDispatchConcurrency = null, CancellationToken cancellationToken = default)
            {
                additionalTopicTokenMap ??= new();
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before starting service.");
                }

                additionalTopicTokenMap["executorId"] = clientId;

                await Task.WhenAll(
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
                    this.<#=cmdNameReqResp.Item1.GetVariableName(TargetLanguage.CSharp, "command", "executor")#>.StartAsync(additionalTopicTokenMap, preferredDispatchConcurrency, cancellationToken)<#=this.IsLast(cmdNameReqResp) ? ").ConfigureAwait(false);" : ","#>
<# } #>
            }

            public async Task StopAsync(CancellationToken cancellationToken = default)
            {
                await Task.WhenAll(
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
                    this.<#=cmdNameReqResp.Item1.GetVariableName(TargetLanguage.CSharp, "command", "executor")#>.StopAsync(cancellationToken)<#=this.IsLast(cmdNameReqResp) ? ").ConfigureAwait(false);" : ","#>
<# } #>
            }
<# } #>
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
            private<#=this.syncApi ? "" : " async"#> Task<ExtendedResponse<<#=this.SchemaType(cmdNameReqResp.Item3)#>>> <#=cmdNameReqResp.Item1.GetMethodName(TargetLanguage.CSharp, "int")#>(ExtendedRequest<<#=this.SchemaType(cmdNameReqResp.Item2)#>> req, CancellationToken cancellationToken)
            {
<# if (this.syncApi) { #>
                <#=this.IntLValue(cmdNameReqResp)#>this.<#=cmdNameReqResp.Item1.GetMethodName(TargetLanguage.CSharp)#>(<#=this.ReqArgs(cmdNameReqResp, "req")#>, cancellationToken);
                return Task.FromResult(new ExtendedResponse<<#=this.SchemaType(cmdNameReqResp.Item3)#>> { <#=this.IntRValue(cmdNameReqResp)#>});
<# } else { #>
                <#=this.IntLValue(cmdNameReqResp)#>await this.<#=cmdNameReqResp.Item1.GetMethodName(TargetLanguage.CSharp)#>Async(<#=this.ReqArgs(cmdNameReqResp, "req")#>, cancellationToken);
                return new ExtendedResponse<<#=this.SchemaType(cmdNameReqResp.Item3)#>> { <#=this.IntRValue(cmdNameReqResp)#>};
<# } #>
            }
<# } #>

            public async ValueTask DisposeAsync()
            {
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
                await this.<#=cmdNameReqResp.Item1.GetVariableName(TargetLanguage.CSharp, "command", "executor")#>.DisposeAsync().ConfigureAwait(false);
<# } #>
<# foreach (var telemNameSchema in this.telemNameSchemas) { #>
                await this.<#=telemNameSchema.Item1.GetVariableName(TargetLanguage.CSharp, "telemetry", "sender")#>.DisposeAsync().ConfigureAwait(false);
<# } #>
            }

            public async ValueTask DisposeAsync(bool disposing)
            {
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
                await this.<#=cmdNameReqResp.Item1.GetVariableName(TargetLanguage.CSharp, "command", "executor")#>.DisposeAsync(disposing).ConfigureAwait(false);
<# } #>
<# foreach (var telemNameSchema in this.telemNameSchemas) { #>
                await this.<#=telemNameSchema.Item1.GetVariableName(TargetLanguage.CSharp, "telemetry", "sender")#>.DisposeAsync(disposing).ConfigureAwait(false);
<# } #>
            }
        }
<# } #>
<# if (this.generateServer && this.generateClient) { #>

<# } #>
<# if (this.generateClient) { #>
<# if (this.telemServiceGroupId != null) { #>
        [ServiceGroupId("<#=this.telemServiceGroupId#>")]
<# } #>
        public abstract partial class Client<#=this.cmdNameReqResps.Any() ? " : IAsyncDisposable" : ""#>
        {
            private ApplicationContext applicationContext;
            private IMqttPubSubClient mqttClient;
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
            private readonly <#=cmdNameReqResp.Item1.GetTypeName(TargetLanguage.CSharp, "command", "invoker")#> <#=cmdNameReqResp.Item1.GetVariableName(TargetLanguage.CSharp, "command", "invoker")#>;
<# } #>
<# foreach (var telemNameSchema in this.telemNameSchemas) { #>
            private readonly <#=telemNameSchema.Item1.GetTypeName(TargetLanguage.CSharp, "telemetry", "receiver")#> <#=telemNameSchema.Item1.GetVariableName(TargetLanguage.CSharp, "telemetry", "receiver")#>;
<# } #>

            /// <summary>
            /// Construct a new instance of this client.
            /// </summary>
            /// <param name="applicationContext">The shared context for your application.</param>
            /// <param name="mqttClient">The MQTT client to use.</param>
            /// <param name="topicTokenMap">
            /// The topic token replacement map to use for all operations by default. Generally, this will include the token values
            /// for topic tokens such as "modelId" which should be the same for the duration of this client's lifetime. Note that
            /// additional topic tokens can be specified when starting the client with <see cref="StartAsync(Dictionary{string, string}?, int?, CancellationToken)"/>.
            /// </param>
            public Client(ApplicationContext applicationContext, IMqttPubSubClient mqttClient, Dictionary<string, string>? topicTokenMap = null)
            {
                this.applicationContext = applicationContext;
                this.mqttClient = mqttClient;

<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
                this.<#=cmdNameReqResp.Item1.GetVariableName(TargetLanguage.CSharp, "command", "invoker")#> = new <#=cmdNameReqResp.Item1.GetTypeName(TargetLanguage.CSharp, "command", "invoker")#>(applicationContext, mqttClient);
                if (topicTokenMap != null)
                {
                    foreach (string topicTokenKey in topicTokenMap.Keys)
                    {
                        this.<#=cmdNameReqResp.Item1.GetVariableName(TargetLanguage.CSharp, "command", "invoker")#>.TopicTokenMap.TryAdd(topicTokenKey, topicTokenMap[topicTokenKey]);
                    }
                }
<# } #>
<# foreach (var telemNameSchema in this.telemNameSchemas) { #>
                this.<#=telemNameSchema.Item1.GetVariableName(TargetLanguage.CSharp, "telemetry", "receiver")#> = new <#=telemNameSchema.Item1.GetTypeName(TargetLanguage.CSharp, "telemetry", "receiver")#>(applicationContext, mqttClient) { OnTelemetryReceived = this.<#=this.TelemMethodName(telemNameSchema, "receive")#> };
                if (topicTokenMap != null)
                {
                    foreach (string topicTokenKey in topicTokenMap.Keys)
                    {
                        this.<#=telemNameSchema.Item1.GetVariableName(TargetLanguage.CSharp, "telemetry", "receiver")#>.TopicTokenMap.TryAdd(topicTokenKey, topicTokenMap[topicTokenKey]);
                    }
                }
<# } #>
            }

<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
            public <#=cmdNameReqResp.Item1.GetTypeName(TargetLanguage.CSharp, "command", "invoker")#> <#=cmdNameReqResp.Item1.GetTypeName(TargetLanguage.CSharp, "command", "invoker")#> { get => this.<#=cmdNameReqResp.Item1.GetVariableName(TargetLanguage.CSharp, "command", "invoker")#>; }
<# } #>
<# foreach (var telemNameSchema in this.telemNameSchemas) { #>
            public <#=telemNameSchema.Item1.GetTypeName(TargetLanguage.CSharp, "telemetry", "receiver")#> <#=telemNameSchema.Item1.GetTypeName(TargetLanguage.CSharp, "telemetry", "receiver")#> { get => this.<#=telemNameSchema.Item1.GetVariableName(TargetLanguage.CSharp, "telemetry", "receiver")#>; }
<# } #>

<# foreach (var telemNameSchema in this.telemNameSchemas) { #>

            public <#=this.defaultImpl ? "virtual" : "abstract"#> Task <#=this.TelemMethodName(telemNameSchema, "receive")#>(string senderId, <#=SchemaType(telemNameSchema.Item2)#> telemetry, IncomingTelemetryMetadata metadata)<#=this.defaultImpl ? "" : ";"#>
<# if (this.defaultImpl) { #>
            {
                return Task.CompletedTask;
            }
<# } #>
<# } #>
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>

            /// <summary>
            /// Invoke a command.
            /// </summary>
            /// <param name="requestMetadata">The metadata for this command request.</param>
            /// <param name="additionalTopicTokenMap">
            /// The topic token replacement map to use in addition to the topic tokens specified in the constructor. If this map
            /// contains any keys that the topic tokens specified in the constructor also has, then values specified in this map will take precedence.
            /// </param>
            /// <param name="commandTimeout">How long the command will be available on the broker for an executor to receive.</param>
            /// <param name="cancellationToken">Cancellation token.</param>
            /// <returns>The command response.</returns>
            public <#=this.CallAsyncType(cmdNameReqResp)#> <#=cmdNameReqResp.Item1.GetMethodName(TargetLanguage.CSharp, "async")#>(<#=this.ExecParam()#><#=this.ReqParam(cmdNameReqResp)#>CommandRequestMetadata? requestMetadata = null, Dictionary<string, string>? additionalTopicTokenMap = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                additionalTopicTokenMap ??= new();

                additionalTopicTokenMap["invokerClientId"] = clientId;
<# if (this.doesCommandTargetExecutor) { #>
                additionalTopicTokenMap["executorId"] = executorId;
<# } #>

                return new <#=this.CallAsyncType(cmdNameReqResp)#>(this.<#=cmdNameReqResp.Item1.GetVariableName(TargetLanguage.CSharp, "command", "invoker")#>.InvokeCommandAsync(<#=cmdNameReqResp.Item2 != null ? $"request" : this.serializerEmptyType.GetAllocator(TargetLanguage.CSharp) #>, metadata, additionalTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }
<# } #>
<# if (this.telemNameSchemas.Any()) { #>

            /// <summary>
            /// Begin accepting telemetry for all telemetry receivers.
            /// </summary>
            /// <param name="additionalTopicTokenMap">
            /// The topic token replacements to use in addition to any topic tokens specified in the constructor. If this map
            /// contains any keys that topic tokens provided in the constructor also has, then values specified in this map will take precedence.
            /// </param>
            /// <param name="cancellationToken">Cancellation token.</param>
            /// <remarks>
            /// Specifying custom topic tokens in <paramref name="additionalTopicTokenMap"/> allows you to make telemetry receivers only
            /// accept telemetry over a specific topic.
            ///
            /// Note that a given telemetry receiver can only be started with one set of topic token replacements. If you want a telemetry receiver
            /// to only handle telemetry for several specific sets of topic token values (as opposed to all possible topic token values), then you will
            /// instead need to create a telemetry receiver per topic token set.
            /// </remarks>
            public async Task StartAsync(Dictionary<string, string>? additionalTopicTokenMap = null, CancellationToken cancellationToken = default)
            {
                additionalTopicTokenMap ??= new();

                await Task.WhenAll(
<# foreach (var telemNameSchema in this.telemNameSchemas) { #>
                    this.<#=telemNameSchema.Item1.GetVariableName(TargetLanguage.CSharp, "telemetry", "receiver")#>.StartAsync(additionalTopicTokenMap, cancellationToken)<#=this.IsLast(telemNameSchema) ? ").ConfigureAwait(false);" : ","#>
<# } #>
            }
<# } #>
<# if (this.telemNameSchemas.Any()) { #>

            /// <summary>
            /// Stop accepting telemetry for all telemetry receivers.
            /// </summary>
            /// <param name="cancellationToken">Cancellation token.</param>
            public async Task StopAsync(CancellationToken cancellationToken = default)
            {
                await Task.WhenAll(
<# foreach (var telemNameSchema in this.telemNameSchemas) { #>
                    this.<#=telemNameSchema.Item1.GetVariableName(TargetLanguage.CSharp, "telemetry", "receiver")#>.StopAsync(cancellationToken)<#=this.IsLast(telemNameSchema) ? ").ConfigureAwait(false);" : ","#>
<# } #>
            }
<# } #>

            public async ValueTask DisposeAsync()
            {
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
                await this.<#=cmdNameReqResp.Item1.GetVariableName(TargetLanguage.CSharp, "command", "invoker")#>.DisposeAsync().ConfigureAwait(false);
<# } #>
<# foreach (var telemNameSchema in this.telemNameSchemas) { #>
                await this.<#=telemNameSchema.Item1.GetVariableName(TargetLanguage.CSharp, "telemetry", "receiver")#>.DisposeAsync().ConfigureAwait(false);
<# } #>
            }

            public async ValueTask DisposeAsync(bool disposing)
            {
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
                await this.<#=cmdNameReqResp.Item1.GetVariableName(TargetLanguage.CSharp, "command", "invoker")#>.DisposeAsync(disposing).ConfigureAwait(false);
<# } #>
<# foreach (var telemNameSchema in this.telemNameSchemas) { #>
                await this.<#=telemNameSchema.Item1.GetVariableName(TargetLanguage.CSharp, "telemetry", "receiver")#>.DisposeAsync(disposing).ConfigureAwait(false);
<# } #>
            }
        }
<# } #>
    }
}
<#+
    private string IntLValue((CodeName, ITypeName, ITypeName) cmdNameReqResp) => (cmdNameReqResp.Item3 != null ? $"ExtendedResponse<{this.SchemaType(cmdNameReqResp.Item3)}> extended = " : $"CommandResponseMetadata? responseMetadata = ");

    private string IntRValue((CodeName, ITypeName, ITypeName) cmdNameReqResp) => (cmdNameReqResp.Item3 != null ? "Response = extended.Response, ResponseMetadata = extended.ResponseMetadata " : "ResponseMetadata = responseMetadata ");

    private string ExtRespType((CodeName, ITypeName, ITypeName) cmdNameReqResp, bool asTask) => this.CondWrap(cmdNameReqResp.Item3 != null ? $"ExtendedResponse<{this.SchemaType(cmdNameReqResp.Item3)}>" : "CommandResponseMetadata?", asTask);

    private string EmptyResp((CodeName, ITypeName, ITypeName) cmdNameReqResp, bool asTask) => this.CondFrom(cmdNameReqResp.Item3 != null ? $"new ExtendedResponse<{this.SchemaType(cmdNameReqResp.Item3)}> {{ Response = new {this.SchemaType(cmdNameReqResp.Item3)}() }}" : "(CommandResponseMetadata?)new CommandResponseMetadata()", asTask);

    private string CondWrap(string type, bool asTask) => asTask ? $"Task<{type}>" : type;

    private string CondFrom(string res, bool asTask) => asTask ? $"Task.FromResult({res})" : res;

    private string ReqParam((CodeName, ITypeName, ITypeName) cmdNameReqResp) => cmdNameReqResp.Item2 != null ? $"{this.SchemaType(cmdNameReqResp.Item2)} request, " : "";

    private string ReqArgs((CodeName, ITypeName, ITypeName) cmdNameReqResp, string reqVar) => cmdNameReqResp.Item2 != null ? $"{reqVar}.Request!, {reqVar}.RequestMetadata!" : $"{reqVar}.RequestMetadata!";

    private string CallAsyncType((CodeName, ITypeName, ITypeName) cmdNameReqResp) => $"RpcCallAsync<{this.SchemaType(cmdNameReqResp.Item3)}>";

    private string SchemaType(ITypeName schema) => schema?.GetTypeName(TargetLanguage.CSharp) ?? this.serializerEmptyType.GetTypeName(TargetLanguage.CSharp);

    private string ExecParam() => this.doesCommandTargetExecutor ? "string executorId, " : "";

    private bool IsLast((CodeName, ITypeName, ITypeName) cmdNameReqResp) => cmdNameReqResp.Item1.AsGiven == this.cmdNameReqResps.Last().Item1.AsGiven;

    private bool IsLast((CodeName, ITypeName) telemNameSchema) => telemNameSchema.Item1.AsGiven == this.telemNameSchemas.Last().Item1.AsGiven;

    private string TelemMethodName((CodeName, ITypeName) telemNameSchema, string prefix, string suffix = null) => (telemNameSchema.Item2 is RawTypeName ? telemNameSchema.Item1 : new CodeName()).GetMethodName(TargetLanguage.CSharp, "telemetry", suffix, prefix: prefix);
#>
