<#@ template language="C#" linePragmas="false" #>
/* Code generated by Azure.Iot.Operations.ProtocolCompiler; DO NOT EDIT. */

#nullable enable

namespace <#=this.projectName#>.<#=this.genNamespace#>
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
<# if (this.cmdNameReqResps.Any() || this.telemNameSchemas.Any()) { #>
    using System.Threading;
<# } #>
    using System.Threading.Tasks;
    using Azure.Iot.Operations.Protocol.Models;
    using Azure.Iot.Operations.Protocol;
    using Azure.Iot.Operations.Protocol.RPC;
    using Azure.Iot.Operations.Protocol.Telemetry;
    using <#=this.projectName#>;

<# if (this.commandTopic != null) { #>
    [CommandTopic("<#=this.commandTopic#>")]
<# } #>
<# if (this.telemetryTopic != null) { #>
    [TelemetryTopic("<#=this.telemetryTopic#>")]
<# } #>
    public static partial class <#=this.serviceName#>
    {
<# if (this.generateServer) { #>
<# if (this.cmdServiceGroupId != null) { #>
        [ServiceGroupId("<#=this.cmdServiceGroupId#>")]
<# } #>
        public abstract partial class Service : IAsyncDisposable
        {
            private IMqttPubSubClient mqttClient;
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
            private readonly <#=this.AsUpper(cmdNameReqResp.Item1)#>CommandExecutor <#=this.AsLower(cmdNameReqResp.Item1)#>CommandExecutor;
<# } #>
<# foreach (var telemNameSchema in this.telemNameSchemas) { #>
            private readonly <#=this.TelemComp(telemNameSchema)#>Sender <#=this.TelemItem(telemNameSchema)#>Sender;
<# } #>

            public Service(IMqttPubSubClient mqttClient)
            {
                this.mqttClient = mqttClient;
                this.CustomTopicTokenMap = new();

<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
                this.<#=this.AsLower(cmdNameReqResp.Item1)#>CommandExecutor = new <#=this.AsUpper(cmdNameReqResp.Item1)#>CommandExecutor(mqttClient) { OnCommandReceived = <#=this.AsUpper(cmdNameReqResp.Item1)#>_Int, CustomTopicTokenMap = this.CustomTopicTokenMap };
<# } #>
<# foreach (var telemNameSchema in this.telemNameSchemas) { #>
                this.<#=this.TelemItem(telemNameSchema)#>Sender = new <#=this.TelemComp(telemNameSchema)#>Sender(mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
<# } #>
            }

<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
            public <#=this.AsUpper(cmdNameReqResp.Item1)#>CommandExecutor <#=this.AsUpper(cmdNameReqResp.Item1)#>CommandExecutor { get => this.<#=this.AsLower(cmdNameReqResp.Item1)#>CommandExecutor; }
<# } #>
<# foreach (var telemNameSchema in this.telemNameSchemas) { #>
            public <#=this.TelemComp(telemNameSchema)#>Sender <#=this.TelemComp(telemNameSchema)#>Sender { get => this.<#=this.TelemItem(telemNameSchema)#>Sender; }
<# } #>

            public Dictionary<string, string> CustomTopicTokenMap { get; private init; }
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>

            public abstract <#=this.ExtRespType(cmdNameReqResp, asTask: !this.syncApi)#> <#=this.AsUpper(cmdNameReqResp.Item1)#><#=this.syncApi ? "" : "Async"#>(<#=this.ReqParam(cmdNameReqResp)#>CommandRequestMetadata requestMetadata, CancellationToken cancellationToken);
<# } #>
<# foreach (var telemNameSchema in this.telemNameSchemas) { #>

            public async Task Send<#=TelemName(telemNameSchema)#>TelemetryAsync(<#=SchemaType(telemNameSchema.Item2)#> telemetry, OutgoingTelemetryMetadata metadata, MqttQualityOfServiceLevel qos = MqttQualityOfServiceLevel.AtLeastOnce, TimeSpan? messageExpiryInterval = null, CancellationToken cancellationToken = default)
            {
                await this.<#=this.TelemItem(telemNameSchema)#>Sender.SendTelemetryAsync(telemetry, metadata, qos, messageExpiryInterval, cancellationToken);
            }
<# } #>
<# if (this.cmdNameReqResps.Any()) { #>

            public async Task StartAsync(int? preferredDispatchConcurrency = null, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before starting service.");
                }

                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "executorId", clientId },
                };

                await Task.WhenAll(
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
                    this.<#=this.AsLower(cmdNameReqResp.Item1)#>CommandExecutor.StartAsync(preferredDispatchConcurrency, transientTopicTokenMap, cancellationToken)<#=this.IsLast(cmdNameReqResp) ? ").ConfigureAwait(false);" : ","#>
<# } #>
            }

            public async Task StopAsync(CancellationToken cancellationToken = default)
            {
                await Task.WhenAll(
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
                    this.<#=this.AsLower(cmdNameReqResp.Item1)#>CommandExecutor.StopAsync(cancellationToken)<#=this.IsLast(cmdNameReqResp) ? ").ConfigureAwait(false);" : ","#>
<# } #>
            }
<# } #>
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
            private<#=this.syncApi ? "" : " async"#> Task<ExtendedResponse<<#=this.SchemaType(cmdNameReqResp.Item3)#>>> <#=this.AsUpper(cmdNameReqResp.Item1)#>_Int(ExtendedRequest<<#=this.SchemaType(cmdNameReqResp.Item2)#>> req, CancellationToken cancellationToken)
            {
<# if (this.syncApi) { #>
                <#=this.IntLValue(cmdNameReqResp)#>this.<#=this.AsUpper(cmdNameReqResp.Item1)#>(<#=this.ReqArgs(cmdNameReqResp, "req")#>, cancellationToken);
                return Task.FromResult(new ExtendedResponse<<#=this.SchemaType(cmdNameReqResp.Item3)#>> { <#=this.IntRValue(cmdNameReqResp)#>});
<# } else { #>
                <#=this.IntLValue(cmdNameReqResp)#>await this.<#=this.AsUpper(cmdNameReqResp.Item1)#>Async(<#=this.ReqArgs(cmdNameReqResp, "req")#>, cancellationToken);
                return new ExtendedResponse<<#=this.SchemaType(cmdNameReqResp.Item3)#>> { <#=this.IntRValue(cmdNameReqResp)#>};
<# } #>
            }
<# } #>

            public async ValueTask DisposeAsync()
            {
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
                await this.<#=this.AsLower(cmdNameReqResp.Item1)#>CommandExecutor.DisposeAsync().ConfigureAwait(false);
<# } #>
<# foreach (var telemNameSchema in this.telemNameSchemas) { #>
                await this.<#=this.TelemItem(telemNameSchema)#>Sender.DisposeAsync().ConfigureAwait(false);
<# } #>
            }

            public async ValueTask DisposeAsync(bool disposing)
            {
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
                await this.<#=this.AsLower(cmdNameReqResp.Item1)#>CommandExecutor.DisposeAsync(disposing).ConfigureAwait(false);
<# } #>
<# foreach (var telemNameSchema in this.telemNameSchemas) { #>
                await this.<#=this.TelemItem(telemNameSchema)#>Sender.DisposeAsync(disposing).ConfigureAwait(false);
<# } #>
            }
        }
<# } #>
<# if (this.generateServer && this.generateClient) { #>

<# } #>
<# if (this.generateClient) { #>
<# if (this.telemServiceGroupId != null) { #>
        [ServiceGroupId("<#=this.telemServiceGroupId#>")]
<# } #>
        public abstract partial class Client<#=this.cmdNameReqResps.Any() ? " : IAsyncDisposable" : ""#>
        {
            private IMqttPubSubClient mqttClient;
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
            private readonly <#=this.AsUpper(cmdNameReqResp.Item1)#>CommandInvoker <#=this.AsLower(cmdNameReqResp.Item1)#>CommandInvoker;
<# } #>
<# foreach (var telemNameSchema in this.telemNameSchemas) { #>
            private readonly <#=this.TelemComp(telemNameSchema)#>Receiver <#=this.TelemItem(telemNameSchema)#>Receiver;
<# } #>

            public Client(IMqttPubSubClient mqttClient)
            {
                this.mqttClient = mqttClient;
                this.CustomTopicTokenMap = new();

<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
                this.<#=this.AsLower(cmdNameReqResp.Item1)#>CommandInvoker = new <#=this.AsUpper(cmdNameReqResp.Item1)#>CommandInvoker(mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
<# } #>
<# foreach (var telemNameSchema in this.telemNameSchemas) { #>
                this.<#=this.TelemItem(telemNameSchema)#>Receiver = new <#=this.TelemComp(telemNameSchema)#>Receiver(mqttClient) { OnTelemetryReceived = this.Receive<#=TelemName(telemNameSchema)#>Telemetry, CustomTopicTokenMap = this.CustomTopicTokenMap };
<# } #>
            }

<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
            public <#=this.AsUpper(cmdNameReqResp.Item1)#>CommandInvoker <#=this.AsUpper(cmdNameReqResp.Item1)#>CommandInvoker { get => this.<#=this.AsLower(cmdNameReqResp.Item1)#>CommandInvoker; }
<# } #>
<# foreach (var telemNameSchema in this.telemNameSchemas) { #>
            public <#=this.TelemComp(telemNameSchema)#>Receiver <#=this.TelemComp(telemNameSchema)#>Receiver { get => this.<#=this.TelemItem(telemNameSchema)#>Receiver; }
<# } #>

            public Dictionary<string, string> CustomTopicTokenMap { get; private init; }
<# foreach (var telemNameSchema in this.telemNameSchemas) { #>

            public abstract Task Receive<#=TelemName(telemNameSchema)#>Telemetry(string senderId, <#=SchemaType(telemNameSchema.Item2)#> telemetry, IncomingTelemetryMetadata metadata);
<# } #>
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>

            public <#=this.CallAsyncType(cmdNameReqResp)#> <#=this.AsUpper(cmdNameReqResp.Item1)#>Async(<#=this.ExecParam()#><#=this.ReqParam(cmdNameReqResp)#>CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
<# if (this.doesCommandTargetExecutor) { #>
                    { "executorId", executorId },
<# } #>
                };

                return new <#=this.CallAsyncType(cmdNameReqResp)#>(this.<#=this.AsLower(cmdNameReqResp.Item1)#>CommandInvoker.InvokeCommandAsync(<#=cmdNameReqResp.Item2 != null ? $"request" : this.allocateEmpty #>, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }
<# } #>
<# if (this.telemNameSchemas.Any()) { #>

            public async Task StartAsync(CancellationToken cancellationToken = default)
            {
                await Task.WhenAll(
<# foreach (var telemNameSchema in this.telemNameSchemas) { #>
                    this.<#=this.TelemItem(telemNameSchema)#>Receiver.StartAsync(cancellationToken)<#=this.IsLast(telemNameSchema) ? ").ConfigureAwait(false);" : ","#>
<# } #>
            }
<# } #>
<# if (this.telemNameSchemas.Any()) { #>

            public async Task StopAsync(CancellationToken cancellationToken = default)
            {
                await Task.WhenAll(
<# foreach (var telemNameSchema in this.telemNameSchemas) { #>
                    this.<#=this.TelemItem(telemNameSchema)#>Receiver.StopAsync(cancellationToken)<#=this.IsLast(telemNameSchema) ? ").ConfigureAwait(false);" : ","#>
<# } #>
            }
<# } #>

            public async ValueTask DisposeAsync()
            {
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
                await this.<#=this.AsLower(cmdNameReqResp.Item1)#>CommandInvoker.DisposeAsync().ConfigureAwait(false);
<# } #>
<# foreach (var telemNameSchema in this.telemNameSchemas) { #>
                await this.<#=this.TelemItem(telemNameSchema)#>Receiver.DisposeAsync().ConfigureAwait(false);
<# } #>
            }

            public async ValueTask DisposeAsync(bool disposing)
            {
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
                await this.<#=this.AsLower(cmdNameReqResp.Item1)#>CommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
<# } #>
<# foreach (var telemNameSchema in this.telemNameSchemas) { #>
                await this.<#=this.TelemItem(telemNameSchema)#>Receiver.DisposeAsync(disposing).ConfigureAwait(false);
<# } #>
            }
        }
<# } #>
    }
}
<#+
    private string IntLValue((string, string, string) cmdNameReqResp) => (cmdNameReqResp.Item3 != null ? $"ExtendedResponse<{this.SchemaType(cmdNameReqResp.Item3)}> extended = " : $"CommandResponseMetadata? responseMetadata = ");

    private string IntRValue((string, string, string) cmdNameReqResp) => (cmdNameReqResp.Item3 != null ? "Response = extended.Response, ResponseMetadata = extended.ResponseMetadata " : "ResponseMetadata = responseMetadata ");

    private string ExtRespType((string, string, string) cmdNameReqResp, bool asTask) => this.CondWrap(cmdNameReqResp.Item3 != null ? $"ExtendedResponse<{this.SchemaType(cmdNameReqResp.Item3)}>" : "CommandResponseMetadata?", asTask);

    private string CondWrap(string type, bool asTask) => asTask ? $"Task<{type}>" : type;

    private string ReqParam((string, string, string) cmdNameReqResp) => cmdNameReqResp.Item2 != null ? $"{this.SchemaType(cmdNameReqResp.Item2)} request, " : "";

    private string ReqArgs((string, string, string) cmdNameReqResp, string reqVar) => cmdNameReqResp.Item2 != null ? $"{reqVar}.Request!, {reqVar}.RequestMetadata!" : $"{reqVar}.RequestMetadata!";

    private string CallAsyncType((string, string, string) cmdNameReqResp) => $"RpcCallAsync<{this.SchemaType(cmdNameReqResp.Item3)}>";

    private string SchemaType(string schema) => schema == null ? this.serializerEmptyType : schema == "" ? "byte[]" : schema;

    private string ExecParam() => this.doesCommandTargetExecutor ? "string executorId, " : "";

    private bool IsLast((string, string, string) cmdNameReqResp) => cmdNameReqResp.Item1 == this.cmdNameReqResps.Last().Item1;

    private bool IsLast((string, string) telemNameSchema) => telemNameSchema.Item1 == this.telemNameSchemas.Last().Item1;

    private string AsUpper(string name) => string.IsNullOrEmpty(name) ? name : char.ToUpperInvariant(name[0]) + name.Substring(1);

    private string AsLower(string name) => string.IsNullOrEmpty(name) ? name : char.ToLowerInvariant(name[0]) + name.Substring(1);

    private string TelemComp((string, string) telemNameSchema) => telemNameSchema.Item2 == "" ? $"{(telemNameSchema.Item1 != null ? AsUpper(telemNameSchema.Item1) : string.Empty)}Telemetry" : telemNameSchema.Item2;

    private string TelemItem((string, string) telemNameSchema) => AsLower(TelemComp(telemNameSchema));

    private string TelemName((string, string) telemNameSchema) => telemNameSchema.Item2 == "" ? AsUpper(telemNameSchema.Item1) ?? string.Empty : string.Empty;
#>
