<#@ template language="C#" linePragmas="false" #>
<#@ import namespace="Azure.Iot.Operations.ProtocolCompiler" #>
/* Code generated by Azure.Iot.Operations.ProtocolCompiler; DO NOT EDIT. */

use std::time::Duration;

use azure_iot_operations_mqtt::interface::ManagedClient;
use azure_iot_operations_protocol::common::aio_protocol_error::AIOProtocolError;
use azure_iot_operations_protocol::common::hybrid_logical_clock::HybridLogicalClock;
<# if (this.reqSchema != null) { #>
use azure_iot_operations_protocol::common::payload_serialize::PayloadSerialize;
<# } #>
use azure_iot_operations_protocol::rpc::command_invoker::{
    CommandInvoker, CommandInvokerOptionsBuilder, CommandRequest, CommandRequestBuilder,
    CommandRequestBuilderError, CommandResponse,
};

<# if (this.reqSchema != null && this.reqSchema != "Bytes") { #>
use super::<#=NamingSupport.ToSnakeCase(this.reqSchema)#>::<#=this.reqSchema#>;
<# } #>
<# if (this.respSchema != null && this.respSchema != "Bytes") { #>
use super::<#=NamingSupport.ToSnakeCase(this.respSchema)#>::<#=this.respSchema#>;
<# } #>
use super::MODEL_ID;
use super::REQUEST_TOPIC_PATTERN;
<# if (this.reqSchema == "Bytes" || this.respSchema == "Bytes") { #>
use crate::common_types::bytes::Bytes;
<# } #>
use crate::common_types::common_options::CommonOptions;
<# if (this.reqSchema == null || this.respSchema == null) { #>
use crate::common_types::<#=NamingSupport.ToSnakeCase(this.serializerEmptyType)#>::<#=this.serializerEmptyType#>;
<# } #>

pub type <#=this.capitalizedCommandName#>Request = CommandRequest<<#=this.RequestType()#>>;
pub type <#=this.capitalizedCommandName#>Response = CommandResponse<<#=this.ResponseType()#>>;
pub type <#=this.capitalizedCommandName#>RequestBuilderError = CommandRequestBuilderError;

#[derive(Default)]
pub struct <#=this.capitalizedCommandName#>RequestBuilder {
    inner_builder: CommandRequestBuilder<<#=this.RequestType()#>>,
<# if (this.doesCommandTargetExecutor) { #>
    set_executor_id: bool,
<# } #>
}

impl <#=this.capitalizedCommandName#>RequestBuilder {
    pub fn custom_user_data(&mut self, custom_user_data: Vec<(String, String)>) -> &mut Self {
        self.inner_builder.custom_user_data(custom_user_data);
        self
    }

    pub fn fencing_token(&mut self, fencing_token: Option<HybridLogicalClock>) -> &mut Self {
        self.inner_builder.fencing_token(fencing_token);
        self
    }

    pub fn timeout(&mut self, timeout: Duration) -> &mut Self {
        self.inner_builder.timeout(timeout);
        self
    }

<# if (this.doesCommandTargetExecutor) { #>
    pub fn executor_id(&mut self, executor_id: String) -> &mut Self {
        self.inner_builder.executor_id(executor_id);
        self.set_executor_id = true;
        self
    }

<# } #>
<# if (this.reqSchema != null) { #>
    pub fn payload(
        &mut self,
        payload: &<#=this.reqSchema#>,
    ) -> Result<&mut Self, <<#=this.reqSchema#> as PayloadSerialize>::Error> {
        self.inner_builder.payload(payload)?;
        Ok(self)
    }

<# } #>
    pub fn build(&mut self) -> Result<<#=this.capitalizedCommandName#>Request, <#=this.capitalizedCommandName#>RequestBuilderError> {
<# if (this.doesCommandTargetExecutor) { #>
        if !self.set_executor_id {
            return Err(<#=this.capitalizedCommandName#>RequestBuilderError::UninitializedField(
                "executor_id",
            ));
        }

<# } #>
<# if (this.reqSchema == null) { #>
        self.inner_builder.payload(&EmptyJson {}).unwrap();

<# } #>
        self.inner_builder.build()
    }
}

pub struct <#=this.capitalizedCommandName#>CommandInvoker<C>(
    CommandInvoker<<#=this.RequestType()#>, <#=this.ResponseType()#>, C>,
)
where
    C: ManagedClient + Clone + Send + Sync + 'static,
    C::PubReceiver: Send + Sync + 'static;

impl<C> <#=this.capitalizedCommandName#>CommandInvoker<C>
where
    C: ManagedClient + Clone + Send + Sync + 'static,
    C::PubReceiver: Send + Sync + 'static,
{
    pub fn new(client: C, options: &CommonOptions) -> Self {
        let mut invoker_options_builder = CommandInvokerOptionsBuilder::default();
        if let Some(topic_namespace) = &options.topic_namespace {
            invoker_options_builder.topic_namespace(topic_namespace.clone());
        }
        let invoker_options = invoker_options_builder
            .model_id(MODEL_ID.to_string())
            .request_topic_pattern(REQUEST_TOPIC_PATTERN)
            .command_name("<#=this.commandName#>")
            .custom_topic_token_map(options.custom_topic_token_map.clone())
            .build()
            .expect("DTDL schema generated invalid arguments");
        Self(
            CommandInvoker::new(client, invoker_options)
                .expect("DTDL schema generated invalid arguments"),
        )
    }

    pub async fn invoke(
        &self,
        request: <#=this.capitalizedCommandName#>Request,
    ) -> Result<<#=this.capitalizedCommandName#>Response, AIOProtocolError> {
        self.0.invoke(request).await
    }
}
<#+
    private string RequestType() => this.reqSchema == "Bytes" ? "Bytes" : this.reqSchema ?? this.serializerEmptyType;

    private string ResponseType() => this.respSchema == "Bytes" ? "Bytes" : this.respSchema ?? this.serializerEmptyType;
#>
