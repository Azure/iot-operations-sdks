<#@ template language="C#" linePragmas="false" #>
<#@ import namespace="Azure.Iot.Operations.ProtocolCompiler" #>
/* Code generated by Azure.Iot.Operations.ProtocolCompiler v<#=System.Reflection.Assembly.GetExecutingAssembly().GetName().Version#>; DO NOT EDIT. */

use std::collections::HashMap;
use std::time::Duration;

use azure_iot_operations_mqtt::interface::ManagedClient;
use azure_iot_operations_protocol::common::aio_protocol_error::AIOProtocolError;
<# if (this.reqSchema != null) { #>
use azure_iot_operations_protocol::common::payload_serialize::PayloadSerialize;
<# } #>
use azure_iot_operations_protocol::rpc::command_invoker::{
    CommandInvoker, CommandInvokerOptionsBuilder, CommandRequest, CommandRequestBuilder,
    CommandRequestBuilderError, CommandResponse,
};
use azure_iot_operations_protocol::application::ApplicationContext;

<# if (this.reqSchema is CodeName) { #>
use super::<#=this.reqSchema.GetFileName(TargetLanguage.Rust)#>::<#=this.reqSchema.GetTypeName(TargetLanguage.Rust)#>;
<# } #>
<# if (this.respSchema is CodeName) { #>
use super::<#=this.respSchema.GetFileName(TargetLanguage.Rust)#>::<#=this.respSchema.GetTypeName(TargetLanguage.Rust)#>;
<# } #>
use super::MODEL_ID;
use super::REQUEST_TOPIC_PATTERN;
<# if (this.reqSchema is CustomTypeName || this.respSchema is CustomTypeName) { #>
use super::super::common_types::custom_payload::CustomPayload;
<# } #>
use super::super::common_types::common_options::CommandOptions;
<# if (this.reqSchema == null || this.respSchema == null) { #>
use super::super::common_types::<#=this.serializerEmptyType.GetFileName(TargetLanguage.Rust)#>::<#=this.serializerEmptyType.GetTypeName(TargetLanguage.Rust)#>;
<# } #>

pub type <#=this.commandName.GetTypeName(TargetLanguage.Rust, "request")#> = CommandRequest<<#=this.RequestType()#>>;
pub type <#=this.commandName.GetTypeName(TargetLanguage.Rust, "response")#> = CommandResponse<<#=this.ResponseType()#>>;
pub type <#=this.commandName.GetTypeName(TargetLanguage.Rust, "request", "builder", "error")#> = CommandRequestBuilderError;

#[derive(Default)]
/// Builder for [`<#=this.commandName.GetTypeName(TargetLanguage.Rust, "request")#>`]
pub struct <#=this.commandName.GetTypeName(TargetLanguage.Rust, "request", "builder")#> {
    inner_builder: CommandRequestBuilder<<#=this.RequestType()#>>,
<# if (this.doesCommandTargetExecutor) { #>
    set_executor_id: bool,
<# } #>
    topic_tokens: HashMap<String, String>,
}

impl <#=this.commandName.GetTypeName(TargetLanguage.Rust, "request", "builder")#> {
    /// Custom user data to set on the request
    pub fn custom_user_data(&mut self, custom_user_data: Vec<(String, String)>) -> &mut Self {
        self.inner_builder.custom_user_data(custom_user_data);
        self
    }

    /// Topic token keys/values to be replaced into the publish topic of the request message.
    /// A prefix of "ex:" will be prepended to each key before scanning the topic pattern.
    /// Thus, only tokens of the form `{ex:SOMEKEY}` will be replaced.
    pub fn topic_tokens(&mut self, topic_tokens: HashMap<String, String>) -> &mut Self {
        for (k, v) in topic_tokens.into_iter() {
            self.topic_tokens.insert(format!("ex:{k}"), v);
        }
        self
    }

    /// Timeout for the request
    pub fn timeout(&mut self, timeout: Duration) -> &mut Self {
        self.inner_builder.timeout(timeout);
        self
    }

<# if (this.doesCommandTargetExecutor) { #>
    /// Target executor ID
    pub fn executor_id(&mut self, executor_id: String) -> &mut Self {
        self.topic_tokens
            .insert("executorId".to_string(), executor_id.clone());
        self.set_executor_id = true;
        self
    }

<# } #>
<# if (this.reqSchema != null) { #>
    /// Payload of the request
    ///
    /// # Errors
    /// If the payload cannot be serialized
    pub fn payload(
        &mut self,
        payload: <#=this.reqSchema.GetTypeName(TargetLanguage.Rust)#>,
    ) -> Result<&mut Self, AIOProtocolError> {
        self.inner_builder.payload(payload)?;
        Ok(self)
    }

<# } #>
    /// Builds a new `<#=this.commandName.GetTypeName(TargetLanguage.Rust, "request")#>`
    ///
    /// # Errors
    /// If a required field has not been initialized
    #[allow(clippy::missing_panics_doc)]    // The panic is not possible
    pub fn build(&mut self) -> Result<<#=this.commandName.GetTypeName(TargetLanguage.Rust, "request")#>, <#=this.commandName.GetTypeName(TargetLanguage.Rust, "request", "builder", "error")#>> {
<# if (this.doesCommandTargetExecutor) { #>
        if !self.set_executor_id {
            return Err(<#=this.commandName.GetTypeName(TargetLanguage.Rust, "request", "builder", "error")#>::UninitializedField(
                "executor_id",
            ));
        }

<# } #>
<# if (this.reqSchema == null) { #>
        self.inner_builder.payload(<#=this.serializerEmptyType.GetAllocator(TargetLanguage.Rust)#>).unwrap();

<# } #>
        self.inner_builder.topic_tokens(self.topic_tokens.clone());

        self.inner_builder.build()
    }
}

/// Command Invoker for `<#=this.commandName.AsGiven#>`
pub struct <#=this.commandName.GetTypeName(TargetLanguage.Rust, "command", "invoker")#><C>(
    CommandInvoker<<#=this.RequestType()#>, <#=this.ResponseType()#>, C>,
)
where
    C: ManagedClient + Clone + Send + Sync + 'static,
    C::PubReceiver: Send + Sync + 'static;

impl<C> <#=this.commandName.GetTypeName(TargetLanguage.Rust, "command", "invoker")#><C>
where
    C: ManagedClient + Clone + Send + Sync + 'static,
    C::PubReceiver: Send + Sync + 'static,
{
    /// Creates a new [`<#=this.commandName.GetTypeName(TargetLanguage.Rust, "command", "invoker")#>`]
    ///
    /// # Panics
    /// If the DTDL that generated this code was invalid
    pub fn new(application_context: ApplicationContext, client: C, options: &CommandOptions) -> Self {
        let mut invoker_options_builder = CommandInvokerOptionsBuilder::default();
        if let Some(topic_namespace) = &options.topic_namespace {
            invoker_options_builder.topic_namespace(topic_namespace.clone());
        }

        let mut topic_token_map: HashMap<String, String> = options
            .topic_token_map
            .clone()
            .into_iter()
            .map(|(k, v)| (format!("ex:{k}"), v))
            .collect();

        topic_token_map.insert("modelId".to_string(), MODEL_ID.to_string());
        topic_token_map.insert("invokerClientId".to_string(), client.client_id().to_string());
        topic_token_map.insert("commandName".to_string(), "<#=this.commandName.AsGiven#>".to_string());

        let invoker_options = invoker_options_builder
            .request_topic_pattern(REQUEST_TOPIC_PATTERN)
            .command_name("<#=this.commandName.AsGiven#>")
            .topic_token_map(topic_token_map)
            .build()
            .expect("DTDL schema generated invalid arguments");

        Self(
            CommandInvoker::new(application_context, client, invoker_options)
                .expect("DTDL schema generated invalid arguments"),
        )
    }

    /// Invokes the [`<#=this.commandName.GetTypeName(TargetLanguage.Rust, "request")#>`]
    ///
    /// # Errors
    /// [`AIOProtocolError`] if there is a failure invoking the request
    pub async fn invoke(
        &self,
        request: <#=this.commandName.GetTypeName(TargetLanguage.Rust, "request")#>,
    ) -> Result<<#=this.commandName.GetTypeName(TargetLanguage.Rust, "response")#>, AIOProtocolError> {
        self.0.invoke(request).await
    }

    /// Shutdown the [`<#=this.commandName.GetTypeName(TargetLanguage.Rust, "command", "invoker")#>`]. Unsubscribes from the response topic and cancels the receiver loop to drop the receiver and to prevent the task from looping indefinitely.
    ///
    /// Returns Ok(()) on success, otherwise returns [`AIOProtocolError`].
    /// # Errors
    /// [`AIOProtocolError`] of kind [`ClientError`](azure_iot_operations_protocol::common::aio_protocol_error::AIOProtocolErrorKind::ClientError) if the unsubscribe fails or if the unsuback reason code doesn't indicate success.
    pub async fn shutdown(&self) -> Result<(), AIOProtocolError> {
        self.0.shutdown().await
    }
}
<#+
    private string RequestType() => this.reqSchema?.GetTypeName(TargetLanguage.Rust) ?? this.serializerEmptyType.GetTypeName(TargetLanguage.Rust);

    private string ResponseType() => this.respSchema?.GetTypeName(TargetLanguage.Rust) ?? this.serializerEmptyType.GetTypeName(TargetLanguage.Rust);
#>
