<#@ template language="C#" linePragmas="false" #>
<#@ import namespace="Azure.Iot.Operations.ProtocolCompiler" #>
/* Code generated by Azure.Iot.Operations.ProtocolCompiler v<#=System.Reflection.Assembly.GetExecutingAssembly().GetName().Version#>; DO NOT EDIT. */

use std::collections::HashMap;

use azure_iot_operations_mqtt::interface::ManagedClient;
use azure_iot_operations_protocol::common::aio_protocol_error::AIOProtocolError;
<# if (this.respSchema != null) { #>
use azure_iot_operations_protocol::common::payload_serialize::PayloadSerialize;
<# } #>
use azure_iot_operations_protocol::rpc::command_executor::{
    CommandExecutor, CommandExecutorOptionsBuilder, CommandRequest, CommandResponse,
    CommandResponseBuilder, CommandResponseBuilderError,
};
<# if (this.ttl != null) { #>
use iso8601_duration;
<# } #>

<# if (this.reqSchema != null && this.reqSchema != "Bytes") { #>
use super::<#=NamingSupport.ToSnakeCase(this.reqSchema)#>::<#=this.reqSchema#>;
<# } #>
<# if (this.respSchema != null && this.respSchema != "Bytes") { #>
use super::<#=NamingSupport.ToSnakeCase(this.respSchema)#>::<#=this.respSchema#>;
<# } #>
<# if (this.useSharedSubscription) { #>
use super::COMMAND_SERVICE_GROUP_ID;
<# } #>
use super::MODEL_ID;
use super::REQUEST_TOPIC_PATTERN;
<# if (this.reqSchema == "Bytes" || this.respSchema == "Bytes") { #>
use crate::common_types::bytes::Bytes;
<# } #>
use crate::common_types::common_options::CommandOptions;
<# if (this.reqSchema == null || this.respSchema == null) { #>
use crate::common_types::<#=NamingSupport.ToSnakeCase(this.serializerEmptyType)#>::<#=this.serializerEmptyType#>;
<# } #>

pub type <#=this.capitalizedCommandName#>Request =
    CommandRequest<<#=this.RequestType()#>, <#=this.ResponseType()#>>;
pub type <#=this.capitalizedCommandName#>Response = CommandResponse<<#=this.ResponseType()#>>;
pub type <#=this.capitalizedCommandName#>ResponseBuilderError = CommandResponseBuilderError;

/// Builder for [`<#=this.capitalizedCommandName#>Response`]
#[derive(Default)]
pub struct <#=this.capitalizedCommandName#>ResponseBuilder {
    inner_builder: CommandResponseBuilder<<#=this.ResponseType()#>>,
}

impl <#=this.capitalizedCommandName#>ResponseBuilder {
    /// Custom user data to set on the response
    pub fn custom_user_data(&mut self, custom_user_data: Vec<(String, String)>) -> &mut Self {
        self.inner_builder.custom_user_data(custom_user_data);
        self
    }

<# if (this.respSchema != null) { #>
    /// Payload of the response
    ///
    /// # Errors
    /// If the payload cannot be serialized
    pub fn payload(
        &mut self,
        payload: &<#=this.respSchema#>,
    ) -> Result<&mut Self, <<#=this.respSchema#> as PayloadSerialize>::Error> {
        self.inner_builder.payload(payload)?;
        Ok(self)
    }

<# } #>
    /// Builds a new `<#=this.capitalizedCommandName#>Response`
    ///
    /// # Errors
    /// If a required field has not been initialized
    #[allow(clippy::missing_panics_doc)]    // The panic is not possible
    pub fn build(&mut self) -> Result<<#=this.capitalizedCommandName#>Response, <#=this.capitalizedCommandName#>ResponseBuilderError> {
<# if (this.respSchema == null) { #>
        self.inner_builder.payload(&EmptyJson {}).unwrap();

<# } #>
        self.inner_builder.build()
    }
}

/// Command Executor for `<#=this.capitalizedCommandName#>`
pub struct <#=this.capitalizedCommandName#>CommandExecutor<C>(
    CommandExecutor<<#=this.RequestType()#>, <#=this.ResponseType()#>, C>,
)
where
    C: ManagedClient + Clone + Send + Sync + 'static,
    C::PubReceiver: Send + Sync + 'static;

impl<C> <#=this.capitalizedCommandName#>CommandExecutor<C>
where
    C: ManagedClient + Clone + Send + Sync + 'static,
    C::PubReceiver: Send + Sync + 'static,
{
    /// Creates a new [`<#=this.capitalizedCommandName#>CommandExecutor`]
    ///
    /// # Panics
    /// If the DTDL that generated this code was invalid
    pub fn new(client: C, options: &CommandOptions) -> Self {
        let mut executor_options_builder = CommandExecutorOptionsBuilder::default();
        if let Some(topic_namespace) = &options.topic_namespace {
            executor_options_builder.topic_namespace(topic_namespace.clone());
        }

        let mut topic_token_map: HashMap<String, String> = options
            .topic_token_map
            .clone()
            .into_iter()
            .map(|(k, v)| (format!("ex:{k}"), v))
            .collect();

        topic_token_map.insert("modelId".to_string(), MODEL_ID.to_string());
        topic_token_map.insert("executorId".to_string(), client.client_id().to_string());
        topic_token_map.insert("commandName".to_string(), "<#=this.commandName#>".to_string());

        let executor_options = executor_options_builder
            .request_topic_pattern(REQUEST_TOPIC_PATTERN)
            .command_name("<#=this.commandName#>")
<# if (this.ttl != null) { #>
            .cacheable_duration(
                "<#=this.ttl#>"
                    .parse::<iso8601_duration::Duration>()
                    .unwrap()
                    .to_std()
                    .expect("TTL defined in DTDL schema exceeded maximum value"),
            )
<# } #>
            .is_idempotent(<#=this.isIdempotent ? "true" : "false"#>)
            .topic_token_map(topic_token_map)
<# if (this.useSharedSubscription) { #>
            .service_group_id(COMMAND_SERVICE_GROUP_ID.to_string())
<# } #>
            .build()
            .expect("DTDL schema generated invalid arguments");

        Self(
            CommandExecutor::new(client, executor_options)
                .expect("DTDL schema generated invalid arguments"),
        )
    }

    /// Receive the next [`<#=this.capitalizedCommandName#>Request`]
    ///
    /// # Errors
    /// [`AIOProtocolError`] if there is a failure receiving a request
    pub async fn recv(&mut self) -> Result<<#=this.capitalizedCommandName#>Request, AIOProtocolError> {
        self.0.recv().await
    }

    /// Shutdown the [`<#=this.capitalizedCommandName#>CommandExecutor`]. Unsubscribes from the request topic.
    ///
    /// Returns Ok(()) on success, otherwise returns [`AIOProtocolError`].
    /// # Errors
    /// [`AIOProtocolError`] of kind [`ClientError`](azure_iot_operations_protocol::common::aio_protocol_error::AIOProtocolErrorKind::ClientError) if the unsubscribe fails or if the unsuback reason code doesn't indicate success.
    pub async fn shutdown(&mut self) -> Result<(), AIOProtocolError> {
        self.0.shutdown().await
    }
}
<#+
    private string RequestType() => this.reqSchema ?? this.serializerEmptyType;

    private string ResponseType() => this.respSchema ?? this.serializerEmptyType;
#>
