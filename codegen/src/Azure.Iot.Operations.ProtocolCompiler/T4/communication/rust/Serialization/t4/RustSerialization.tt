<#@ template language="C#" linePragmas="false" #>
<#@ import namespace="Azure.Iot.Operations.ProtocolCompiler" #>
/* Code generated by Azure.Iot.Operations.ProtocolCompiler v<#=System.Reflection.Assembly.GetExecutingAssembly().GetName().Version#>; DO NOT EDIT. */
#![allow(non_camel_case_types)]

<# if (this.stdHeaders.Any()) { #>
<# foreach (string header in this.stdHeaders) { #>
<#=header#>
<# } #>

<# } #>
<# if (this.extHeaders.Any()) { #>
use azure_iot_operations_protocol::common::payload_serialize::{FormatIndicator, PayloadSerialize};
<# foreach (string header in this.extHeaders) { #>
<#=header#>
<# } #>

<# } #>
use super::<#=this.schemaModuleName#>::<#=this.schemaClassName#>;

impl PayloadSerialize for <#=this.schemaClassName#> {
<# if (this.serdeLib != null) { #>
    type Error = <#=this.serdeLib#>::Error;

<# } #>
    fn content_type() -> &'static str {
        "<#=this.contentType#>"
    }

    fn format_indicator() -> FormatIndicator {
        FormatIndicator::<#=this.formatIndicator#>
    }

    fn serialize(&self) -> Result<Vec<u8>, Self::Error> {
<# foreach (string serializeLine in this.serializeCode) { #>
        <#=serializeLine#>
<# } #>
    }

    fn deserialize(payload: &[u8]) -> Result<Self, Self::Error> {
<# foreach (string deserializeLine in this.deserializeCode) { #>
        <#=deserializeLine#>
<# } #>
    }
}
<# if (this.schemaCode != null) { #>

<#=this.schemaCode#>

const RAW_SCHEMA: &str = r#"
<#=this.schemaText#>
"#;
<# } #>
