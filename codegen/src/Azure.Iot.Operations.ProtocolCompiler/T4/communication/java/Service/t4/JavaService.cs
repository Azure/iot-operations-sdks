// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Azure.Iot.Operations.ProtocolCompiler
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class JavaService : JavaServiceBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("/* This is an auto-generated file.  Do not modify. */\r\n\r\npackage ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.genNamespace));
            this.Write(";\r\n\r\nimport java.util.concurrent.Future;\r\nimport java.util.HashMap;\r\n\r\nimport org" +
                    ".eclipse.paho.mqttv5.client.IMqttAsyncClient;\r\nimport org.eclipse.paho.mqttv5.cl" +
                    "ient.IMqttToken;\r\n\r\nimport DtdlMqtt.Communication.CommunicationOptions;\r\n");
 if (this.cmdNameReqResps.Any() || this.telemSchemas.Any()) { 
            this.Write("import DtdlMqtt.Communication.InboundMessageDemux;\r\n");
 } 
            this.Write("import DtdlMqtt.Communication.ModelId;\r\n");
 if (this.commandTopic != null) { 
            this.Write("import DtdlMqtt.Communication.CommandTopic;\r\n");
 } 
 if (this.telemetryTopic != null) { 
            this.Write("import DtdlMqtt.Communication.TelemetryTopic;\r\n");
 } 
 if (this.commandTopic != null && !this.doesCommandTargetExecutor) { 
            this.Write("import DtdlMqtt.Communication.ServiceGroupId;\r\n");
 } 
            this.Write("\r\n@ModelId(id = \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.modelId));
            this.Write("\")\r\n");
 if (this.commandTopic != null) { 
            this.Write("@CommandTopic(requestTopic = \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.commandTopic));
            this.Write("\")\r\n");
 } 
 if (this.telemetryTopic != null) { 
            this.Write("@TelemetryTopic(topic = \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.telemetryTopic));
            this.Write("\")\r\n");
 } 
 if (this.commandTopic != null && !this.doesCommandTargetExecutor) { 
            this.Write("@ServiceGroupId(id = \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(Defaults.ServiceGroupId));
            this.Write("\")\r\n");
 } 
            this.Write("public class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.serviceName));
            this.Write(" {\r\n    public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.cmdNameReqResps.Any() ? "abstract " : ""));
            this.Write("class Service {\r\n");
 if (this.cmdNameReqResps.Any()) { 
            this.Write("        private final InboundMessageDemux demux;\r\n");
 } 
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("        private final ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(cmdNameReqResp.Item1)));
            this.Write("CommandExecutor ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("CommandExecutor;\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("        private final ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(telemSchema)));
            this.Write("Sender ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(telemSchema)));
            this.Write("Sender;\r\n");
 } 
            this.Write("\r\n        private CommunicationOptions communicationOptions;\r\n\r\n        public Ha" +
                    "shMap<String, String> CustomTopicTokenMap;\r\n\r\n        public Service(IMqttAsyncC" +
                    "lient mqttClient) throws Exception {\r\n            this.CustomTopicTokenMap = new" +
                    " HashMap();\r\n");
 if (this.cmdNameReqResps.Any()) { 
            this.Write("            this.demux = new InboundMessageDemux(mqttClient);\r\n");
 } 
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("CommandExecutor = new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(cmdNameReqResp.Item1)));
            this.Write("CommandExecutor(mqttClient, this.demux, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.serviceName));
            this.Write(".class.getAnnotation(CommandTopic.class).requestTopic(), ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.CmdModelIdProp()));
            this.Write(", this.CustomTopicTokenMap);\r\n            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("CommandExecutor.setOnCommandReceived(this::");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write(");\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(telemSchema)));
            this.Write("Sender = new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(telemSchema)));
            this.Write("Sender(mqttClient, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.serviceName));
            this.Write(".class.getAnnotation(TelemetryTopic.class).topic(), ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TelemModelIdProp()));
            this.Write(", this.CustomTopicTokenMap);\r\n");
 } 
            this.Write("\r\n            CommunicationOptions communicationOptions = new CommunicationOption" +
                    "s();\r\n");
 if (this.commandTopic != null && !this.doesCommandTargetExecutor) { 
            this.Write("            communicationOptions.sharedSubscriptionId = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.serviceName));
            this.Write(".class.getAnnotation(ServiceGroupId.class).id();\r\n");
 } 
            this.Write(@"            this.setCommunicationOptions(communicationOptions);
        }

        public CommunicationOptions getCommunicationOptions() {
            return this.communicationOptions;
        }

        public void setCommunicationOptions(CommunicationOptions communicationOptions) {
            this.communicationOptions = communicationOptions;
");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("CommandExecutor.setCommunicationOptions(communicationOptions);\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(telemSchema)));
            this.Write("Sender.setCommunicationOptions(communicationOptions);\r\n");
 } 
            this.Write("        }\r\n\r\n        public void setTopicNamespace(String topicNamespace) {\r\n");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("CommandExecutor.setTopicNamespace(topicNamespace);\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(telemSchema)));
            this.Write("Sender.setTopicNamespace(topicNamespace);\r\n");
 } 
            this.Write("        }\r\n");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("\r\n        public abstract ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.RespType(cmdNameReqResp, "void")));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ReqType(cmdNameReqResp)));
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ReqArg(cmdNameReqResp)));
            this.Write(");\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("\r\n        public IMqttToken sendTelemetry(");
            this.Write(this.ToStringHelper.ToStringWithCulture(telemSchema));
            this.Write(" telemetry) throws Exception {\r\n            return this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(telemSchema)));
            this.Write("Sender.sendTelemetry(telemetry);\r\n        }\r\n");
 } 
 if (this.cmdNameReqResps.Any()) { 
            this.Write("\r\n        public void start() throws Exception {\r\n");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("CommandExecutor.start();\r\n");
 } 
            this.Write("            this.demux.start();\r\n        }\r\n\r\n        public void stop() throws E" +
                    "xception {\r\n");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("CommandExecutor.stop();\r\n");
 } 
            this.Write("        }\r\n");
 } 
            this.Write("    }\r\n\r\n    public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.telemSchemas.Any() ? "abstract " : ""));
            this.Write("class Client {\r\n");
 if (this.cmdNameReqResps.Any() || this.telemSchemas.Any()) { 
            this.Write("        private final InboundMessageDemux demux;\r\n");
 } 
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("        private final ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(cmdNameReqResp.Item1)));
            this.Write("CommandInvoker ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("CommandInvoker;\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("        private final ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(telemSchema)));
            this.Write("Receiver ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(telemSchema)));
            this.Write("Receiver;\r\n");
 } 
            this.Write("\r\n        private CommunicationOptions communicationOptions;\r\n\r\n        public Ha" +
                    "shMap<String, String> CustomTopicTokenMap;\r\n\r\n        public Client(IMqttAsyncCl" +
                    "ient mqttClient) throws Exception {\r\n            this.CustomTopicTokenMap = new " +
                    "HashMap();\r\n");
 if (this.cmdNameReqResps.Any() || this.telemSchemas.Any()) { 
            this.Write("            this.demux = new InboundMessageDemux(mqttClient);\r\n");
 } 
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("CommandInvoker = new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(cmdNameReqResp.Item1)));
            this.Write("CommandInvoker(mqttClient, this.demux, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.serviceName));
            this.Write(".class.getAnnotation(CommandTopic.class).requestTopic(), ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.CmdModelIdProp()));
            this.Write(", this.CustomTopicTokenMap);\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(telemSchema)));
            this.Write("Receiver = new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(telemSchema)));
            this.Write("Receiver(mqttClient, this.demux, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.serviceName));
            this.Write(".class.getAnnotation(TelemetryTopic.class).topic(), ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TelemModelIdProp()));
            this.Write(", this.CustomTopicTokenMap);\r\n            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(telemSchema)));
            this.Write("Receiver.setOnTelemetryReceived(this::receive");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(telemSchema)));
            this.Write(");\r\n");
 } 
            this.Write(@"
            this.setCommunicationOptions(new CommunicationOptions());
        }

        public CommunicationOptions getCommunicationOptions() {
            return this.communicationOptions;
        }

        public void setCommunicationOptions(CommunicationOptions communicationOptions) {
            this.communicationOptions = communicationOptions;
");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("CommandInvoker.setCommunicationOptions(communicationOptions);\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(telemSchema)));
            this.Write("Receiver.setCommunicationOptions(communicationOptions);\r\n");
 } 
            this.Write("        }\r\n\r\n        public void setTopicNamespace(String topicNamespace) {\r\n");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("CommandInvoker.setTopicNamespace(topicNamespace);\r\n");
 } 
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(telemSchema)));
            this.Write("Receiver.setTopicNamespace(topicNamespace);\r\n");
 } 
            this.Write("        }\r\n");
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("\r\n        public abstract void receive");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsUpper(telemSchema)));
            this.Write("(String senderId, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(telemSchema));
            this.Write(" telemetry);\r\n");
 } 
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("\r\n        public Future<");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.RespType(cmdNameReqResp, "?")));
            this.Write("> ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ExecParam()));
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ReqParamSep(cmdNameReqResp)));
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ReqType(cmdNameReqResp)));
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ReqArg(cmdNameReqResp)));
            this.Write(") throws Exception {\r\n            return this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(cmdNameReqResp.Item1)));
            this.Write("CommandInvoker.invokeCommand(");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ExecArg()));
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ReqArgSep(cmdNameReqResp)));
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ReqArg(cmdNameReqResp)));
            this.Write(");\r\n        }\r\n");
 } 
 if (this.cmdNameReqResps.Any() || this.telemSchemas.Any()) { 
            this.Write("\r\n        public void start() throws Exception {\r\n");
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(telemSchema)));
            this.Write("Receiver.start();\r\n");
 } 
            this.Write("            this.demux.start();\r\n        }\r\n\r\n        public void stop() throws E" +
                    "xception {\r\n");
 foreach (string telemSchema in this.telemSchemas) { 
            this.Write("            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsLower(telemSchema)));
            this.Write("Receiver.stop();\r\n");
 } 
            this.Write("        }\r\n");
 } 
            this.Write("    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }

    private string ReqType((string, string, string) cmdNameReqResp) => cmdNameReqResp.Item2 != null ? $"{this.SchemaType(cmdNameReqResp.Item2)} " : "";

    private string ReqArg((string, string, string) cmdNameReqResp) => cmdNameReqResp.Item2 != null ? "request" : "";

    private string ReqParamSep((string, string, string) cmdNameReqResp) => cmdNameReqResp.Item2 != null && this.doesCommandTargetExecutor ? ", " : "";

    private string ReqArgSep((string, string, string) cmdNameReqResp) => cmdNameReqResp.Item2 != null ? ", " : "";

    private string RespType((string, string, string) cmdNameReqResp, string asNone) => cmdNameReqResp.Item3 != null ? this.SchemaType(cmdNameReqResp.Item3) : asNone;

    private string SchemaType(string schema) => schema != "" ? schema : "byte[]";

    private string ExecParam() => this.doesCommandTargetExecutor ? "String executorId" : "";

    private string ExecArg() => this.doesCommandTargetExecutor ? "executorId" : "\"\"";

    private string CmdModelIdProp() => this.doesCommandTargetService ? $"{this.serviceName}.class.getAnnotation(ModelId.class).id()" : "null";

    private string TelemModelIdProp() => this.doesTelemetryTargetService ? $"{this.serviceName}.class.getAnnotation(ModelId.class).id()" : "null";

    private string AsUpper(string name) => char.ToUpperInvariant(name[0]) + name.Substring(1);

    private string AsLower(string name) => char.ToLowerInvariant(name[0]) + name.Substring(1);

    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class JavaServiceBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
