<#@ template language="C#" linePragmas="false" #>
/* Code generated by Azure.Iot.Operations.ProtocolCompiler v<#=System.Reflection.Assembly.GetExecutingAssembly().GetName().Version#>; DO NOT EDIT. */

package <#=this.genNamespace.GetTypeName(TargetLanguage.Java)#>;

import java.util.concurrent.Future;
import java.util.HashMap;

import org.eclipse.paho.mqttv5.client.IMqttAsyncClient;
import org.eclipse.paho.mqttv5.client.IMqttToken;

import DtdlMqtt.Communication.CommunicationOptions;
<# if (this.cmdNameReqResps.Any() || this.telemSchemas.Any()) { #>
import DtdlMqtt.Communication.InboundMessageDemux;
<# } #>
import DtdlMqtt.Communication.ModelId;
<# if (this.commandTopic != null) { #>
import DtdlMqtt.Communication.CommandTopic;
<# } #>
<# if (this.telemetryTopic != null) { #>
import DtdlMqtt.Communication.TelemetryTopic;
<# } #>
<# if (this.commandTopic != null && !this.doesCommandTargetExecutor) { #>
import DtdlMqtt.Communication.ServiceGroupId;
<# } #>

@ModelId(id = "<#=this.modelId#>")
<# if (this.commandTopic != null) { #>
@CommandTopic(requestTopic = "<#=this.commandTopic#>")
<# } #>
<# if (this.telemetryTopic != null) { #>
@TelemetryTopic(topic = "<#=this.telemetryTopic#>")
<# } #>
public class <#=this.serviceName#> {
<# if (this.cmdServiceGroupId != null) { #>
    @ServiceGroupId(id = "<#=this.cmdServiceGroupId#>")
<# } #>
    public <#=this.cmdNameReqResps.Any() ? "abstract " : ""#>class Service {
<# if (this.cmdNameReqResps.Any()) { #>
        private final InboundMessageDemux demux;
<# } #>
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
        private final <#=this.AsUpper(cmdNameReqResp.Item1)#>CommandExecutor <#=this.AsLower(cmdNameReqResp.Item1)#>CommandExecutor;
<# } #>
<# foreach (string telemSchema in this.telemSchemas) { #>
        private final <#=this.AsUpper(telemSchema)#>Sender <#=this.AsLower(telemSchema)#>Sender;
<# } #>

        private CommunicationOptions communicationOptions;

        public HashMap<String, String> CustomTopicTokenMap;

        public Service(IMqttAsyncClient mqttClient) throws Exception {
            this.CustomTopicTokenMap = new HashMap();
<# if (this.cmdNameReqResps.Any()) { #>
            this.demux = new InboundMessageDemux(mqttClient);
<# } #>
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
            this.<#=this.AsLower(cmdNameReqResp.Item1)#>CommandExecutor = new <#=this.AsUpper(cmdNameReqResp.Item1)#>CommandExecutor(mqttClient, this.demux, <#=this.serviceName#>.class.getAnnotation(CommandTopic.class).requestTopic(), <#=this.CmdModelIdProp()#>, this.CustomTopicTokenMap);
            this.<#=this.AsLower(cmdNameReqResp.Item1)#>CommandExecutor.setOnCommandReceived(this::<#=this.AsLower(cmdNameReqResp.Item1)#>);
<# } #>
<# foreach (string telemSchema in this.telemSchemas) { #>
            this.<#=this.AsLower(telemSchema)#>Sender = new <#=this.AsUpper(telemSchema)#>Sender(mqttClient, <#=this.serviceName#>.class.getAnnotation(TelemetryTopic.class).topic(), <#=this.TelemModelIdProp()#>, this.CustomTopicTokenMap);
<# } #>

            CommunicationOptions communicationOptions = new CommunicationOptions();
<# if (this.commandTopic != null && !this.doesCommandTargetExecutor) { #>
            communicationOptions.sharedSubscriptionId = <#=this.serviceName#>.class.getAnnotation(ServiceGroupId.class).id();
<# } #>
            this.setCommunicationOptions(communicationOptions);
        }

        public CommunicationOptions getCommunicationOptions() {
            return this.communicationOptions;
        }

        public void setCommunicationOptions(CommunicationOptions communicationOptions) {
            this.communicationOptions = communicationOptions;
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
            this.<#=this.AsLower(cmdNameReqResp.Item1)#>CommandExecutor.setCommunicationOptions(communicationOptions);
<# } #>
<# foreach (string telemSchema in this.telemSchemas) { #>
            this.<#=this.AsLower(telemSchema)#>Sender.setCommunicationOptions(communicationOptions);
<# } #>
        }

        public void setTopicNamespace(String topicNamespace) {
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
            this.<#=this.AsLower(cmdNameReqResp.Item1)#>CommandExecutor.setTopicNamespace(topicNamespace);
<# } #>
<# foreach (string telemSchema in this.telemSchemas) { #>
            this.<#=this.AsLower(telemSchema)#>Sender.setTopicNamespace(topicNamespace);
<# } #>
        }
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>

        public abstract <#=this.RespType(cmdNameReqResp, "void")#> <#=this.AsLower(cmdNameReqResp.Item1)#>(<#=this.ReqType(cmdNameReqResp)#><#=this.ReqArg(cmdNameReqResp)#>);
<# } #>
<# foreach (string telemSchema in this.telemSchemas) { #>

        public IMqttToken sendTelemetry(<#=telemSchema#> telemetry) throws Exception {
            return this.<#=this.AsLower(telemSchema)#>Sender.sendTelemetry(telemetry);
        }
<# } #>
<# if (this.cmdNameReqResps.Any()) { #>

        public void start() throws Exception {
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
            this.<#=this.AsLower(cmdNameReqResp.Item1)#>CommandExecutor.start();
<# } #>
            this.demux.start();
        }

        public void stop() throws Exception {
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
            this.<#=this.AsLower(cmdNameReqResp.Item1)#>CommandExecutor.stop();
<# } #>
        }
<# } #>
    }

<# if (this.telemServiceGroupId != null) { #>
    @ServiceGroupId(id = "<#=this.telemServiceGroupId#>")
<# } #>
    public <#=this.telemSchemas.Any() ? "abstract " : ""#>class Client {
<# if (this.cmdNameReqResps.Any() || this.telemSchemas.Any()) { #>
        private final InboundMessageDemux demux;
<# } #>
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
        private final <#=this.AsUpper(cmdNameReqResp.Item1)#>CommandInvoker <#=this.AsLower(cmdNameReqResp.Item1)#>CommandInvoker;
<# } #>
<# foreach (string telemSchema in this.telemSchemas) { #>
        private final <#=this.AsUpper(telemSchema)#>Receiver <#=this.AsLower(telemSchema)#>Receiver;
<# } #>

        private CommunicationOptions communicationOptions;

        public HashMap<String, String> CustomTopicTokenMap;

        public Client(IMqttAsyncClient mqttClient) throws Exception {
            this.CustomTopicTokenMap = new HashMap();
<# if (this.cmdNameReqResps.Any() || this.telemSchemas.Any()) { #>
            this.demux = new InboundMessageDemux(mqttClient);
<# } #>
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
            this.<#=this.AsLower(cmdNameReqResp.Item1)#>CommandInvoker = new <#=this.AsUpper(cmdNameReqResp.Item1)#>CommandInvoker(mqttClient, this.demux, <#=this.serviceName#>.class.getAnnotation(CommandTopic.class).requestTopic(), <#=this.CmdModelIdProp()#>, this.CustomTopicTokenMap);
<# } #>
<# foreach (string telemSchema in this.telemSchemas) { #>
            this.<#=this.AsLower(telemSchema)#>Receiver = new <#=this.AsUpper(telemSchema)#>Receiver(mqttClient, this.demux, <#=this.serviceName#>.class.getAnnotation(TelemetryTopic.class).topic(), <#=this.TelemModelIdProp()#>, this.CustomTopicTokenMap);
            this.<#=this.AsLower(telemSchema)#>Receiver.setOnTelemetryReceived(this::receive<#=this.AsUpper(telemSchema)#>);
<# } #>

            this.setCommunicationOptions(new CommunicationOptions());
        }

        public CommunicationOptions getCommunicationOptions() {
            return this.communicationOptions;
        }

        public void setCommunicationOptions(CommunicationOptions communicationOptions) {
            this.communicationOptions = communicationOptions;
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
            this.<#=this.AsLower(cmdNameReqResp.Item1)#>CommandInvoker.setCommunicationOptions(communicationOptions);
<# } #>
<# foreach (string telemSchema in this.telemSchemas) { #>
            this.<#=this.AsLower(telemSchema)#>Receiver.setCommunicationOptions(communicationOptions);
<# } #>
        }

        public void setTopicNamespace(String topicNamespace) {
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
            this.<#=this.AsLower(cmdNameReqResp.Item1)#>CommandInvoker.setTopicNamespace(topicNamespace);
<# } #>
<# foreach (string telemSchema in this.telemSchemas) { #>
            this.<#=this.AsLower(telemSchema)#>Receiver.setTopicNamespace(topicNamespace);
<# } #>
        }
<# foreach (string telemSchema in this.telemSchemas) { #>

        public abstract void receive<#=this.AsUpper(telemSchema)#>(String senderId, <#=telemSchema#> telemetry);
<# } #>
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>

        public Future<<#=this.RespType(cmdNameReqResp, "?")#>> <#=this.AsLower(cmdNameReqResp.Item1)#>(<#=this.ExecParam()#><#=this.ReqParamSep(cmdNameReqResp)#><#=this.ReqType(cmdNameReqResp)#><#=this.ReqArg(cmdNameReqResp)#>) throws Exception {
            return this.<#=this.AsLower(cmdNameReqResp.Item1)#>CommandInvoker.invokeCommand(<#=this.ExecArg()#><#=this.ReqArgSep(cmdNameReqResp)#><#=this.ReqArg(cmdNameReqResp)#>);
        }
<# } #>
<# if (this.cmdNameReqResps.Any() || this.telemSchemas.Any()) { #>

        public void start() throws Exception {
<# foreach (string telemSchema in this.telemSchemas) { #>
            this.<#=this.AsLower(telemSchema)#>Receiver.start();
<# } #>
            this.demux.start();
        }

        public void stop() throws Exception {
<# foreach (string telemSchema in this.telemSchemas) { #>
            this.<#=this.AsLower(telemSchema)#>Receiver.stop();
<# } #>
        }
<# } #>
    }
}
<#+
    private string ReqType((string, string, string) cmdNameReqResp) => cmdNameReqResp.Item2 != null ? $"{this.SchemaType(cmdNameReqResp.Item2)} " : "";

    private string ReqArg((string, string, string) cmdNameReqResp) => cmdNameReqResp.Item2 != null ? "request" : "";

    private string ReqParamSep((string, string, string) cmdNameReqResp) => cmdNameReqResp.Item2 != null && this.doesCommandTargetExecutor ? ", " : "";

    private string ReqArgSep((string, string, string) cmdNameReqResp) => cmdNameReqResp.Item2 != null ? ", " : "";

    private string RespType((string, string, string) cmdNameReqResp, string asNone) => cmdNameReqResp.Item3 != null ? this.SchemaType(cmdNameReqResp.Item3) : asNone;

    private string SchemaType(string schema) => schema != "" ? schema : "byte[]";

    private string ExecParam() => this.doesCommandTargetExecutor ? "String executorId" : "";

    private string ExecArg() => this.doesCommandTargetExecutor ? "executorId" : "\"\"";

    private string CmdModelIdProp() => this.doesCommandTargetService ? $"{this.serviceName}.class.getAnnotation(ModelId.class).id()" : "null";

    private string TelemModelIdProp() => this.doesTelemetryTargetService ? $"{this.serviceName}.class.getAnnotation(ModelId.class).id()" : "null";

    private string AsUpper(string name) => char.ToUpperInvariant(name[0]) + name.Substring(1);

    private string AsLower(string name) => char.ToLowerInvariant(name[0]) + name.Substring(1);
#>
