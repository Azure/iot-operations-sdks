<#@ template language="C#" linePragmas="false" #>
/* Code generated by Azure.Iot.Operations.ProtocolCompiler v<#=System.Reflection.Assembly.GetExecutingAssembly().GetName().Version#>; DO NOT EDIT. */

package <#=this.genNamespace#>;

import java.util.HashMap;

import org.eclipse.paho.mqttv5.client.IMqttAsyncClient;

import DtdlMqtt.Communication.Command.<#=this.BaseClassName("CommandExecutor")#>;
import DtdlMqtt.Communication.InboundMessageDemux;
import DtdlMqtt.Serialization.<#=this.serializerSubNamespace#>.<#=string.Format(this.serializerClassName, this.SchemaCount())#>;

public class <#=this.capitalizedCommandName#>CommandExecutor extends <#=this.BaseClassName("CommandExecutor")#><#=this.TypeParams()#> {
    <#=this.capitalizedCommandName#>CommandExecutor(IMqttAsyncClient mqttClient, InboundMessageDemux demux, String requestTopic, String modelId, HashMap<String, String> customTopicTokenMap) throws Exception {
        super(mqttClient, demux, "<#=this.commandName#>", new <#=string.Format(this.serializerClassName, $"{this.SchemaCount()}{this.TypeParams()}")#>(<#=this.ClassArgs(needDelim:false)#>)<#=this.ClassArgs(needDelim:true)#>, modelId, requestTopic, customTopicTokenMap);
    }
}
<#+
    private string BaseClassName(string suffix) => this.respSchema != null ?
        (this.reqSchema != null ? $"Func{suffix}" : $"Supp{suffix}") :
        (this.reqSchema != null ? $"Cons{suffix}" : $"Bare{suffix}");

    private string TypeParams() => this.respSchema != null ?
        (this.reqSchema != null ? $"<{this.reqSchema}, {this.respSchema}>" : $"<{this.respSchema}>") :
        (this.reqSchema != null ? $"<{this.reqSchema}>" : "");

    private string ClassArgs(bool needDelim)
    {
        string optDelim = needDelim ? ", " : "";
        return this.respSchema != null ?
            (this.reqSchema != null ? $"{optDelim}{this.reqSchema}.class, {this.respSchema}.class" : $"{optDelim}{this.respSchema}.class") :
            (this.reqSchema != null ? $"{optDelim}{this.reqSchema}.class" : "");
    }

    private int SchemaCount() => (reqSchema != null ? 1 : 0) + (respSchema != null ? 1 : 0);
#>
