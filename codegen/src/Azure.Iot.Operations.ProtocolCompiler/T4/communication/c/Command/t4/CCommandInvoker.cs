// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Azure.Iot.Operations.ProtocolCompiler
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class CCommandInvoker : CCommandInvokerBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("/* This is an auto-generated file.  Do not modify. */\r\n\r\n#ifndef ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetFullyQualifiedName().ToUpper()));
            this.Write("_INVOKER_H\r\n#define ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetFullyQualifiedName().ToUpper()));
            this.Write("_INVOKER_H\r\n\r\n#include <azure/az_core.h>\r\n#include <azure/core/az_mqtt5_rpc.h>\r\n#" +
                    "include <azure/core/az_mqtt5_rpc_client.h>\r\n#include <azure/core/az_mqtt5_rpc_se" +
                    "rver.h>\r\n\r\n");
 if (this.reqSchema != null) { 
            this.Write("#include \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.reqSchema));
            this.Write(".h\"\r\n");
 } 
 if (this.respSchema != null) { 
            this.Write("#include \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.respSchema));
            this.Write(".h\"\r\n");
 } 
            this.Write("\r\n#ifndef ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetFullyQualifiedServiceName().ToUpper()));
            this.Write("_MODEL_ID\r\n#define ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetFullyQualifiedServiceName().ToUpper()));
            this.Write("_MODEL_ID\r\nstatic const az_span ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetFullyQualifiedServiceName().ToLower()));
            this.Write("_model_id = AZ_SPAN_LITERAL_FROM_STR(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.modelId));
            this.Write("\");\r\n#endif // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetFullyQualifiedServiceName().ToUpper()));
            this.Write("_MODEL_ID\r\n\r\n#ifndef ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetFullyQualifiedServiceName().ToUpper()));
            this.Write("_REQUEST_TOPIC_FORMAT\r\n#define ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetFullyQualifiedServiceName().ToUpper()));
            this.Write("_REQUEST_TOPIC_FORMAT\r\nstatic const az_span ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetFullyQualifiedServiceName().ToLower()));
            this.Write("_request_topic_format = AZ_SPAN_FROM_STR(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRequestTopicFormat()));
            this.Write("\");\r\n#endif // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetFullyQualifiedServiceName().ToUpper()));
            this.Write("_REQUEST_TOPIC_FORMAT\r\n\r\n#ifndef ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetFullyQualifiedServiceName().ToUpper()));
            this.Write("_RESPONSE_TOPIC_FORMAT\r\n#define ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetFullyQualifiedServiceName().ToUpper()));
            this.Write("_RESPONSE_TOPIC_FORMAT\r\nstatic const az_span ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetFullyQualifiedServiceName().ToLower()));
            this.Write("_response_topic_format = AZ_SPAN_FROM_STR(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetResponseTopicFormat()));
            this.Write("\");\r\n#endif // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetFullyQualifiedServiceName().ToUpper()));
            this.Write("_RESPONSE_TOPIC_FORMAT\r\n\r\n#ifndef ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetFullyQualifiedName().ToUpper()));
            this.Write("_COMMAND_NAME\r\n#define ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetFullyQualifiedName().ToUpper()));
            this.Write("_COMMAND_NAME\r\nstatic const az_span ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetFullyQualifiedName().ToLower()));
            this.Write("_command_name = AZ_SPAN_LITERAL_FROM_STR(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.commandName));
            this.Write("\");\r\n#endif // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetFullyQualifiedName().ToUpper()));
            this.Write("_COMMAND_NAME\r\n\r\n#ifndef ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetFullyQualifiedName().ToUpper()));
            this.Write("_PAYLOAD_CONTENT_TYPE\r\n#define ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetFullyQualifiedName().ToUpper()));
            this.Write("_PAYLOAD_CONTENT_TYPE\r\nstatic const az_span ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetFullyQualifiedName().ToLower()));
            this.Write("_payload_content_type = AZ_SPAN_FROM_STR(\"application/json\");\r\n#endif // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetFullyQualifiedName().ToUpper()));
            this.Write(@"_PAYLOAD_CONTENT_TYPE

/**
 * @brief Populates a RPC request to be submitted with `az_mqtt5_rpc_client_invoke_begin`.
 * @param[out] command_data Pointer to the `az_mqtt5_rpc_client_invoke_req_event_data` to be populated.
 * @param[in] server_client_id Id of the executor of the RPC command.
 * @param[in] correlation_id Correlation ID of this RPC command request.
");
 if (this.reqSchema != null) { 
            this.Write(" * @param[in] command_request Instance of `");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.reqSchema));
            this.Write(@"` to be
 *                            serialized and set as payload of the RPC command request.
 * @param[in] payload_buffer Buffer where to serialize the payload into.
 * @param[in] payload_buffer_size Size (in bytes) of \p payload_buffer.
 * @param[out] out_payload_buffer_length __[nullable]__ Contains the data length, in bytes, of
 *                                                  \p payload_buffer. Can be `NULL`.
 ");
 } 
            this.Write(" * @return An #az_result value indicating the result of the operation.\r\n */\r\nAZ_I" +
                    "NLINE az_result ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetFullyQualifiedName().ToLower()));
            this.Write("_create_request(\r\n    az_mqtt5_rpc_client_invoke_req_event_data* command_data,\r\n " +
                    "   az_span server_client_id,\r\n");
 if (this.reqSchema == null) { 
            this.Write("    az_span correlation_id)\r\n");
 } else { 
            this.Write("    az_span correlation_id,\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.reqSchema));
            this.Write("* command_request,\r\n    char* payload_buffer,\r\n    size_t payload_buffer_size,\r\n " +
                    "   size_t* out_payload_buffer_length)\r\n ");
 } 
            this.Write("{\r\n  _az_PRECONDITION_NOT_NULL(command_data);\r\n  _az_PRECONDITION_VALID_SPAN(serv" +
                    "er_client_id, 1, false);\r\n  _az_PRECONDITION_VALID_SPAN(correlation_id, 1, false" +
                    ");\r\n\r\n");
 if (this.reqSchema != null) { 
            this.Write(@"  az_span payload;

  if (command_request == NULL)
  {
    payload = AZ_SPAN_EMPTY;
  }
  else
  {
    _az_PRECONDITION_NOT_NULL(payload_buffer);

    az_span remainder;
    size_t serialized_payload_length;
    char* serialized_payload = cJSON_Print");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.reqSchema));
            this.Write(@"(command_request);

    if (serialized_payload == NULL)
    {
      // It could be any other error, but this is the best match.
      return AZ_ERROR_OUT_OF_MEMORY;
    }

    serialized_payload_length = strlen(serialized_payload);

    if (payload_buffer_size < serialized_payload_length)
    {
      free(serialized_payload);
      return AZ_ERROR_NOT_ENOUGH_SPACE;
    }

    payload = az_span_create((uint8_t*)payload_buffer, payload_buffer_size);

    remainder = az_span_copy(
      payload, az_span_create((uint8_t*)serialized_payload, serialized_payload_length));
    payload = az_span_slice(payload, 0, az_span_size(payload) - az_span_size(remainder));

    free(serialized_payload);

    if (out_payload_buffer_length != NULL)
    {
      *out_payload_buffer_length = az_span_size(payload);
    }
  }
 ");
 } 
            this.Write("\r\n  command_data->correlation_id = correlation_id;\r\n  command_data->content_type " +
                    "= ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetFullyQualifiedName().ToLower()));
            this.Write("_payload_content_type;\r\n  command_data->command_name = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetFullyQualifiedName().ToLower()));
            this.Write("_command_name;\r\n  command_data->rpc_server_client_id = server_client_id;\r\n");
 if (this.reqSchema != null) { 
            this.Write("  command_data->request_payload = payload;\r\n");
 } else { 
            this.Write("  command_data->request_payload = AZ_SPAN_EMPTY;\r\n");
 } 
            this.Write("\r\n  return AZ_OK;\r\n}\r\n\r\n");
 if (this.respSchema != null) { 
            this.Write("/**\r\n * @brief Parses the raw payload of an RPC response.\r\n * @remark This functi" +
                    "on does allocate memory dynamically.\r\n *         `command_response` must be free" +
                    "d with `");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetFullyQualifiedName().ToLower()));
            this.Write(@"_destroy_response`.
 * @param[in] recv_data Pointer to `az_mqtt5_rpc_client_rsp_event_data` with the received RPC response data.
 * @param[out] command_response Pointer where to store the parsed payload.
 * @return An #az_result value indicating the result of the operation.
 */
AZ_INLINE az_result ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetFullyQualifiedName().ToLower()));
            this.Write("_parse_response(\r\n  az_mqtt5_rpc_client_rsp_event_data* recv_data, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.respSchema));
            this.Write("** command_response)\r\n{\r\n  _az_PRECONDITION_NOT_NULL(recv_data);\r\n  _az_PRECONDIT" +
                    "ION_NOT_NULL(command_response);\r\n\r\n  if (!az_span_is_content_equal(recv_data->co" +
                    "ntent_type, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetFullyQualifiedName().ToLower()));
            this.Write("_payload_content_type))\r\n  {\r\n    return AZ_ERROR_UNEXPECTED_CHAR;\r\n  }\r\n  else\r\n" +
                    "  {\r\n    *command_response = cJSON_Parse");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.respSchema));
            this.Write("(az_span_ptr(recv_data->response_payload));\r\n\r\n    if (*command_response == NULL)" +
                    "\r\n    {\r\n      return AZ_ERROR_UNEXPECTED_CHAR;\r\n    }\r\n    else\r\n    {\r\n      r" +
                    "eturn AZ_OK;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @brief Frees the instance of `");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.respSchema));
            this.Write("`.\r\n * @param[in] command_response Instance to be destroyed/freed.\r\n */\r\nAZ_INLIN" +
                    "E void ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetFullyQualifiedName().ToLower()));
            this.Write("_destroy_response(\r\n  ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.respSchema));
            this.Write("* command_response)\r\n{\r\n  _az_PRECONDITION_NOT_NULL(command_response);\r\n  \r\n  cJS" +
                    "ON_Delete");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.respSchema));
            this.Write("(command_response);\r\n}\r\n");
 } 
            this.Write("\r\n#endif // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetFullyQualifiedName().ToUpper()));
            this.Write("_INVOKER_H\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class CCommandInvokerBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
