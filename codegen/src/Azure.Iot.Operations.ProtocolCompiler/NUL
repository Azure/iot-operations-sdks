T4 text template processor version 3.0.0.1+cb559e2032
Usage: t4 [options] [template-file]

The template-file argument is required unless the template text is piped in via stdin.

Options:

  -o, --out=VALUE            Set the name or path of the output <file>. It
                               defaults to the input filename with its
                               extension changed to `.txt`, or to match the
                               generated code when preprocessing, and may be
                               overridden by template settings. Use `-` instead
                               of a filename to write to stdout.
  -r=<assembly>              Add an <assembly> reference by path or assembly
                               name. It will be resolved from the framework and
                               assembly directories.
  -u, --using=<namespace>    Import a <namespace> by generating a using
                               statement.
  -I=<directory>             Add a <directory> to be searched when resolving
                               included files.
  -P=<directory>             Add a <directory> to be searched when resolving
                               assemblies.
  -c, --class=<name>         Preprocess the template into class <name> for use
                               as a runtime template. The class name may
                               include a namespace.
  -l, --useRelativeLinePragmas
                             Use relative paths in line pragmas.
  -p, --parameter=<name>=<value>
                             Set session parameter <name> to <value>. The value
                               is accessed from the template's Session
                               dictionary, or from a property declared with a
                               parameter directive: <#@ parameter name='<name>'
                               type='<type>' #>. If the <name> matches a
                               parameter directive, the <value> will be
                               converted to that parameter's type.
      --debug                Generate debug symbols and keep temporary files.
  -v, --verbose              Output additional diagnostic information to stdout.
  -h, -?, --help             Show help
      --dp=<directive>!<class>!<assembly>
                             Set <directive> to be handled by directive
                               processor <class> in <assembly>.
  -a=<processor>!<directive>!<name>!<value>
                             Set host parameter <name> to <value>. It may
                               optionally be scoped to a <directive> and/or <
                               processor>. The value is accessed from the host'
                               s ResolveParameterValue() method or from a
                               property declared with a parameter directive: <#@
                                parameter name='<name>' #>.

