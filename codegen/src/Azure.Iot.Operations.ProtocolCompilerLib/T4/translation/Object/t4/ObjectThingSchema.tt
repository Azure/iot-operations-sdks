<#@ template language="C#" linePragmas="false" #>
<#@ import namespace="DTDLParser.Models" #>
<# this.PushIndent(new string(' ', this.indent)); #>
<# if (this.objectDescription.Any()) { #>
"descriptions": {
<# int ix1 = 1; foreach (KeyValuePair<string, string> kvp in this.objectDescription) { #>
  "<#=kvp.Key#>": "<#=kvp.Value#>"<#=ix1 < this.objectDescription.Count ? "," : ""#>
<# ix1++; } #>
},
<# } #>
"type": "object",
"dtv:additionalProperties": false,
<# if (this.objectFields.Any(f => IsFieldRequired(f))) { #>
"required": [ <#=string.Join(", ", this.objectFields.Where(f => IsFieldRequired(f)).Select(f => $"\"{f.Name}\""))#> ],
<# } #>
<# if (this.objectFields.Any(f => IsFieldMessage(f))) { #>
"dtv:errorMessage": "<#=this.objectFields.First(f => IsFieldMessage(f)).Name#>",
<# } #>
"properties": {
<# int ix2 = 1; foreach (var dtField in this.objectFields) { #>
  "<#=dtField.Name#>": {
<#=this.thingDescriber.GetTypeAndAddenda(dtField.Schema, 4)#>
  }<#=ix2 < this.objectFields.Count ? "," : ""#>
<# ix2++; } #>
}<# this.PopIndent(); #>
<#+
    private bool IsFieldRequired(DTFieldInfo dtField) => dtField.SupplementalTypes.Any(t => DtdlMqttExtensionValues.RequiredAdjunctTypeRegex.IsMatch(t.AbsoluteUri));

    private bool IsFieldMessage(DTFieldInfo dtField) => dtField.SupplementalTypes.Contains(this.errorMessageAdjunctTypeId);
#>
