<#@ template language="C#" linePragmas="false" #>
/* Code generated by Azure.Iot.Operations.ProtocolCompilerLib v<#=System.Reflection.Assembly.GetExecutingAssembly().GetName().Version#>; DO NOT EDIT. */

#nullable enable

namespace <#=this.projectName#>.<#=this.schemaNamespace.GetTypeName(TargetLanguage.CSharp)#>
{
    using System;
    using System.Collections.Generic;
    using <#=this.projectName#>;

    [System.CodeDom.Compiler.GeneratedCode("Azure.Iot.Operations.ProtocolCompilerLib", "<#=System.Reflection.Assembly.GetExecutingAssembly().GetName().Version#>")]
    public partial class <#=this.schemaName.GetTypeName(TargetLanguage.CSharp, "exception")#> : AggregateException
    {
        public <#=this.schemaName.GetTypeName(TargetLanguage.CSharp, "exception")#>(<#=this.schemaName.GetTypeName(TargetLanguage.CSharp)#> <#=this.schemaName.GetVariableName(TargetLanguage.CSharp)#>)
            : base(GetInnerExceptions(<#=this.schemaName.GetVariableName(TargetLanguage.CSharp)#>))
        {
            <#=this.schemaName.GetFieldName(TargetLanguage.CSharp)#> = <#=this.schemaName.GetVariableName(TargetLanguage.CSharp)#>;
        }

        public <#=this.schemaName.GetTypeName(TargetLanguage.CSharp)#> <#=this.schemaName.GetFieldName(TargetLanguage.CSharp)#> { get; }

        private static IEnumerable<Exception> GetInnerExceptions(<#=this.schemaName.GetTypeName(TargetLanguage.CSharp)#> <#=this.schemaName.GetVariableName(TargetLanguage.CSharp)#>)
        {
            List<Exception> innerExceptions = new();
<# foreach (var innerNameSchema in this.innerNameSchemas) { #>

            if (<#=this.schemaName.GetVariableName(TargetLanguage.CSharp)#>.<#=innerNameSchema.Item1.GetFieldName(TargetLanguage.CSharp)#> != null)
            {
                innerExceptions.Add(new <#=innerNameSchema.Item2.GetTypeName(TargetLanguage.CSharp, "exception")#>(<#=this.schemaName.GetVariableName(TargetLanguage.CSharp)#>.<#=innerNameSchema.Item1.GetFieldName(TargetLanguage.CSharp)#>));
            }
<# } #>

            return innerExceptions;
        }
    }
}
