<#@ template language="C#" linePragmas="false" #>
/* Code generated by Azure.Iot.Operations.ProtocolCompilerLib v<#=System.Reflection.Assembly.GetExecutingAssembly().GetName().Version#>; DO NOT EDIT. */

#nullable enable

namespace <#=this.projectName#>.<#=this.genNamespace.GetTypeName(TargetLanguage.CSharp)#>
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Xml;
    using Azure.Iot.Operations.Protocol;
    using Azure.Iot.Operations.Protocol.RPC;
    using Azure.Iot.Operations.Protocol.Models;
    using <#=this.projectName#>;
<# if (this.readRespNamespace != null) { #>
    using <#=this.projectName#>.<#=this.readRespNamespace.GetTypeName(TargetLanguage.CSharp)#>;
<# } #>
<# if (this.writeReqNamespace != null && this.writeReqNamespace != this.readRespNamespace) { #>
    using <#=this.projectName#>.<#=this.writeReqNamespace.GetTypeName(TargetLanguage.CSharp)#>;
<# } #>
<# if (this.writeRespNamespace!= null && this.writeRespNamespace != this.readRespNamespace && this.writeRespNamespace != this.writeReqNamespace) { #>
    using <#=this.projectName#>.<#=this.writeRespNamespace.GetTypeName(TargetLanguage.CSharp)#>;
<# } #>

    public static partial class <#=this.serviceName.GetTypeName(TargetLanguage.CSharp)#>
    {
        /// <summary>
<# if (this.propertyName != null) { #>
        /// Specializes <c>CommandInvoker</c> classes for reading<#=this.writeReqSchema != null ? " and writing" : ""#> Property '<#=this.propertyName.AsGiven#>'.
<# } else { #>
        /// Specializes <c>CommandInvoker</c> classes for reading<#=this.writeReqSchema != null ? " and writing" : ""#> a Property collection.
<# } #>
        /// </summary>
        public static class <#=this.containingComponentName.GetTypeName(TargetLanguage.CSharp)#>
        {
            /// <summary>
<# if (this.propertyName != null) { #>
            /// Specializes a <c>CommandInvoker</c> class for requesting to read Property '<#=this.propertyName.AsGiven#>'.
<# } else { #>
            /// Specializes a <c>CommandInvoker</c> class for requesting to read a Property collection.
<# } #>
            /// </summary>
            public class <#=EnvoyNames.ReadRequesterEnvoyName.GetTypeName(TargetLanguage.CSharp)#> : CommandInvoker<#=this.ReadTypeParams()#>
            {
                /// <summary>
                /// Initializes a new instance of the <see cref="<#=EnvoyNames.ReadRequesterEnvoyName.GetTypeName(TargetLanguage.CSharp)#>"/> class.
                /// </summary>
                public <#=EnvoyNames.ReadRequesterEnvoyName.GetTypeName(TargetLanguage.CSharp)#>(ApplicationContext applicationContext, IMqttPubSubClient mqttClient)
                    : base(applicationContext, mqttClient, "<#=this.readCommandName#>", new <#=string.Format(this.serializerClassName, this.ReadTypeParams())#>())
                {
                    RequestTopicPattern = AttributeRetriever.GetAttribute<PropertyTopicAttribute>(this)?.Topic ?? string.Empty;

                    TopicTokenMap["action"] = "read";
                    TopicTokenMap["modelId"] = "<#=this.modelId#>";
                    if (mqttClient.ClientId != null)
                    {
                        TopicTokenMap["consumerClientId"] = mqttClient.ClientId;
                    }
<# if (this.propertyName != null) { #>
                    TopicTokenMap["propertyName"] = "<#=this.propertyName.AsGiven#>";
<# } #>
                }
            }
<# if (this.writeReqSchema != null) { #>

            /// <summary>
<# if (this.propertyName != null) { #>
            /// Specializes a <c>CommandInvoker</c> class for requesting to write Property '<#=this.propertyName.AsGiven#>'.
<# } else { #>
            /// Specializes a <c>CommandInvoker</c> class for requesting to write a Property collection.
<# } #>
            /// </summary>
            public class <#=EnvoyNames.WriteRequesterEnvoyName.GetTypeName(TargetLanguage.CSharp)#> : CommandInvoker<#=this.WriteTypeParams()#>
            {
                /// <summary>
                /// Initializes a new instance of the <see cref="<#=EnvoyNames.WriteRequesterEnvoyName.GetTypeName(TargetLanguage.CSharp)#>"/> class.
                /// </summary>
                public <#=EnvoyNames.WriteRequesterEnvoyName.GetTypeName(TargetLanguage.CSharp)#>(ApplicationContext applicationContext, IMqttPubSubClient mqttClient)
                    : base(applicationContext, mqttClient, "<#=this.writeCommandName#>", new <#=string.Format(this.serializerClassName, this.WriteTypeParams())#>())
                {
                    RequestTopicPattern = AttributeRetriever.GetAttribute<PropertyTopicAttribute>(this)?.Topic ?? string.Empty;

                    TopicTokenMap["action"] = "write";
                    TopicTokenMap["modelId"] = "<#=this.modelId#>";
                    if (mqttClient.ClientId != null)
                    {
                        TopicTokenMap["consumerClientId"] = mqttClient.ClientId;
                    }
<# if (this.propertyName != null) { #>
                    TopicTokenMap["propertyName"] = "<#=this.propertyName.AsGiven#>";
<# } #>
                }
            }
<# } #>
        }
    }
}
<#+
    private string ReadTypeParams() => $"<{serializerEmptyType.GetTypeName(TargetLanguage.CSharp)}, {this.readRespSchema.GetTypeName(TargetLanguage.CSharp)}>";

    private string WriteTypeParams() => $"<{this.writeReqSchema!.GetTypeName(TargetLanguage.CSharp)}, {this.writeRespSchema?.GetTypeName(TargetLanguage.CSharp) ?? serializerEmptyType.GetTypeName(TargetLanguage.CSharp)}>";
#>
