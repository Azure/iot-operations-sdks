<#@ template language="C#" linePragmas="false" #>
<#@ import namespace="Azure.Iot.Operations.ProtocolCompilerLib" #>
/* Code generated by Azure.Iot.Operations.ProtocolCompilerLib v<#=System.Reflection.Assembly.GetExecutingAssembly().GetName().Version#>; DO NOT EDIT. */

use std::collections::HashMap;

use azure_iot_operations_mqtt::interface::ManagedClient;
use azure_iot_operations_protocol::common::aio_protocol_error::AIOProtocolError;
<# if (this.readRespSchema != null || this.writeRespSchema != null) { #>
use azure_iot_operations_protocol::common::payload_serialize::PayloadSerialize;
<# } #>
use azure_iot_operations_protocol::rpc_command;
use azure_iot_operations_protocol::application::ApplicationContext;

use super::<#=this.propSchema.GetFileName(TargetLanguage.Rust)#>::<#=this.propSchema.GetTypeName(TargetLanguage.Rust)#>;
<# if (this.readRespSchema is CodeName && !this.readRespSchema.Equals(this.propSchema)) { #>
use super::<#=this.NamespaceRef(this.readRespNamespace)#><#=this.readRespSchema.GetFileName(TargetLanguage.Rust)#>::<#=this.readRespSchema.GetTypeName(TargetLanguage.Rust)#>;
<# } #>
<# if (this.writeReqSchema is CodeName && !this.writeReqSchema.Equals(this.readRespSchema) && !this.writeReqSchema.Equals(this.propSchema)) { #>
use super::<#=this.NamespaceRef(this.writeReqNamespace)#><#=this.writeReqSchema.GetFileName(TargetLanguage.Rust)#>::<#=this.writeReqSchema.GetTypeName(TargetLanguage.Rust)#>;
<# } #>
<# if (this.writeRespSchema is CodeName) { #>
use super::<#=this.NamespaceRef(this.writeRespNamespace)#><#=this.writeRespSchema.GetFileName(TargetLanguage.Rust)#>::<#=this.writeRespSchema.GetTypeName(TargetLanguage.Rust)#>;
<# } #>
<# if (this.readErrorName != null) { #>
use super::<#=this.NamespaceRef(this.readErrorNamespace)#><#=this.readErrorSchema.GetFileName(TargetLanguage.Rust)#>::<#=this.readErrorSchema.GetTypeName(TargetLanguage.Rust)#>;
<# } #>
<# if (this.writeErrorName != null && !this.writeErrorSchema.Equals(this.readErrorSchema)) { #>
use super::<#=this.NamespaceRef(this.writeErrorNamespace)#><#=this.writeErrorSchema.GetFileName(TargetLanguage.Rust)#>::<#=this.writeErrorSchema.GetTypeName(TargetLanguage.Rust)#>;
<# } #>
use super::MODEL_ID;
use super::PROPERTY_TOPIC_PATTERN;
use super::super::common_types::options::CommandExecutorOptions;
use super::super::common_types::<#=this.serializerEmptyType.GetFileName(TargetLanguage.Rust)#>::<#=this.serializerEmptyType.GetTypeName(TargetLanguage.Rust)#>;

pub type <#=this.propertyName.GetTypeName(TargetLanguage.Rust, "read", "request")#> = rpc_command::executor::Request<<#=this.serializerEmptyType.GetTypeName(TargetLanguage.Rust)#>, <#=this.readRespSchema.GetTypeName(TargetLanguage.Rust)#>>;
pub type <#=this.propertyName.GetTypeName(TargetLanguage.Rust, "read", "response")#> = rpc_command::executor::Response<<#=this.readRespSchema.GetTypeName(TargetLanguage.Rust)#>>;
pub type <#=this.propertyName.GetTypeName(TargetLanguage.Rust, "read", "response", "builder", "error")#> = rpc_command::executor::ResponseBuilderError;
<# if (this.writeReqSchema != null) { #>
pub type <#=this.propertyName.GetTypeName(TargetLanguage.Rust, "write", "request")#> = rpc_command::executor::Request<<#=this.writeReqSchema.GetTypeName(TargetLanguage.Rust)#>, <#=((ITypeName)this.writeRespSchema ?? this.serializerEmptyType).GetTypeName(TargetLanguage.Rust)#>>;
pub type <#=this.propertyName.GetTypeName(TargetLanguage.Rust, "write", "response")#> = rpc_command::executor::Response<<#=((ITypeName)this.writeRespSchema ?? this.serializerEmptyType).GetTypeName(TargetLanguage.Rust)#>>;
pub type <#=this.propertyName.GetTypeName(TargetLanguage.Rust, "write", "response", "builder", "error")#> = rpc_command::executor::ResponseBuilderError;
<# } #>

#[derive(Default)]
/// Builder for [`<#=this.propertyName.GetTypeName(TargetLanguage.Rust, "read", "response")#>`]
pub struct <#=this.propertyName.GetTypeName(TargetLanguage.Rust, "read", "response", "builder")#> {
    inner_builder: rpc_command::executor::ResponseBuilder<<#=this.readRespSchema.GetTypeName(TargetLanguage.Rust)#>>,
}

impl <#=this.propertyName.GetTypeName(TargetLanguage.Rust, "read", "response", "builder")#> {
    /// Custom user data to set on the read response
    pub fn custom_user_data(&mut self, custom_user_data: Vec<(String, String)>) -> &mut Self {
        self.inner_builder.custom_user_data(custom_user_data);
        self
    }

    /// Payload of the read response
    ///
    /// # Errors
    /// If the payload cannot be serialized
    pub fn payload(
        &mut self,
        payload: <#=this.propSchema.GetTypeName(TargetLanguage.Rust)#>,
    ) -> Result<&mut Self, AIOProtocolError> {
<# if (this.readErrorName != null) { #>
        self.inner_builder.payload(<#=this.readRespSchema.GetTypeName(TargetLanguage.Rust)#> {
            <#=this.propValueName.GetFieldName(TargetLanguage.Rust)#>: Some(payload<#=this.separateProperties ? $".{this.propValueName.GetFieldName(TargetLanguage.Rust)}" : "" #>),
            <#=this.readErrorName.GetFieldName(TargetLanguage.Rust)#>: None,
        })?;
<# } else { #>
        self.inner_builder.payload(payload)?;
<# } #>
        Ok(self)
    }

<# if (this.readErrorName != null) { #>
    pub fn error(&mut self, error: <#=this.readErrorSchema.GetTypeName(TargetLanguage.Rust)#>) -> Result<&mut Self, AIOProtocolError> {
        self.inner_builder.payload(<#=this.readRespSchema.GetTypeName(TargetLanguage.Rust)#> {
            <#=this.propValueName.GetFieldName(TargetLanguage.Rust)#>: None,
            <#=this.readErrorName.GetFieldName(TargetLanguage.Rust)#>: Some(error),
        })?;
        Ok(self)
    }

<# } #>
    /// Builds a new `<#=this.propertyName.GetTypeName(TargetLanguage.Rust, "read", "response")#>`
    ///
    /// # Errors
    /// If a required field has not been initialized
    #[allow(clippy::missing_panics_doc)]    // The panic is not possible
    pub fn build(&mut self) -> Result<<#=this.propertyName.GetTypeName(TargetLanguage.Rust, "read", "response")#>, <#=this.propertyName.GetTypeName(TargetLanguage.Rust, "read", "response", "builder", "error")#>> {
        self.inner_builder.build()
    }
}
<# if (this.writeRespSchema != null) { #>

#[derive(Default)]
/// Builder for [`<#=this.propertyName.GetTypeName(TargetLanguage.Rust, "write", "response")#>`]
pub struct <#=this.propertyName.GetTypeName(TargetLanguage.Rust, "write", "response", "builder")#> {
    inner_builder: rpc_command::executor::ResponseBuilder<<#=this.writeRespSchema.GetTypeName(TargetLanguage.Rust)#>>,
}

impl <#=this.propertyName.GetTypeName(TargetLanguage.Rust, "write", "response", "builder")#> {
    /// Custom user data to set on the write response
    pub fn custom_user_data(&mut self, custom_user_data: Vec<(String, String)>) -> &mut Self {
        self.inner_builder.custom_user_data(custom_user_data);
        self
    }

<# if (this.writeErrorName != null) { #>
    pub fn error(&mut self, error: <#=this.writeErrorSchema.GetTypeName(TargetLanguage.Rust)#>) -> Result<&mut Self, AIOProtocolError> {
        self.inner_builder.payload(<#=this.writeRespSchema.GetTypeName(TargetLanguage.Rust)#> {
            <#=this.writeErrorName.GetFieldName(TargetLanguage.Rust)#>: Some(error),
        })?;
        Ok(self)
    }

<# } #>
    /// Builds a new `<#=this.propertyName.GetTypeName(TargetLanguage.Rust, "write", "response")#>`
    ///
    /// # Errors
    /// If a required field has not been initialized
    #[allow(clippy::missing_panics_doc)]    // The panic is not possible
    pub fn build(&mut self) -> Result<<#=this.propertyName.GetTypeName(TargetLanguage.Rust, "write", "response")#>, <#=this.propertyName.GetTypeName(TargetLanguage.Rust, "write", "response", "builder", "error")#>> {
        self.inner_builder.build()
    }
}
<# } #>

<# if (!this.propertyName.IsEmpty) { #>
/// Read responder for `<#=this.propertyName.AsGiven#>`
<# } else { #>
/// Read responder for a Property collection
<# } #>
pub struct <#=this.propertyName.GetTypeName(TargetLanguage.Rust, "read", "responder")#><C>(
    rpc_command::Executor<<#=this.serializerEmptyType.GetTypeName(TargetLanguage.Rust)#>, <#=this.readRespSchema.GetTypeName(TargetLanguage.Rust)#>, C>,
)
where
    C: ManagedClient + Clone + Send + Sync + 'static,
    C::PubReceiver: Send + Sync + 'static;

impl<C> <#=this.propertyName.GetTypeName(TargetLanguage.Rust, "read", "responder")#><C>
where
    C: ManagedClient + Clone + Send + Sync + 'static,
    C::PubReceiver: Send + Sync + 'static,
{
    /// Creates a new [`<#=this.propertyName.GetTypeName(TargetLanguage.Rust, "read", "responder")#>`]
    ///
    /// # Panics
    /// If the DTDL that generated this code was invalid
    pub fn new(application_context: ApplicationContext, client: C, options: &CommandExecutorOptions) -> Self {
        let mut executor_options_builder = rpc_command::executor::OptionsBuilder::default();
        if let Some(topic_namespace) = &options.topic_namespace {
            executor_options_builder.topic_namespace(topic_namespace.clone());
        }

        let mut topic_token_map: HashMap<String, String> = options
            .topic_token_map
            .clone()
            .into_iter()
            .map(|(k, v)| (format!("ex:{k}"), v))
            .collect();

        topic_token_map.insert("action".to_string(), "read".to_string());
        topic_token_map.insert("modelId".to_string(), MODEL_ID.to_string());
        topic_token_map.insert("maintainerId".to_string(), client.client_id().to_string());
<# if (!this.propertyName.IsEmpty) { #>
        topic_token_map.insert("propertyName".to_string(), "<#=this.propertyName.AsGiven#>".to_string());
<# } #>

        let executor_options = executor_options_builder
            .request_topic_pattern(PROPERTY_TOPIC_PATTERN)
            .command_name("<#=this.readCommandName#>")
            .topic_token_map(topic_token_map)
            .build()
            .expect("DTDL schema generated invalid arguments");

        Self(
            rpc_command::Executor::new(application_context, client, executor_options)
                .expect("DTDL schema generated invalid arguments"),
        )
    }

    /// Receive the next [`<#=this.propertyName.GetTypeName(TargetLanguage.Rust, "read", "request")#>`] or [`None`] if there will be no more requests
    ///
    /// # Errors
    /// [`AIOProtocolError`] if there is a failure receiving a request
    pub async fn recv(&mut self) -> Option<Result<<#=this.propertyName.GetTypeName(TargetLanguage.Rust, "read", "request")#>, AIOProtocolError>> {
        self.0.recv().await
    }

    /// Shutdown the [`<#=this.propertyName.GetTypeName(TargetLanguage.Rust, "read", "responder")#>`]. Unsubscribes from the response topic and cancels the receiver loop to drop the receiver and to prevent the task from looping indefinitely.
    ///
    /// Returns Ok(()) on success, otherwise returns [`AIOProtocolError`].
    /// # Errors
    /// [`AIOProtocolError`] of kind [`ClientError`](azure_iot_operations_protocol::common::aio_protocol_error::AIOProtocolErrorKind::ClientError) if the unsubscribe fails or if the unsuback reason code doesn't indicate success.
    pub async fn shutdown(&mut self) -> Result<(), AIOProtocolError> {
        self.0.shutdown().await
    }
}
<# if (this.writeReqSchema != null) { #>

<# if (!this.propertyName.IsEmpty) { #>
/// Write responder for `<#=this.propertyName.AsGiven#>`
<# } else { #>
/// Write responder for a Property collection
<# } #>
pub struct <#=this.propertyName.GetTypeName(TargetLanguage.Rust, "write", "responder")#><C>(
    rpc_command::Executor<<#=this.writeReqSchema.GetTypeName(TargetLanguage.Rust)#>, <#=((ITypeName)this.writeRespSchema ?? this.serializerEmptyType).GetTypeName(TargetLanguage.Rust)#>, C>,
)
where
    C: ManagedClient + Clone + Send + Sync + 'static,
    C::PubReceiver: Send + Sync + 'static;

impl<C> <#=this.propertyName.GetTypeName(TargetLanguage.Rust, "write", "responder")#><C>
where
    C: ManagedClient + Clone + Send + Sync + 'static,
    C::PubReceiver: Send + Sync + 'static,
{
    /// Creates a new [`<#=this.propertyName.GetTypeName(TargetLanguage.Rust, "write", "responder")#>`]
    ///
    /// # Panics
    /// If the DTDL that generated this code was invalid
    pub fn new(application_context: ApplicationContext, client: C, options: &CommandExecutorOptions) -> Self {
        let mut executor_options_builder = rpc_command::executor::OptionsBuilder::default();
        if let Some(topic_namespace) = &options.topic_namespace {
            executor_options_builder.topic_namespace(topic_namespace.clone());
        }

        let mut topic_token_map: HashMap<String, String> = options
            .topic_token_map
            .clone()
            .into_iter()
            .map(|(k, v)| (format!("ex:{k}"), v))
            .collect();

        topic_token_map.insert("action".to_string(), "write".to_string());
        topic_token_map.insert("modelId".to_string(), MODEL_ID.to_string());
        topic_token_map.insert("maintainerId".to_string(), client.client_id().to_string());
<# if (!this.propertyName.IsEmpty) { #>
        topic_token_map.insert("propertyName".to_string(), "<#=this.propertyName.AsGiven#>".to_string());
<# } #>

        let executor_options = executor_options_builder
            .request_topic_pattern(PROPERTY_TOPIC_PATTERN)
            .command_name("<#=this.writeCommandName#>")
            .topic_token_map(topic_token_map)
            .build()
            .expect("DTDL schema generated invalid arguments");

        Self(
            rpc_command::Executor::new(application_context, client, executor_options)
                .expect("DTDL schema generated invalid arguments"),
        )
    }

    /// Receive the next [`<#=this.propertyName.GetTypeName(TargetLanguage.Rust, "write", "request")#>`] or [`None`] if there will be no more requests
    ///
    /// # Errors
    /// [`AIOProtocolError`] if there is a failure receiving a request
    pub async fn recv(&mut self) -> Option<Result<<#=this.propertyName.GetTypeName(TargetLanguage.Rust, "write", "request")#>, AIOProtocolError>> {
        self.0.recv().await
    }

    /// Shutdown the [`<#=this.propertyName.GetTypeName(TargetLanguage.Rust, "write", "responder")#>`]. Unsubscribes from the response topic and cancels the receiver loop to drop the receiver and to prevent the task from looping indefinitely.
    ///
    /// Returns Ok(()) on success, otherwise returns [`AIOProtocolError`].
    /// # Errors
    /// [`AIOProtocolError`] of kind [`ClientError`](azure_iot_operations_protocol::common::aio_protocol_error::AIOProtocolErrorKind::ClientError) if the unsubscribe fails or if the unsuback reason code doesn't indicate success.
    pub async fn shutdown(&mut self) -> Result<(), AIOProtocolError> {
        self.0.shutdown().await
    }
}
<# } #>
<#+
//    private string RequestType() => this.reqSchema?.GetTypeName(TargetLanguage.Rust) ?? this.serializerEmptyType.GetTypeName(TargetLanguage.Rust);

//    private string ExternalResponseType() => this.writeRespSchema?.GetTypeName(TargetLanguage.Rust) ?? this.serializerEmptyType.GetTypeName(TargetLanguage.Rust);

//    private string InternalResponseType() => (this.propValueSchema ?? this.respSchema)?.GetTypeName(TargetLanguage.Rust) ?? this.serializerEmptyType.GetTypeName(TargetLanguage.Rust);

    private string NamespaceRef(CodeName schemaNamespace) => schemaNamespace != null ? $"super::{schemaNamespace.GetFolderName(TargetLanguage.Rust)}::" : "";
#>
