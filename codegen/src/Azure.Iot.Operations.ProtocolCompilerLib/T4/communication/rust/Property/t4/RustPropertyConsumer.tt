<#@ template language="C#" linePragmas="false" #>
<#@ import namespace="Azure.Iot.Operations.ProtocolCompilerLib" #>
/* Code generated by Azure.Iot.Operations.ProtocolCompilerLib v<#=System.Reflection.Assembly.GetExecutingAssembly().GetName().Version#>; DO NOT EDIT. */

use std::collections::HashMap;
<# if (this.readErrorName != null) { #>
use std::error::Error;
<# } #>
use std::time::Duration;

use azure_iot_operations_mqtt::interface::ManagedClient;
use azure_iot_operations_protocol::common::aio_protocol_error::{
    AIOProtocolError,
<# if (this.readErrorName != null) { #>
    AIOProtocolErrorKind,
<# } #>
};
<# if (this.writeReqSchema != null) { #>
use azure_iot_operations_protocol::common::payload_serialize::PayloadSerialize;
<# } #>
use azure_iot_operations_protocol::rpc_command;
use azure_iot_operations_protocol::application::ApplicationContext;

use super::<#=this.propSchema.GetFileName(TargetLanguage.Rust)#>::<#=this.propSchema.GetTypeName(TargetLanguage.Rust)#>;
<# if (this.readRespSchema is CodeName && !this.readRespSchema.Equals(this.propSchema)) { #>
use super::<#=this.NamespaceRef(this.readRespNamespace)#><#=this.readRespSchema.GetFileName(TargetLanguage.Rust)#>::<#=this.readRespSchema.GetTypeName(TargetLanguage.Rust)#>;
<# } #>
<# if (this.writeReqSchema is CodeName && !this.writeReqSchema.Equals(this.readRespSchema) && !this.writeReqSchema.Equals(this.propSchema)) { #>
use super::<#=this.NamespaceRef(this.writeReqNamespace)#><#=this.writeReqSchema.GetFileName(TargetLanguage.Rust)#>::<#=this.writeReqSchema.GetTypeName(TargetLanguage.Rust)#>;
<# } #>
<# if (this.writeRespSchema is CodeName) { #>
use super::<#=this.NamespaceRef(this.writeRespNamespace)#><#=this.writeRespSchema.GetFileName(TargetLanguage.Rust)#>::<#=this.writeRespSchema.GetTypeName(TargetLanguage.Rust)#>;
<# } #>
<# if (this.readErrorName != null) { #>
use super::<#=this.NamespaceRef(this.readErrorNamespace)#><#=this.readErrorSchema.GetFileName(TargetLanguage.Rust)#>::<#=this.readErrorSchema.GetTypeName(TargetLanguage.Rust)#>;
<# } #>
<# if (this.writeErrorName != null && !this.writeErrorSchema.Equals(this.readErrorSchema)) { #>
use super::<#=this.NamespaceRef(this.writeErrorNamespace)#><#=this.writeErrorSchema.GetFileName(TargetLanguage.Rust)#>::<#=this.writeErrorSchema.GetTypeName(TargetLanguage.Rust)#>;
<# } #>
use super::MODEL_ID;
use super::PROPERTY_TOPIC_PATTERN;
use super::super::common_types::options::CommandInvokerOptions;
use super::super::common_types::<#=this.serializerEmptyType.GetFileName(TargetLanguage.Rust)#>::<#=this.serializerEmptyType.GetTypeName(TargetLanguage.Rust)#>;

pub type <#=this.propertyName.GetTypeName(TargetLanguage.Rust, "read", "request")#> = rpc_command::invoker::Request<<#=this.serializerEmptyType.GetTypeName(TargetLanguage.Rust)#>>;
pub type <#=this.propertyName.GetTypeName(TargetLanguage.Rust, "read", "response")#> = rpc_command::invoker::Response<<#=this.propSchema.GetTypeName(TargetLanguage.Rust)#>>;
pub type <#=this.propertyName.GetTypeName(TargetLanguage.Rust, "read", "request", "builder", "error")#> = rpc_command::invoker::RequestBuilderError;
<# if (this.readErrorSchema != null) { #>
pub type <#=this.propertyName.GetTypeName(TargetLanguage.Rust, "read", "response", "error")#> = rpc_command::invoker::Response<<#=this.readErrorSchema.GetTypeName(TargetLanguage.Rust)#>>;
<# } #>
<# if (this.writeReqSchema != null) { #>
pub type <#=this.propertyName.GetTypeName(TargetLanguage.Rust, "write", "request")#> = rpc_command::invoker::Request<<#=this.writeReqSchema.GetTypeName(TargetLanguage.Rust)#>>;
pub type <#=this.propertyName.GetTypeName(TargetLanguage.Rust, "write", "response")#> = rpc_command::invoker::Response<<#=this.serializerEmptyType.GetTypeName(TargetLanguage.Rust)#>>;
pub type <#=this.propertyName.GetTypeName(TargetLanguage.Rust, "write", "request", "builder", "error")#> = rpc_command::invoker::RequestBuilderError;
<# if (this.writeErrorSchema != null) { #>
pub type <#=this.propertyName.GetTypeName(TargetLanguage.Rust, "write", "response", "error")#> = rpc_command::invoker::Response<<#=this.writeErrorSchema.GetTypeName(TargetLanguage.Rust)#>>;
<# } #>
<# } #>

#[derive(Default)]
/// Builder for [`<#=this.propertyName.GetTypeName(TargetLanguage.Rust, "read", "request")#>`]
pub struct <#=this.propertyName.GetTypeName(TargetLanguage.Rust, "read", "request", "builder")#> {
    inner_builder: rpc_command::invoker::RequestBuilder<<#=this.serializerEmptyType.GetTypeName(TargetLanguage.Rust)#>>,
<# if (this.doesPropertyTargetMaintainer) { #>
    set_maintainer_id: bool,
<# } #>
    topic_tokens: HashMap<String, String>,
}

impl <#=this.propertyName.GetTypeName(TargetLanguage.Rust, "read", "request", "builder")#> {
    /// Custom user data to set on the read request
    pub fn custom_user_data(&mut self, custom_user_data: Vec<(String, String)>) -> &mut Self {
        self.inner_builder.custom_user_data(custom_user_data);
        self
    }

    /// Topic token keys/values to be replaced into the publish topic of the request message.
    /// A prefix of "ex:" will be prepended to each key before scanning the topic pattern.
    /// Thus, only tokens of the form `{ex:SOMEKEY}` will be replaced.
    pub fn topic_tokens(&mut self, topic_tokens: HashMap<String, String>) -> &mut Self {
        for (k, v) in topic_tokens {
            self.topic_tokens.insert(format!("ex:{k}"), v);
        }
        self
    }

    /// Timeout for the request
    pub fn timeout(&mut self, timeout: Duration) -> &mut Self {
        self.inner_builder.timeout(timeout);
        self
    }

<# if (this.doesPropertyTargetMaintainer) { #>
    /// Target maintainer ID
    pub fn maintainer_id(&mut self, maintainer_id: &str) -> &mut Self {
        self.topic_tokens
            .insert("maintainerId".to_string(), maintainer_id.to_string());
        self.set_maintainer_id = true;
        self
    }

<# } #>
    /// Builds a new `<#=this.propertyName.GetTypeName(TargetLanguage.Rust, "read", "request")#>`
    ///
    /// # Errors
    /// If a required field has not been initialized
    #[allow(clippy::missing_panics_doc)]    // The panic is not possible
    pub fn build(&mut self) -> Result<<#=this.propertyName.GetTypeName(TargetLanguage.Rust, "read", "request")#>, <#=this.propertyName.GetTypeName(TargetLanguage.Rust, "read", "request", "builder", "error")#>> {
<# if (this.doesPropertyTargetMaintainer) { #>
        if !self.set_maintainer_id {
            return Err(<#=this.propertyName.GetTypeName(TargetLanguage.Rust, "read", "request", "builder", "error")#>::UninitializedField(
                "maintainer_id",
            ));
        }

<# } #>
        self.inner_builder.payload(<#=this.serializerEmptyType.GetAllocator(TargetLanguage.Rust)#>).unwrap();

        self.inner_builder.topic_tokens(self.topic_tokens.clone());

        self.inner_builder.build()
    }
}
<# if (this.writeReqSchema != null) { #>

#[derive(Default)]
/// Builder for [`<#=this.propertyName.GetTypeName(TargetLanguage.Rust, "write", "request")#>`]
pub struct <#=this.propertyName.GetTypeName(TargetLanguage.Rust, "write", "request", "builder")#> {
    inner_builder: rpc_command::invoker::RequestBuilder<<#=this.writeReqSchema.GetTypeName(TargetLanguage.Rust)#>>,
<# if (this.doesPropertyTargetMaintainer) { #>
    set_maintainer_id: bool,
<# } #>
    topic_tokens: HashMap<String, String>,
}

impl <#=this.propertyName.GetTypeName(TargetLanguage.Rust, "write", "request", "builder")#> {
    /// Custom user data to set on the write request
    pub fn custom_user_data(&mut self, custom_user_data: Vec<(String, String)>) -> &mut Self {
        self.inner_builder.custom_user_data(custom_user_data);
        self
    }

    /// Topic token keys/values to be replaced into the publish topic of the request message.
    /// A prefix of "ex:" will be prepended to each key before scanning the topic pattern.
    /// Thus, only tokens of the form `{ex:SOMEKEY}` will be replaced.
    pub fn topic_tokens(&mut self, topic_tokens: HashMap<String, String>) -> &mut Self {
        for (k, v) in topic_tokens {
            self.topic_tokens.insert(format!("ex:{k}"), v);
        }
        self
    }

    /// Timeout for the request
    pub fn timeout(&mut self, timeout: Duration) -> &mut Self {
        self.inner_builder.timeout(timeout);
        self
    }

<# if (this.doesPropertyTargetMaintainer) { #>
    /// Target maintainer ID
    pub fn maintainer_id(&mut self, maintainer_id: &str) -> &mut Self {
        self.topic_tokens
            .insert("maintainerId".to_string(), maintainer_id.to_string());
        self.set_maintainer_id = true;
        self
    }

<# } #>
    /// Payload of the write request
    ///
    /// # Errors
    /// If the payload cannot be serialized
    pub fn payload(
        &mut self,
        payload: <#=this.writeReqSchema.GetTypeName(TargetLanguage.Rust)#>,
    ) -> Result<&mut Self, AIOProtocolError> {
        self.inner_builder.payload(payload)?;
        Ok(self)
    }

    /// Builds a new `<#=this.propertyName.GetTypeName(TargetLanguage.Rust, "write", "request")#>`
    ///
    /// # Errors
    /// If a required field has not been initialized
    #[allow(clippy::missing_panics_doc)]    // The panic is not possible
    pub fn build(&mut self) -> Result<<#=this.propertyName.GetTypeName(TargetLanguage.Rust, "write", "request")#>, <#=this.propertyName.GetTypeName(TargetLanguage.Rust, "write", "request", "builder", "error")#>> {
<# if (this.doesPropertyTargetMaintainer) { #>
        if !self.set_maintainer_id {
            return Err(<#=this.propertyName.GetTypeName(TargetLanguage.Rust, "write", "request", "builder", "error")#>::UninitializedField(
                "maintainer_id",
            ));
        }

<# } #>
        self.inner_builder.topic_tokens(self.topic_tokens.clone());

        self.inner_builder.build()
    }
}
<# } #>

/// Read requester for `<#=this.propertyName.AsGiven#>`
pub struct <#=this.propertyName.GetTypeName(TargetLanguage.Rust, "read", "requester")#><C>(
    rpc_command::Invoker<<#=this.serializerEmptyType.GetTypeName(TargetLanguage.Rust)#>, <#=this.readRespSchema.GetTypeName(TargetLanguage.Rust)#>, C>,
)
where
    C: ManagedClient + Clone + Send + Sync + 'static,
    C::PubReceiver: Send + Sync + 'static;

impl<C> <#=this.propertyName.GetTypeName(TargetLanguage.Rust, "read", "requester")#><C>
where
    C: ManagedClient + Clone + Send + Sync + 'static,
    C::PubReceiver: Send + Sync + 'static,
{
    /// Creates a new [`<#=this.propertyName.GetTypeName(TargetLanguage.Rust, "read", "requester")#>`]
    ///
    /// # Panics
    /// If the DTDL that generated this code was invalid
    pub fn new(application_context: ApplicationContext, client: C, options: &CommandInvokerOptions) -> Self {
        let mut invoker_options_builder = rpc_command::invoker::OptionsBuilder::default();
        if let Some(topic_namespace) = &options.topic_namespace {
            invoker_options_builder.topic_namespace(topic_namespace.clone());
        }

        let mut topic_token_map: HashMap<String, String> = options
            .topic_token_map
            .clone()
            .into_iter()
            .map(|(k, v)| (format!("ex:{k}"), v))
            .collect();

        topic_token_map.insert("action".to_string(), "read".to_string());
        topic_token_map.insert("modelId".to_string(), MODEL_ID.to_string());
        topic_token_map.insert("consumerClientId".to_string(), client.client_id().to_string());
<# if (!this.propertyName.IsEmpty) { #>
        topic_token_map.insert("propertyName".to_string(), "<#=this.propertyName.AsGiven#>".to_string());
<# } #>

        let invoker_options = invoker_options_builder
            .request_topic_pattern(PROPERTY_TOPIC_PATTERN)
            .command_name("<#=this.readCommandName#>")
            .topic_token_map(topic_token_map)
            .response_topic_prefix(options.response_topic_prefix.clone())
            .response_topic_suffix(options.response_topic_suffix.clone())
            .build()
            .expect("DTDL schema generated invalid arguments");

        Self(
            rpc_command::Invoker::new(application_context, client, invoker_options)
                .expect("DTDL schema generated invalid arguments"),
        )
    }

    /// Invokes the [`<#=this.propertyName.GetTypeName(TargetLanguage.Rust, "read", "request")#>`]
    ///
    /// # Errors
    /// [`AIOProtocolError`] if there is a failure invoking the request
    pub async fn invoke(
        &self,
        request: <#=this.propertyName.GetTypeName(TargetLanguage.Rust, "read", "request")#>,
<# if (this.readErrorName != null) { #>
    ) -> Result<Result<<#=this.propertyName.GetTypeName(TargetLanguage.Rust, "read", "response")#>, <#=this.propertyName.GetTypeName(TargetLanguage.Rust, "read", "response", "error")#>>, AIOProtocolError> {
        let response = self.0.invoke(request).await;
        match response {
            Ok(response) => {
                if let Some(<#=this.readErrorName.GetVariableName(TargetLanguage.Rust)#>) = response.payload.<#=this.readErrorName.GetFieldName(TargetLanguage.Rust)#> {
                    Ok(Err(<#=this.propertyName.GetTypeName(TargetLanguage.Rust, "read", "response", "error")#> {
                        payload: <#=this.readErrorName.GetVariableName(TargetLanguage.Rust)#>,
                        content_type: response.content_type,
                        format_indicator: response.format_indicator,
                        custom_user_data: response.custom_user_data,
                        timestamp: response.timestamp,
                        executor_id: response.executor_id,
                    }))
                } else if let Some(<#=this.propValueName.GetVariableName(TargetLanguage.Rust)#>) = response.payload.<#=this.propValueName.GetFieldName(TargetLanguage.Rust)#> {
                    Ok(Ok(<#=this.propertyName.GetTypeName(TargetLanguage.Rust, "read", "response")#> {
<# if (this.separateProperties) { #>
                        payload: <#=this.propSchema.GetTypeName(TargetLanguage.Rust)#> { <#=(this.propValueName ?? this.propertyName).GetFieldName(TargetLanguage.Rust)#>: <#=this.propValueName.GetVariableName(TargetLanguage.Rust)#> },
<# } else { #>
                        payload: <#=this.propValueName.GetVariableName(TargetLanguage.Rust)#>,
<# } #>
                        content_type: response.content_type,
                        format_indicator: response.format_indicator,
                        custom_user_data: response.custom_user_data,
                        timestamp: response.timestamp,
                        executor_id: response.executor_id,
                    }))
                } else {
                    Err(AIOProtocolError {
                        message: Some(
                            "Command response has neither normal nor error payload content"
                                .to_string(),
                        ),
                        kind: AIOProtocolErrorKind::PayloadInvalid,
                        is_shallow: false,
                        is_remote: true,
                        nested_error: None,
                        header_name: None,
                        header_value: None,
                        timeout_name: None,
                        timeout_value: None,
                        property_name: None,
                        property_value: None,
                        command_name: Some("<#=this.readCommandName#>".to_string()),
                        protocol_version: None,
                        supported_protocol_major_versions: None,
                    })
                }
            }
            Err(err) => Err(err),
        }
<# } else { #>
    ) -> Result<<#=this.propertyName.GetTypeName(TargetLanguage.Rust, "read", "response")#>, AIOProtocolError> {
        self.0.invoke(request).await
<# } #>
    }

    /// Shutdown the [`<#=this.propertyName.GetTypeName(TargetLanguage.Rust, "read", "requester")#>`]. Unsubscribes from the response topic and cancels the receiver loop to drop the receiver and to prevent the task from looping indefinitely.
    ///
    /// Returns Ok(()) on success, otherwise returns [`AIOProtocolError`].
    /// # Errors
    /// [`AIOProtocolError`] of kind [`ClientError`](azure_iot_operations_protocol::common::aio_protocol_error::AIOProtocolErrorKind::ClientError) if the unsubscribe fails or if the unsuback reason code doesn't indicate success.
    pub async fn shutdown(&self) -> Result<(), AIOProtocolError> {
        self.0.shutdown().await
    }
}
<# if (this.writeReqSchema != null) { #>

/// Write requester for `<#=this.propertyName.AsGiven#>`
pub struct <#=this.propertyName.GetTypeName(TargetLanguage.Rust, "write", "requester")#><C>(
    rpc_command::Invoker<<#=this.writeReqSchema.GetTypeName(TargetLanguage.Rust)#>, <#=((ITypeName)this.writeRespSchema ?? this.serializerEmptyType).GetTypeName(TargetLanguage.Rust)#>, C>,
)
where
    C: ManagedClient + Clone + Send + Sync + 'static,
    C::PubReceiver: Send + Sync + 'static;

impl<C> <#=this.propertyName.GetTypeName(TargetLanguage.Rust, "write", "requester")#><C>
where
    C: ManagedClient + Clone + Send + Sync + 'static,
    C::PubReceiver: Send + Sync + 'static,
{
    /// Creates a new [`<#=this.propertyName.GetTypeName(TargetLanguage.Rust, "write", "requester")#>`]
    ///
    /// # Panics
    /// If the DTDL that generated this code was invalid
    pub fn new(application_context: ApplicationContext, client: C, options: &CommandInvokerOptions) -> Self {
        let mut invoker_options_builder = rpc_command::invoker::OptionsBuilder::default();
        if let Some(topic_namespace) = &options.topic_namespace {
            invoker_options_builder.topic_namespace(topic_namespace.clone());
        }

        let mut topic_token_map: HashMap<String, String> = options
            .topic_token_map
            .clone()
            .into_iter()
            .map(|(k, v)| (format!("ex:{k}"), v))
            .collect();

        topic_token_map.insert("action".to_string(), "write".to_string());
        topic_token_map.insert("modelId".to_string(), MODEL_ID.to_string());
        topic_token_map.insert("consumerClientId".to_string(), client.client_id().to_string());
<# if (!this.propertyName.IsEmpty) { #>
        topic_token_map.insert("propertyName".to_string(), "<#=this.propertyName.AsGiven#>".to_string());
<# } #>

        let invoker_options = invoker_options_builder
            .request_topic_pattern(PROPERTY_TOPIC_PATTERN)
            .command_name("<#=this.writeCommandName#>")
            .topic_token_map(topic_token_map)
            .response_topic_prefix(options.response_topic_prefix.clone())
            .response_topic_suffix(options.response_topic_suffix.clone())
            .build()
            .expect("DTDL schema generated invalid arguments");

        Self(
            rpc_command::Invoker::new(application_context, client, invoker_options)
                .expect("DTDL schema generated invalid arguments"),
        )
    }

    /// Invokes the [`<#=this.propertyName.GetTypeName(TargetLanguage.Rust, "write", "request")#>`]
    ///
    /// # Errors
    /// [`AIOProtocolError`] if there is a failure invoking the request
    pub async fn invoke(
        &self,
        request: <#=this.propertyName.GetTypeName(TargetLanguage.Rust, "write", "request")#>,
<# if (this.writeErrorName != null) { #>
    ) -> Result<Result<<#=this.propertyName.GetTypeName(TargetLanguage.Rust, "write", "response")#>, <#=this.propertyName.GetTypeName(TargetLanguage.Rust, "write", "response", "error")#>>, AIOProtocolError> {
        let response = self.0.invoke(request).await;
        match response {
            Ok(response) => {
                if let Some(<#=this.writeErrorName.GetVariableName(TargetLanguage.Rust)#>) = response.payload.<#=this.writeErrorName.GetFieldName(TargetLanguage.Rust)#> {
                    Ok(Err(<#=this.propertyName.GetTypeName(TargetLanguage.Rust, "write", "response", "error")#> {
                        payload: <#=this.writeErrorName.GetVariableName(TargetLanguage.Rust)#>,
                        content_type: response.content_type,
                        format_indicator: response.format_indicator,
                        custom_user_data: response.custom_user_data,
                        timestamp: response.timestamp,
                        executor_id: response.executor_id,
                    }))
                } else {
                    Ok(Ok(<#=this.propertyName.GetTypeName(TargetLanguage.Rust, "write", "response")#> {
                        payload: <#=this.serializerEmptyType.GetAllocator(TargetLanguage.Rust)#>,
                        content_type: response.content_type,
                        format_indicator: response.format_indicator,
                        custom_user_data: response.custom_user_data,
                        timestamp: response.timestamp,
                        executor_id: response.executor_id,
                    }))
                }
            }
            Err(err) => Err(err),
        }
<# } else { #>
    ) -> Result<<#=this.propertyName.GetTypeName(TargetLanguage.Rust, "write", "response")#>, AIOProtocolError> {
        self.0.invoke(request).await
<# } #>
    }

    /// Shutdown the [`<#=this.propertyName.GetTypeName(TargetLanguage.Rust, "write", "requester")#>`]. Unsubscribes from the response topic and cancels the receiver loop to drop the receiver and to prevent the task from looping indefinitely.
    ///
    /// Returns Ok(()) on success, otherwise returns [`AIOProtocolError`].
    /// # Errors
    /// [`AIOProtocolError`] of kind [`ClientError`](azure_iot_operations_protocol::common::aio_protocol_error::AIOProtocolErrorKind::ClientError) if the unsubscribe fails or if the unsuback reason code doesn't indicate success.
    pub async fn shutdown(&self) -> Result<(), AIOProtocolError> {
        self.0.shutdown().await
    }
}
<# } #>
<#+
//    private string RequestType() => this.reqSchema?.GetTypeName(TargetLanguage.Rust) ?? this.serializerEmptyType.GetTypeName(TargetLanguage.Rust);

//    private string ExternalResponseType() => this.writeRespSchema?.GetTypeName(TargetLanguage.Rust) ?? this.serializerEmptyType.GetTypeName(TargetLanguage.Rust);

//    private string InternalResponseType() => (this.propValueSchema ?? this.respSchema)?.GetTypeName(TargetLanguage.Rust) ?? this.serializerEmptyType.GetTypeName(TargetLanguage.Rust);

    private string NamespaceRef(CodeName schemaNamespace) => schemaNamespace != null ? $"super::{schemaNamespace.GetFolderName(TargetLanguage.Rust)}::" : "";
#>
