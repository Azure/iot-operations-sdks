<#@ template language="C#" linePragmas="false" #>
<#@ import namespace="Azure.Iot.Operations.ProtocolCompilerLib" #>
/* Code generated by Azure.Iot.Operations.ProtocolCompilerLib v<#=System.Reflection.Assembly.GetExecutingAssembly().GetName().Version#>; DO NOT EDIT. */

use std::error::Error;
use std::fmt;

use super::<#=this.schemaName.GetFileName(TargetLanguage.Rust)#>::<#=this.schemaName.GetTypeName(TargetLanguage.Rust)#>;

impl fmt::Display for <#=this.schemaName.GetTypeName(TargetLanguage.Rust)#> {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
<# if (this.messageField != null) { #>
<# if (this.nullable) { #>
        if let Some(message) = &self.<#=this.messageField.GetFieldName(TargetLanguage.Rust)#> {
            write!(f, "{message}")
        } else {
            write!(f, "<#=this.description#>")
        }
<# } else { #>
        write!(f, "{}", self.<#=this.messageField.GetFieldName(TargetLanguage.Rust)#>)
<# } #>
<# } else { #>
        write!(f, "<#=this.description#>")
<# } #>
    }
}

impl Error for <#=this.schemaName.GetTypeName(TargetLanguage.Rust)#> {
    fn source(&self) -> Option<&(dyn Error + 'static)> {
        None
    }
}
