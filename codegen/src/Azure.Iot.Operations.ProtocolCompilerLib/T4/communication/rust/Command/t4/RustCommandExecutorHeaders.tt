<#@ template language="C#" linePragmas="false" #>
<#@ import namespace="Azure.Iot.Operations.ProtocolCompilerLib" #>
/* Code generated by Azure.Iot.Operations.ProtocolCompilerLib v<#=System.Reflection.Assembly.GetExecutingAssembly().GetName().Version#>; DO NOT EDIT. */

use azure_iot_operations_mqtt::interface::ManagedClient;
use serde_json;

use super::<#=this.errorCodeSchema.GetFileName(TargetLanguage.Rust)#>::<#=this.errorCodeSchema.GetTypeName(TargetLanguage.Rust)#>;
<# if (this.errorInfoSchema != null) { #>
use super::<#=this.errorInfoSchema.GetFileName(TargetLanguage.Rust)#>::<#=this.errorInfoSchema.GetTypeName(TargetLanguage.Rust)#>;
<# } #>
pub use super::<#=this.commandName.GetFileName(TargetLanguage.Rust, "command", "executor")#>::<#=this.commandName.GetTypeName(TargetLanguage.Rust, "command", "executor")#>;

use azure_iot_operations_protocol::rpc_command::executor;

impl<C> <#=this.commandName.GetTypeName(TargetLanguage.Rust, "command", "executor")#><C>
where
    C: ManagedClient + Clone + Send + Sync + 'static,
    C::PubReceiver: Send + Sync + 'static,
{
    pub fn application_error_headers(
        custom_user_data: &mut Vec<(String, String)>,
        <#=this.errorCodeName.GetVariableName(TargetLanguage.Rust)#>: <#=this.errorCodeSchema.GetTypeName(TargetLanguage.Rust)#>,
        <#=this.errorInfoName?.GetVariableName(TargetLanguage.Rust) ?? "error_payload"#>: <#=this.errorInfoSchema?.GetTypeName(TargetLanguage.Rust) ?? "String"#>,
    ) -> Result<(), String> {
        let error_code =
            match <#=this.errorCodeName.GetVariableName(TargetLanguage.Rust)#> {
<# foreach (KeyValuePair<CodeName, string> kvp in this.errorCodeEnumeration) { #>
                <#=this.errorCodeSchema.GetTypeName(TargetLanguage.Rust)#>::<#=kvp.Key.GetTypeName(TargetLanguage.Rust)#> => "<#=kvp.Value#>".to_string(),
<# } #>
            };

<# if (this.errorInfoSchema != null) { #>
        let error_payload = serde_json::to_string(&<#=this.errorInfoName.GetVariableName(TargetLanguage.Rust)#>).unwrap_or_default();

<# } #>
        executor::application_error_headers(custom_user_data, error_code, error_payload)
    }
}
