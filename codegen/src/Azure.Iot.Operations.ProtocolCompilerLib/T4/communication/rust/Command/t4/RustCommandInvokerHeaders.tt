<#@ template language="C#" linePragmas="false" #>
<#@ import namespace="Azure.Iot.Operations.ProtocolCompilerLib" #>
/* Code generated by Azure.Iot.Operations.ProtocolCompilerLib v<#=System.Reflection.Assembly.GetExecutingAssembly().GetName().Version#>; DO NOT EDIT. */

use azure_iot_operations_mqtt::interface::ManagedClient;
use serde_json;

use super::<#=this.errorCodeSchema.GetFileName(TargetLanguage.Rust)#>::<#=this.errorCodeSchema.GetTypeName(TargetLanguage.Rust)#>;
<# if (this.errorInfoSchema != null) { #>
use super::<#=this.errorInfoSchema.GetFileName(TargetLanguage.Rust)#>::<#=this.errorInfoSchema.GetTypeName(TargetLanguage.Rust)#>;
<# } #>
pub use super::<#=this.commandName.GetFileName(TargetLanguage.Rust, "command", "invoker")#>::<#=this.commandName.GetTypeName(TargetLanguage.Rust, "command", "invoker")#>;

use azure_iot_operations_protocol::rpc_command::invoker;

impl<C> <#=this.commandName.GetTypeName(TargetLanguage.Rust, "command", "invoker")#><C>
where
    C: ManagedClient + Clone + Send + Sync + 'static,
    C::PubReceiver: Send + Sync + 'static,
{
    pub fn application_error_headers(
        custom_user_data: &Vec<(String, String)>,
    ) -> (Option<<#=this.errorCodeSchema.GetTypeName(TargetLanguage.Rust)#>>, Option<<#=this.errorInfoSchema?.GetTypeName(TargetLanguage.Rust) ?? "String"#>>) {
        let (error_code, error_payload) = invoker::application_error_headers(custom_user_data);

        let <#=this.errorCodeName.GetVariableName(TargetLanguage.Rust)#> =
            match error_code.as_deref() {
<# foreach (KeyValuePair<CodeName, string> kvp in this.errorCodeEnumeration) { #>
                Some("<#=kvp.Value#>") => Some(<#=this.errorCodeSchema.GetTypeName(TargetLanguage.Rust)#>::<#=kvp.Key.GetTypeName(TargetLanguage.Rust)#>),
<# } #>
                Some(_) => None,
                None => None,
            };

<# if (this.errorInfoSchema != null) { #>
        let <#=this.errorInfoName.GetVariableName(TargetLanguage.Rust)#> =
            if let Some(error_payload) = error_payload {
                serde_json::from_str::<<#=this.errorInfoSchema.GetTypeName(TargetLanguage.Rust)#>>(&error_payload).ok()
            } else {
                None
            };

<# } #>
        (<#=this.errorCodeName.GetVariableName(TargetLanguage.Rust)#>, <#=this.errorInfoName?.GetVariableName(TargetLanguage.Rust) ?? "error_payload"#>)
    }
}

