// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Azure.Iot.Operations.ProtocolCompiler.IntegrationTests.T4
{
    using Azure.Iot.Operations.ProtocolCompiler.IntegrationTests.SchemaExtractor;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class DotNetClientShim : DotNetClientShimBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("/* This is an auto-generated file.  Do not modify. */\r\n\r\nnamespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.testName));
            this.Write(@".Library
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;
    using Azure.Iot.Operations.Protocol;
    using Azure.Iot.Operations.Protocol.RPC;
    using Azure.Iot.Operations.Protocol.Telemetry;
    using Azure.Iot.Operations.Protocol.UnitTests.Serializers.");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.projectComponentName));
            this.Write(";\r\n    using Azure.Iot.Operations.ProtocolCompiler.IntegrationTests.STK;\r\n    using MQTTnet.Client;\r\n" +
                    "    using Newtonsoft.Json.Linq;\r\n");
 foreach (string additionalUsing in this.additionalUsings) { 
            this.Write("    using ");
            this.Write(this.ToStringHelper.ToStringWithCulture(additionalUsing));
            this.Write(";\r\n");
 } 
            this.Write("    using ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.genNamespace));
            this.Write(";\r\n\r\n    public class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.serviceName));
            this.Write("ClientShim : ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.serviceName));
            this.Write(".Client, IClientShim\r\n    {\r\n        private string remoteAssetId;\r\n\r\n");
 foreach (var telemNameSchema in this.telemNameSchemas) { 
            this.Write("        private Action<string, JToken> ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Decapitalize(telemNameSchema.Item2.SchemaName)));
            this.Write("Handler;\r\n\r\n");
 } 
            this.Write("        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.serviceName));
            this.Write("ClientShim(IMqttClient mqttClient, string remoteAssetId)\r\n            : base(mqtt" +
                    "Client)\r\n        {\r\n            this.remoteAssetId = remoteAssetId;\r\n           " +
                    " this.ClearHandlers();\r\n        }\r\n\r\n        public void ClearHandlers()\r\n      " +
                    "  {\r\n");
 foreach (var telemNameSchema in this.telemNameSchemas) { 
            this.Write("            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(Decapitalize(telemNameSchema.Item2.SchemaName)));
            this.Write("Handler = null;\r\n");
 } 
            this.Write("        }\r\n\r\n        public void RegisterHandler(string telemetryName, Action<str" +
                    "ing, JToken> handler)\r\n        {\r\n            switch (telemetryName)\r\n          " +
                    "  {\r\n");
 if (!this.telemNameSchemas.Any(t => t.Item1 == null)) { 
            this.Write("                case \"\":\r\n                    throw new Exception($\"Unnamed telem" +
                    "etry is not supported by this model\");\r\n");
 } 
 foreach (var telemNameSchema in this.telemNameSchemas) { 
            this.Write("                case \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(telemNameSchema.Item1 ?? string.Empty));
            this.Write("\":\r\n                    this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(Decapitalize(telemNameSchema.Item2.SchemaName)));
            this.Write("Handler = handler;\r\n                    return;\r\n");
 } 
            this.Write(@"                default:
                    throw new Exception($""Unrecognized telemetry '{telemetryName}'"");
            }
        }

        public Task<JToken> InvokeCommand(string commandName, JToken requestToken, TimeSpan commandTimeout)
        {
            switch (commandName)
            {
");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("                case \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(cmdNameReqResp.Item1));
            this.Write("\":\r\n                    return this.Invoke_");
            this.Write(this.ToStringHelper.ToStringWithCulture(cmdNameReqResp.Item1));
            this.Write("(requestToken, commandTimeout);\r\n");
 } 
            this.Write(@"                default:
                    throw new Exception($""Unrecognized command '{commandName}'"");
            }
        }

        public RpcCallAsync<JToken> InvokeCommand(string commandName, JToken requestToken, CommandRequestMetadata requestMetadata, TimeSpan commandTimeout)
        {
            switch (commandName)
            {
");
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("                case \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(cmdNameReqResp.Item1));
            this.Write("\":\r\n                    return this.Invoke_");
            this.Write(this.ToStringHelper.ToStringWithCulture(cmdNameReqResp.Item1));
            this.Write("(requestToken, requestMetadata, commandTimeout);\r\n");
 } 
            this.Write("                default:\r\n                    throw new Exception($\"Unrecognized " +
                    "command \'{commandName}\'\");\r\n            }\r\n        }\r\n");
 foreach (var telemNameSchema in this.telemNameSchemas) { 
            this.Write("\r\n        public override void ReceiveTelemetry(string senderId, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(telemNameSchema.Item2.SchemaName));
            this.Write(" telemetry)\r\n        {\r\n            this.CheckHandler(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(telemNameSchema.Item1 ?? string.Empty));
            this.Write("\", this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(Decapitalize(telemNameSchema.Item2.SchemaName)));
            this.Write("Handler);\r\n\r\n            JObject telemObj = new();\r\n");
 foreach (KeyValuePair<string, SchemaTypeInfo> fieldSchema in ((ObjectTypeInfo)telemNameSchema.Item2).FieldSchemas) { 
            this.Write("\r\n            if (");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.transcoder.CheckPresence("telemetry", fieldSchema.Key, fieldSchema.Value)));
            this.Write(")\r\n            {\r\n                telemObj[\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(fieldSchema.Key));
            this.Write("\"] = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.transcoder.JTokenFromSchemaField("telemetry", fieldSchema.Key, fieldSchema.Value)));
            this.Write(";\r\n            }\r\n");
 } 
            this.Write("\r\n            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(Decapitalize(telemNameSchema.Item2.SchemaName)));
            this.Write("Handler(senderId, telemObj);\r\n        }\r\n");
 } 
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("\r\n        public async Task<JToken> Invoke_");
            this.Write(this.ToStringHelper.ToStringWithCulture(cmdNameReqResp.Item1));
            this.Write("(JToken requestToken, TimeSpan commandTimeout)\r\n        {\r\n");
 if (cmdNameReqResp.Item2 != null) { 
            this.Write("            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(cmdNameReqResp.Item2.SchemaName));
            this.Write(" request = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.transcoder.SchemaValueFromJToken($"requestToken", cmdNameReqResp.Item2)));
            this.Write(";\r\n");
 } 
 if (cmdNameReqResp.Item3 != null) { 
            this.Write("            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(cmdNameReqResp.Item3.SchemaName));
            this.Write(" response = await this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(Capitalize(cmdNameReqResp.Item1)));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.doesCommandTargetExecutor ? "this.remoteAssetId, " : ""));
            this.Write(this.ToStringHelper.ToStringWithCulture(cmdNameReqResp.Item2 != null ? "request, " : ""));
            this.Write("commandTimeout: commandTimeout);\r\n            return ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.transcoder.JTokenFromSchemaValue("response", cmdNameReqResp.Item3)));
            this.Write(";\r\n");
 } else { 
            this.Write("            await this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(Capitalize(cmdNameReqResp.Item1)));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.doesCommandTargetExecutor ? "this.remoteAssetId, " : ""));
            this.Write(this.ToStringHelper.ToStringWithCulture(cmdNameReqResp.Item2 != null ? "request, " : ""));
            this.Write("commandTimeout: commandTimeout);\r\n            return JValue.CreateNull();\r\n");
 } 
            this.Write("        }\r\n");
 } 
 foreach (var cmdNameReqResp in this.cmdNameReqResps) { 
            this.Write("\r\n        public RpcCallAsync<JToken> Invoke_");
            this.Write(this.ToStringHelper.ToStringWithCulture(cmdNameReqResp.Item1));
            this.Write("(JToken requestToken, CommandRequestMetadata requestMetadata, TimeSpan commandTim" +
                    "eout)\r\n        {\r\n");
 if (cmdNameReqResp.Item2 != null) { 
            this.Write("            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(cmdNameReqResp.Item2.SchemaName));
            this.Write(" request = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.transcoder.SchemaValueFromJToken($"requestToken", cmdNameReqResp.Item2)));
            this.Write(";\r\n");
 } 
            this.Write("            ExtendedResponse<");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.SchemaType(cmdNameReqResp.Item3)));
            this.Write("> extended = this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(Capitalize(cmdNameReqResp.Item1)));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.doesCommandTargetExecutor ? "this.remoteAssetId, " : ""));
            this.Write(this.ToStringHelper.ToStringWithCulture(cmdNameReqResp.Item2 != null ? "request, " : ""));
            this.Write("requestMetadata, commandTimeout).WithMetadata().Result;\r\n            return new R" +
                    "pcCallAsync<JToken>(Task.FromResult(new ExtendedResponse<JToken> { Response = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(cmdNameReqResp.Item3 != null ? this.transcoder.JTokenFromSchemaValue("extended.Response", cmdNameReqResp.Item3) : "JValue.CreateNull()"));
            this.Write(", ResponseMetadata = extended.ResponseMetadata }), (Guid)extended.ResponseMetadat" +
                    "a.CorrelationData);\r\n        }\r\n");
 } 
 if (!this.telemNameSchemas.Any()) { 
            this.Write("\r\n        public Task StartAsync(CancellationToken cancellationToken = default)\r\n" +
                    "        {\r\n            return Task.CompletedTask;\r\n        }\r\n");
 } 
 if (this.telemNameSchemas.Any()) { 
            this.Write(@"
        private void CheckHandler(string telemetryName, Action<string, JToken> handler)
        {
            if (handler == null)
            {
                throw new Exception($""No handler registered for {(telemetryName != string.Empty ? $""telemetry '{telemetryName}'"" : ""unnamed telemetry"")}"");
            }
        }
");
 } 
 if (this.transcoder.CapitalizerNeeded) { 
            this.Write("\r\n        private static string Capitalize(string value)\r\n        {\r\n            " +
                    "return char.ToUpperInvariant(value[0]) + value.Substring(1);\r\n        }\r\n");
 } 
 if (this.transcoder.DecapitalizerNeeded) { 
            this.Write("\r\n        private static string Decapitalize(string value)\r\n        {\r\n          " +
                    "  return char.ToLowerInvariant(value[0]) + value.Substring(1);\r\n        }\r\n");
 } 
            this.Write("    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }

    private string SchemaType(SchemaTypeInfo schema) => schema == null ? this.transcoder.EmptySchemaType : schema.SchemaName;

    public static string Capitalize(string inString) => char.ToUpperInvariant(inString[0]) + inString.Substring(1);

    public static string Decapitalize(string inString) => char.ToLowerInvariant(inString[0]) + inString.Substring(1);

    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class DotNetClientShimBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
