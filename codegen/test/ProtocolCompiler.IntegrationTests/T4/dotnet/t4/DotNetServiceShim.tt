<#@ template language="C#" linePragmas="false" #>
<#@ import namespace="Azure.Iot.Operations.ProtocolCompiler.IntegrationTests.SchemaExtractor" #>
/* This is an auto-generated file.  Do not modify. */

namespace <#=this.testName#>.Library
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;
    using Azure.Iot.Operations.Protocol;
    using Azure.Iot.Operations.Protocol.RPC;
    using Azure.Iot.Operations.Protocol.Telemetry;
    using Azure.Iot.Operations.Protocol.UnitTests.Serializers.<#=this.projectComponentName#>;
    using Azure.Iot.Operations.ProtocolCompiler.IntegrationTests.STK;
    using MQTTnet.Client;
    using Newtonsoft.Json.Linq;
<# foreach (string additionalUsing in this.additionalUsings) { #>
    using <#=additionalUsing#>;
<# } #>
    using <#=this.genNamespace#>;

    public class <#=this.serviceName#>ServiceShim : <#=this.serviceName#>.Service, IServiceShim
    {
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
        private <#=this.HandlerType()#> <#=Decapitalize(cmdNameReqResp.Item1)#>Handler;

<# } #>
        public <#=this.serviceName#>ServiceShim(IMqttClient mqttClient)
            : base(mqttClient)
        {
            this.ClearHandlers();
        }

        public void ClearHandlers()
        {
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
            this.<#=Decapitalize(cmdNameReqResp.Item1)#>Handler = null;
<# } #>
        }

        public void RegisterHandler(string commandName, <#=this.HandlerType()#> handler)
        {
            switch (commandName)
            {
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>
                case "<#=cmdNameReqResp.Item1#>":
                    this.<#=Decapitalize(cmdNameReqResp.Item1)#>Handler = handler;
                    return;
<# } #>
                default:
                    throw new Exception($"Unrecognized command '{commandName}'");
            }
        }

        public void SendTelemetry(string telemetryName, JToken telemetryToken)
        {
            switch (telemetryName)
            {
<# if (!this.telemNameSchemas.Any(t => t.Item1 == null)) { #>
                case "":
                    throw new Exception($"Unnamed telemetry is not supported by this model");
<# } #>
<# foreach (var telemNameSchema in this.telemNameSchemas) { #>
                case "<#=telemNameSchema.Item1 ?? string.Empty#>":
                    this.Send_<#=Decapitalize(telemNameSchema.Item2.SchemaName)#>((JObject)telemetryToken);
                    return;
<# } #>
                default:
                    throw new Exception($"Unrecognized telemetry '{telemetryName}'");
            }
        }
<# foreach (var cmdNameReqResp in this.cmdNameReqResps) { #>

        public override Task<#=this.ExtRespType(cmdNameReqResp)#> <#=Capitalize(cmdNameReqResp.Item1)#>(<#=this.ReqParam(cmdNameReqResp)#>CommandRequestMetadata requestMetadata, CancellationToken cancellationToken)
        {
            this.CheckHandler("<#=cmdNameReqResp.Item1#>", this.<#=Decapitalize(cmdNameReqResp.Item1)#>Handler);
            ExtendedResponse<JToken>? extended = this.<#=Decapitalize(cmdNameReqResp.Item1)#>Handler(<#=cmdNameReqResp.Item2 != null ? this.transcoder.JTokenFromSchemaValue("request", cmdNameReqResp.Item2) : "JValue.CreateNull()"#>, requestMetadata);
<# if (cmdNameReqResp.Item3 != null) { #>
            <#=cmdNameReqResp.Item3.SchemaName#> response = <#=this.transcoder.SchemaValueFromJToken("extended?.Response", cmdNameReqResp.Item3)#>;
            return Task.FromResult(new ExtendedResponse<<#=this.SchemaType(cmdNameReqResp.Item3)#>> { Response = response, ResponseMetadata = extended?.ResponseMetadata });
<# } else { #>
            return Task.FromResult(extended?.ResponseMetadata);
<# } #>
        }
<# } #>
<# foreach (var telemNameSchema in this.telemNameSchemas) { #>

        public void Send_<#=Decapitalize(telemNameSchema.Item2.SchemaName)#>(JObject telemetryObj)
        {
            <#=telemNameSchema.Item2.SchemaName#> <#=Decapitalize(telemNameSchema.Item2.SchemaName)#> = new();
<# foreach (KeyValuePair<string, SchemaTypeInfo> fieldSchema in ((ObjectTypeInfo)telemNameSchema.Item2).FieldSchemas) { #>

            if (telemetryObj.TryGetValue("<#=fieldSchema.Key#>", out JToken <#=Decapitalize(fieldSchema.Key)#>Token))
            {
                <#=this.transcoder.AssignSchemaFieldFromJToken(Decapitalize(telemNameSchema.Item2.SchemaName), fieldSchema.Key, $"{Decapitalize(fieldSchema.Key)}Token", fieldSchema.Value)#>
            }
<# } #>

            this.SendTelemetry(<#=Decapitalize(telemNameSchema.Item2.SchemaName)#>).Wait();
        }
<# } #>
<# if (!this.cmdNameReqResps.Any()) { #>

        public Task StartAsync(CancellationToken cancellationToken = default)
        {
            return Task.CompletedTask;
        }
<# } #>
<# if (this.cmdNameReqResps.Any()) { #>

        private void CheckHandler(string commandName, <#=this.HandlerType()#> handler)
        {
            if (handler == null)
            {
                throw new Exception($"No handler registered for command '{commandName}'");
            }
        }
<# } #>
<# if (this.transcoder.CapitalizerNeeded) { #>

        private static string Capitalize(string value)
        {
            return char.ToUpperInvariant(value[0]) + value.Substring(1);
        }
<# } #>
<# if (this.transcoder.DecapitalizerNeeded) { #>

        private static string Decapitalize(string value)
        {
            return char.ToLowerInvariant(value[0]) + value.Substring(1);
        }
<# } #>
    }
}
<#+
    private string HandlerType() => "Func<JToken, CommandRequestMetadata, ExtendedResponse<JToken>?>";

    private string ExtRespType((string, SchemaTypeInfo, SchemaTypeInfo) cmdNameReqResp) => (cmdNameReqResp.Item3 != null ? $"<ExtendedResponse<{this.SchemaType(cmdNameReqResp.Item3)}>>" : "<CommandResponseMetadata>");

    private string ReqParam((string, SchemaTypeInfo, SchemaTypeInfo) cmdNameReqResp) => cmdNameReqResp.Item2 != null ? $"{this.SchemaType(cmdNameReqResp.Item2)} request, " : "";

    private string SchemaType(SchemaTypeInfo schema) => schema == null ? this.transcoder.EmptySchemaType : schema.SchemaName;

    public static string Capitalize(string inString) => char.ToUpperInvariant(inString[0]) + inString.Substring(1);

    public static string Decapitalize(string inString) => char.ToLowerInvariant(inString[0]) + inString.Substring(1);
#>
