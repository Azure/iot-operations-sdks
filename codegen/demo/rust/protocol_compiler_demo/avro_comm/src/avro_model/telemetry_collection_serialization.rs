/* Code generated by Azure.Iot.Operations.ProtocolCompiler v0.6.0.0; DO NOT EDIT. */

use std::io::Cursor;

use apache_avro;
use azure_iot_operations_protocol::common::payload_serialize::{
    DeserializationError, FormatIndicator, PayloadSerialize, SerializedPayload,
};
use lazy_static;

use super::telemetry_collection::TelemetryCollection;

impl PayloadSerialize for TelemetryCollection {
    type Error = apache_avro::Error;

    fn serialize(self) -> Result<SerializedPayload, Self::Error> {
        let payload = match apache_avro::to_value(&self) {
            Ok(v) => apache_avro::to_avro_datum(&SCHEMA, v),
            Err(e) => Err(e),
        };
        Ok(SerializedPayload {
            payload: payload?,
            content_type: "application/avro".to_string(),
            format_indicator: FormatIndicator::UnspecifiedBytes,
        })
    }

    fn deserialize(
        payload: &[u8],
        content_type: &Option<String>,
        _format_indicator: &FormatIndicator,
    ) -> Result<Self, DeserializationError<Self::Error>> {
        if let Some(content_type) = content_type {
            if content_type != "application/avro" {
                return Err(DeserializationError::UnsupportedContentType(format!(
                    "Invalid content type: '{content_type}'. Must be 'application/avro'"
                )));
            }
        }
        match apache_avro::from_avro_datum(&SCHEMA, &mut Cursor::new(payload), None) {
            Ok(v) => apache_avro::from_value(&v),
            Err(e) => Err(e),
        }
        .map_err(DeserializationError::InvalidPayload)
    }
}

lazy_static::lazy_static! { pub static ref SCHEMA: apache_avro::Schema = apache_avro::Schema::parse_str(RAW_SCHEMA).unwrap(); }

const RAW_SCHEMA: &str = r#"
{
  "namespace": "avro_comm.AvroModel",
  "name": "TelemetryCollection",
  "type": "record",
  "fields": [
    {
      "name": "lengths",
"type": [
  "null",
  {
"type": "array",
"items": {
  "type": "double"
},
"default": []
  }
]
    },
    {
      "name": "proximity",
"type": [
  "null",
  {
"name": "ProximitySchema",
"type": "enum",
"symbols": [ "near", "far" ]
  }
]
    },
    {
      "name": "schedule",
"type": [
  "null",
  {
"name": "ScheduleSchema",
"type": "record",
"fields": [
  {
    "name": "course",
"type": [
  "null",
  {
    "type": "string"
  }
]
  },
  {
    "name": "credit",
"type": [
  "null",
  {
    "type": "string"
  }
]
  }
]
  }
]
    }
  ]
}
"#;
