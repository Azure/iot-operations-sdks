/* Code generated by Azure.Iot.Operations.ProtocolCompiler v0.10.0.0; DO NOT EDIT. */

#nullable enable

namespace SemanticDataClient.FirstModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;
    using Azure.Iot.Operations.Protocol.Models;
    using Azure.Iot.Operations.Protocol;
    using Azure.Iot.Operations.Protocol.RPC;
    using Azure.Iot.Operations.Protocol.Telemetry;
    using SemanticDataClient;

    [TelemetryTopic("sample/{modelId}/{senderId}/telemetry/{telemetryName}")]
    [System.CodeDom.Compiler.GeneratedCode("Azure.Iot.Operations.ProtocolCompiler", "0.10.0.0")]
    public static partial class FirstModel
    {
        public abstract partial class Client
        {
            private ApplicationContext applicationContext;
            private IMqttPubSubClient mqttClient;
            private readonly ThermalConditionTelemetryReceiver thermalConditionTelemetryReceiver;
            private readonly ArmPositionTelemetryReceiver armPositionTelemetryReceiver;
            private readonly StatusTelemetryReceiver statusTelemetryReceiver;
            private readonly ModeTelemetryReceiver modeTelemetryReceiver;

            /// <summary>
            /// Construct a new instance of this client.
            /// </summary>
            /// <param name="applicationContext">The shared context for your application.</param>
            /// <param name="mqttClient">The MQTT client to use.</param>
            /// <param name="topicTokenMap">
            /// The topic token replacement map to use for all operations by default. Generally, this will include the token values
            /// for topic tokens such as "modelId" which should be the same for the duration of this client's lifetime.
            /// </param>
            public Client(ApplicationContext applicationContext, IMqttPubSubClient mqttClient, Dictionary<string, string>? topicTokenMap = null)
            {
                this.applicationContext = applicationContext;
                this.mqttClient = mqttClient;

                this.thermalConditionTelemetryReceiver = new ThermalConditionTelemetryReceiver(applicationContext, mqttClient) { OnTelemetryReceived = this.ReceiveTelemetry };
                if (topicTokenMap != null)
                {
                    foreach (string topicTokenKey in topicTokenMap.Keys)
                    {
                        this.thermalConditionTelemetryReceiver.TopicTokenMap.TryAdd("ex:" + topicTokenKey, topicTokenMap[topicTokenKey]);
                    }
                }
                this.armPositionTelemetryReceiver = new ArmPositionTelemetryReceiver(applicationContext, mqttClient) { OnTelemetryReceived = this.ReceiveTelemetry };
                if (topicTokenMap != null)
                {
                    foreach (string topicTokenKey in topicTokenMap.Keys)
                    {
                        this.armPositionTelemetryReceiver.TopicTokenMap.TryAdd("ex:" + topicTokenKey, topicTokenMap[topicTokenKey]);
                    }
                }
                this.statusTelemetryReceiver = new StatusTelemetryReceiver(applicationContext, mqttClient) { OnTelemetryReceived = this.ReceiveTelemetry };
                if (topicTokenMap != null)
                {
                    foreach (string topicTokenKey in topicTokenMap.Keys)
                    {
                        this.statusTelemetryReceiver.TopicTokenMap.TryAdd("ex:" + topicTokenKey, topicTokenMap[topicTokenKey]);
                    }
                }
                this.modeTelemetryReceiver = new ModeTelemetryReceiver(applicationContext, mqttClient) { OnTelemetryReceived = this.ReceiveTelemetry };
                if (topicTokenMap != null)
                {
                    foreach (string topicTokenKey in topicTokenMap.Keys)
                    {
                        this.modeTelemetryReceiver.TopicTokenMap.TryAdd("ex:" + topicTokenKey, topicTokenMap[topicTokenKey]);
                    }
                }
            }

            public ThermalConditionTelemetryReceiver ThermalConditionTelemetryReceiver { get => this.thermalConditionTelemetryReceiver; }

            public ArmPositionTelemetryReceiver ArmPositionTelemetryReceiver { get => this.armPositionTelemetryReceiver; }

            public StatusTelemetryReceiver StatusTelemetryReceiver { get => this.statusTelemetryReceiver; }

            public ModeTelemetryReceiver ModeTelemetryReceiver { get => this.modeTelemetryReceiver; }

            public abstract Task ReceiveTelemetry(string senderId, ThermalConditionTelemetry telemetry, IncomingTelemetryMetadata metadata);

            public abstract Task ReceiveTelemetry(string senderId, ArmPositionTelemetry telemetry, IncomingTelemetryMetadata metadata);

            public abstract Task ReceiveTelemetry(string senderId, StatusTelemetry telemetry, IncomingTelemetryMetadata metadata);

            public abstract Task ReceiveTelemetry(string senderId, ModeTelemetry telemetry, IncomingTelemetryMetadata metadata);

            /// <summary>
            /// Begin accepting telemetry for all telemetry receivers.
            /// </summary>
            /// <param name="cancellationToken">Cancellation token.</param>
            public async Task StartAsync(CancellationToken cancellationToken = default)
            {
                await Task.WhenAll(
                    this.thermalConditionTelemetryReceiver.StartAsync(cancellationToken),
                    this.armPositionTelemetryReceiver.StartAsync(cancellationToken),
                    this.statusTelemetryReceiver.StartAsync(cancellationToken),
                    this.modeTelemetryReceiver.StartAsync(cancellationToken)).ConfigureAwait(false);
            }

            /// <summary>
            /// Stop accepting telemetry for all telemetry receivers.
            /// </summary>
            /// <param name="cancellationToken">Cancellation token.</param>
            public async Task StopAsync(CancellationToken cancellationToken = default)
            {
                await Task.WhenAll(
                    this.thermalConditionTelemetryReceiver.StopAsync(cancellationToken),
                    this.armPositionTelemetryReceiver.StopAsync(cancellationToken),
                    this.statusTelemetryReceiver.StopAsync(cancellationToken),
                    this.modeTelemetryReceiver.StopAsync(cancellationToken)).ConfigureAwait(false);
            }

            public async ValueTask DisposeAsync()
            {
                await this.thermalConditionTelemetryReceiver.DisposeAsync().ConfigureAwait(false);
                await this.armPositionTelemetryReceiver.DisposeAsync().ConfigureAwait(false);
                await this.statusTelemetryReceiver.DisposeAsync().ConfigureAwait(false);
                await this.modeTelemetryReceiver.DisposeAsync().ConfigureAwait(false);
            }

            public async ValueTask DisposeAsync(bool disposing)
            {
                await this.thermalConditionTelemetryReceiver.DisposeAsync(disposing).ConfigureAwait(false);
                await this.armPositionTelemetryReceiver.DisposeAsync(disposing).ConfigureAwait(false);
                await this.statusTelemetryReceiver.DisposeAsync(disposing).ConfigureAwait(false);
                await this.modeTelemetryReceiver.DisposeAsync(disposing).ConfigureAwait(false);
            }
        }
    }
}
