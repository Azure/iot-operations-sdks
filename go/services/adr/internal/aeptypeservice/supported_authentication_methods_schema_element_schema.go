// Code generated by Azure.Iot.Operations.ProtocolCompiler v0.10.0.0; DO NOT EDIT.
package aeptypeservice

import (
	"encoding/json"
	"errors"
)

type SupportedAuthenticationMethodsSchemaElementSchema int32

const (
	SupportedAuthenticationMethodsSchemaElementSchemaAnonymous SupportedAuthenticationMethodsSchemaElementSchema = iota
	SupportedAuthenticationMethodsSchemaElementSchemaCertificate SupportedAuthenticationMethodsSchemaElementSchema = iota
	SupportedAuthenticationMethodsSchemaElementSchemaUsernamePassword SupportedAuthenticationMethodsSchemaElementSchema = iota
)

func (v SupportedAuthenticationMethodsSchemaElementSchema) String() string {
	switch v {
	case SupportedAuthenticationMethodsSchemaElementSchemaAnonymous:
		return "Anonymous"
	case SupportedAuthenticationMethodsSchemaElementSchemaCertificate:
		return "Certificate"
	case SupportedAuthenticationMethodsSchemaElementSchemaUsernamePassword:
		return "UsernamePassword"
	default:
		return ""
	}
}

func (v SupportedAuthenticationMethodsSchemaElementSchema) MarshalJSON() ([]byte, error) {
	var s string
	switch v {
	case SupportedAuthenticationMethodsSchemaElementSchemaAnonymous:
		s = "Anonymous"
	case SupportedAuthenticationMethodsSchemaElementSchemaCertificate:
		s = "Certificate"
	case SupportedAuthenticationMethodsSchemaElementSchemaUsernamePassword:
		s = "UsernamePassword"
	default:
		return []byte{}, errors.New("unable to marshal unrecognized enum value to JSON")
	}

	return json.Marshal(s)
}

func (v *SupportedAuthenticationMethodsSchemaElementSchema) UnmarshalJSON(b []byte) error {
	var s string
	if err := json.Unmarshal(b, &s); err != nil {
		return err
	}

	switch s {
	case "Anonymous":
		*v = SupportedAuthenticationMethodsSchemaElementSchemaAnonymous
	case "Certificate":
		*v = SupportedAuthenticationMethodsSchemaElementSchemaCertificate
	case "UsernamePassword":
		*v = SupportedAuthenticationMethodsSchemaElementSchemaUsernamePassword
	default:
		return errors.New("unable to unmarshal unrecognized enum value from JSON")
	}

	return nil
}
