// Code generated by Azure.Iot.Operations.ProtocolCompiler; DO NOT EDIT.
package dtmi_ms_adr_SchemaRegistry__1

import (
	"github.com/Azure/iot-operations-sdks/go/protocol"
)

type SchemaRegistryService struct {
	protocol.Listeners
	*PutCommandExecutor
	*GetCommandExecutor
}

type SchemaRegistryClient struct {
	protocol.Listeners
	*PutCommandInvoker
	*GetCommandInvoker
}

const (
	ModelID = "dtmi:ms:adr:SchemaRegistry;1"
	CommandTopic = "adr/{modelId}/{commandName}"
)

func NewSchemaRegistryService(
	client protocol.MqttClient,
	putHandler protocol.CommandHandler[PutRequestPayload, PutResponsePayload],
	getHandler protocol.CommandHandler[GetRequestPayload, GetResponsePayload],
	opts ...protocol.Option,
) (*SchemaRegistryService, error) {
	var err error

	serverOpts := []protocol.Option{
		protocol.WithTopicTokenNamespace("ex:"),
		protocol.WithTopicTokens{
			"modelId":    ModelID,
			"executorId": client.ID(),
		},
	}

	var executorOpts protocol.CommandExecutorOptions
	executorOpts.ApplyOptions(opts, serverOpts...)

	schemaRegistryService := &SchemaRegistryService{}

	schemaRegistryService.PutCommandExecutor, err = NewPutCommandExecutor(
		client,
		CommandTopic,
		putHandler,
		&executorOpts,
	)
	if err != nil {
		schemaRegistryService.Close()
		return nil, err
	}
	schemaRegistryService.Listeners = append(schemaRegistryService.Listeners, schemaRegistryService.PutCommandExecutor)

	schemaRegistryService.GetCommandExecutor, err = NewGetCommandExecutor(
		client,
		CommandTopic,
		getHandler,
		&executorOpts,
	)
	if err != nil {
		schemaRegistryService.Close()
		return nil, err
	}
	schemaRegistryService.Listeners = append(schemaRegistryService.Listeners, schemaRegistryService.GetCommandExecutor)

	return schemaRegistryService, nil
}

func NewSchemaRegistryClient(
	client protocol.MqttClient,
	opts ...protocol.Option,
) (*SchemaRegistryClient, error) {
	var err error

	clientOpts := []protocol.Option{
		protocol.WithTopicTokenNamespace("ex:"),
		protocol.WithTopicTokens{
			"modelId":    ModelID,
			"invokerClientId": client.ID(),
		},
	}

	var invokerOpts protocol.CommandInvokerOptions
	invokerOpts.ApplyOptions(opts, clientOpts...)

	schemaRegistryClient := &SchemaRegistryClient{}

	schemaRegistryClient.PutCommandInvoker, err = NewPutCommandInvoker(
		client,
		CommandTopic,
		&invokerOpts,
	)
	if err != nil {
		schemaRegistryClient.Close()
		return nil, err
	}
	schemaRegistryClient.Listeners = append(schemaRegistryClient.Listeners, schemaRegistryClient.PutCommandInvoker)

	schemaRegistryClient.GetCommandInvoker, err = NewGetCommandInvoker(
		client,
		CommandTopic,
		&invokerOpts,
	)
	if err != nil {
		schemaRegistryClient.Close()
		return nil, err
	}
	schemaRegistryClient.Listeners = append(schemaRegistryClient.Listeners, schemaRegistryClient.GetCommandInvoker)

	return schemaRegistryClient, nil
}
