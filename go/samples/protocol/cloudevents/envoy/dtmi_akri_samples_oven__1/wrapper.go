// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

// Code generated by Azure.Iot.Operations.ProtocolCompiler; DO NOT EDIT.
package dtmi_akri_samples_oven__1

import (
	"github.com/Azure/iot-operations-sdks/go/protocol"
)

type OvenService struct {
	protocol.Listeners
	*TelemetryCollectionSender
}

type OvenClient struct {
	protocol.Listeners
	*TelemetryCollectionReceiver
}

const (
	ModelID = "dtmi:akri:samples:oven;1"
	TelemetryTopic = "akri/samples/{modelId}/{senderId}"
)

func NewOvenService(
	client protocol.MqttClient,
	opts ...protocol.Option,
) (*OvenService, error) {
	var err error

	serverOpts := []protocol.Option{
		protocol.WithTopicTokenNamespace("ex:"),
		protocol.WithTopicTokens{
			"modelId":    ModelID,
			"senderId":   client.ID(),
		},
	}

	var senderOpts protocol.TelemetrySenderOptions
	senderOpts.ApplyOptions(opts, serverOpts...)

	ovenService := &OvenService{}

	ovenService.TelemetryCollectionSender, err = NewTelemetryCollectionSender(
		client,
		TelemetryTopic,
		&senderOpts,
	)
	if err != nil {
		ovenService.Close()
		return nil, err
	}

	return ovenService, nil
}

func NewOvenClient(
	client protocol.MqttClient,
	telemetryHandler protocol.TelemetryHandler[TelemetryCollection],
	opts ...protocol.Option,
) (*OvenClient, error) {
	var err error

	clientOpts := []protocol.Option{
		protocol.WithTopicTokenNamespace("ex:"),
		protocol.WithTopicTokens{
			"modelId":    ModelID,
		},
	}

	var receiverOpts protocol.TelemetryReceiverOptions
	receiverOpts.ApplyOptions(opts, clientOpts...)

	ovenClient := &OvenClient{}

	ovenClient.TelemetryCollectionReceiver, err = NewTelemetryCollectionReceiver(
		client,
		TelemetryTopic,
		telemetryHandler,
		&receiverOpts,
	)
	if err != nil {
		ovenClient.Close()
		return nil, err
	}
	ovenClient.Listeners = append(ovenClient.Listeners, ovenClient.TelemetryCollectionReceiver)

	return ovenClient, nil
}
