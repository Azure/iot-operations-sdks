// Code generated by Azure.Iot.Operations.ProtocolCompiler v0.6.0.0; DO NOT EDIT.
package dtmi_example_Complex__1

import (
	"context"

	"github.com/Azure/iot-operations-sdks/go/protocol"
)

type ComplexCommandHandlers interface {

	GetTemperatures(
		context.Context,
		*protocol.CommandRequest[GetTemperaturesRequestPayload],
	) (*protocol.CommandResponse[GetTemperaturesResponsePayload], error)
}

type ComplexService struct {
	protocol.Listeners
	*GetTemperaturesCommandExecutor
	*TelemetryCollectionSender
}

type ComplexClient struct {
	protocol.Listeners
	*GetTemperaturesCommandInvoker
	*TelemetryCollectionReceiver
}

const (
	CommandTopic = "rpc/command-sample/{executorId}/{commandName}"
	TelemetryTopic = "telemetry/telemetry-sample"
)

func NewComplexService(
	app *protocol.Application,
	client protocol.MqttClient,
	commandHandlers ComplexCommandHandlers,
	opts ...protocol.Option,
) (*ComplexService, error) {
	var err error

	serverOpts := []protocol.Option{
		protocol.WithTopicTokenNamespace("ex:"),
		protocol.WithTopicTokens{
			"executorId": client.ID(),
			"senderId":   client.ID(),
		},
	}

	var executorOpts protocol.CommandExecutorOptions
	executorOpts.ApplyOptions(opts, serverOpts...)

	var senderOpts protocol.TelemetrySenderOptions
	senderOpts.ApplyOptions(opts, serverOpts...)

	complexService := &ComplexService{}

	complexService.GetTemperaturesCommandExecutor, err = NewGetTemperaturesCommandExecutor(
		app,
		client,
		CommandTopic,
		commandHandlers.GetTemperatures,
		&executorOpts,
	)
	if err != nil {
		complexService.Close()
		return nil, err
	}
	complexService.Listeners = append(complexService.Listeners, complexService.GetTemperaturesCommandExecutor)

	complexService.TelemetryCollectionSender, err = NewTelemetryCollectionSender(
		app,
		client,
		TelemetryTopic,
		&senderOpts,
	)
	if err != nil {
		complexService.Close()
		return nil, err
	}

	return complexService, nil
}

func NewComplexClient(
	app *protocol.Application,
	client protocol.MqttClient,
	telemetryHandler protocol.TelemetryHandler[TelemetryCollection],
	opts ...protocol.Option,
) (*ComplexClient, error) {
	var err error

	clientOpts := []protocol.Option{
		protocol.WithTopicTokenNamespace("ex:"),
		protocol.WithTopicTokens{
			"invokerClientId": client.ID(),
		},
	}

	var invokerOpts protocol.CommandInvokerOptions
	invokerOpts.ApplyOptions(opts, clientOpts...)

	var receiverOpts protocol.TelemetryReceiverOptions
	receiverOpts.ApplyOptions(opts, clientOpts...)

	complexClient := &ComplexClient{}

	complexClient.GetTemperaturesCommandInvoker, err = NewGetTemperaturesCommandInvoker(
		app,
		client,
		CommandTopic,
		&invokerOpts,
	)
	if err != nil {
		complexClient.Close()
		return nil, err
	}
	complexClient.Listeners = append(complexClient.Listeners, complexClient.GetTemperaturesCommandInvoker)

	complexClient.TelemetryCollectionReceiver, err = NewTelemetryCollectionReceiver(
		app,
		client,
		TelemetryTopic,
		telemetryHandler,
		&receiverOpts,
	)
	if err != nil {
		complexClient.Close()
		return nil, err
	}
	complexClient.Listeners = append(complexClient.Listeners, complexClient.TelemetryCollectionReceiver)

	return complexClient, nil
}
