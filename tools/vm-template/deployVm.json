{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.34.44.8038",
      "templateHash": "4274200260410265923"
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "A Unique name used for the Virtual Machine domain and also for generating resource names."
      }
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Username for the Virtual Machine."
      }
    },
    "authenticationType": {
      "type": "string",
      "defaultValue": "sshPublicKey",
      "allowedValues": [
        "sshPublicKey",
        "password"
      ],
      "metadata": {
        "description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."
      }
    },
    "adminPasswordOrKey": {
      "type": "securestring",
      "metadata": {
        "description": "SSH key or password for the Virtual Machine. SSH key is recommended."
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_E2a_v4",
      "metadata": {
        "description": "The size of the VM, at least 16GB RAM is required"
      }
    }
  },
  "variables": {
    "$fxv#0": "#cloud-config\n\npackage_update: true\npackage_upgrade: true\n# package_reboot_if_required: true\napt:\n  preserve_sources_list: true\n  sources:\n    msft.list:\n      source: 'deb [signed-by=$KEY_FILE] https://packages.microsoft.com/ubuntu/24.04/prod noble main'\n      keyid: BC528686B50D79E339D3721CEB3E94ADBE1229CF\n    azurecli.list:\n      source: 'deb [signed-by=$KEY_FILE] https://packages.microsoft.com/repos/azure-cli noble main'\n      keyid: BC528686B50D79E339D3721CEB3E94ADBE1229CF\n    kubernetes.list:\n      source: 'deb [signed-by=$KEY_FILE] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /'\n      keyid: DE15B14486CD377B9E876E1A234654DA9A296436\n    step.list:\n      source: 'deb https://packages.smallstep.com/stable/debian debs main'\n      key: |\n        -----BEGIN PGP PUBLIC KEY BLOCK-----\n\n        xsBNBGCRt7MBCADkYJHHQQoL6tKrW/LbmfR9ljz7ib2aWno4JO3VKQvLwjyUMPpq\n        /SXXMOnx8jXwgWizpPxQYDRJ0SQXS9ULJ1hXRL/OgMnZAYvYDeV2jBnKsAIEdiG/\n        e1qm8P4W9qpWJc+hNq7FOT13RzGWRx57SdLWSXo0KeY38r9lvjjOmT/cuOcmjwlD\n        T9XYf/RSO+yJ/AsyMdAr+ZbDeQUd9HYJiPdI04lGaGM02MjDMnx+monc+y54t+Z+\n        ry1WtQdzoQt9dHlIPlV1tR+xV5DHHsejCZxu9TWzzSlL5wfBBeEz7R/OIzivGJpW\n        QdJzd+2QDXSRg9q2XYWP5ZVtSgjVVJjNlb6ZABEBAAHNVEFydGlmYWN0IFJlZ2lz\n        dHJ5IFJlcG9zaXRvcnkgU2lnbmVyIDxhcnRpZmFjdC1yZWdpc3RyeS1yZXBvc2l0\n        b3J5LXNpZ25lckBnb29nbGUuY29tPsLAjgQTAQoAOBYhBDW6oLM+nrOW9ZyoOMC6\n        XObcYxWjBQJgkbezAhsDBQsJCAcCBhUKCQgLAgQWAgMBAh4BAheAAAoJEMC6XObc\n        YxWj+igIAMFh6DrAYMeq9sbZ1ZG6oAMrinUheGQbEqe76nIDQNsZnhDwZ2wWqgVC\n        7DgOMqlhQmOmzm7M6Nzmq2dvPwq3xC2OeI9fQyzjT72deBTzLP7PJok9PJFOMdLf\n        ILSsUnmMsheQt4DUO0jYAX2KUuWOIXXJaZ319QyoRNBPYa5qz7qXS7wHLOY89IDq\n        fHt6Aud8ER5zhyOyhytcYMeaGC1g1IKWmgewnhEq02FantMJGlmmFi2eA0EPD02G\n        C3742QGqRxLwjWsm5/TpyuU24EYKRGCRm7QdVIo3ugFSetKrn0byOxWGBvtu4fH8\n        XWvZkRT+u+yzH1s5yFYBqc2JTrrJvRU=\n        =QnvN\n        -----END PGP PUBLIC KEY BLOCK-----\n\npackages:\n  - azure-cli\n  - kubectl\n  - git\n  - docker.io\n  - step-cli\n\nruncmd:\n  - |\n    curl -s https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash\n    curl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash\n    wget -q https://github.com/derailed/k9s/releases/latest/download/k9s_linux_amd64.deb && dpkg -i ./k9s_linux_amd64.deb\n\n",
    "$fxv#1": "#!/bin/sh\n\n# set -o errexit # fail if any command fails\n\nMYUSER=`id -un 1000`\nMYHOME=`eval echo ~$MYUSER`\nMYWORK=/workspaces\nLOCATION={{{location}}}\nRESOURCE_GROUP={{{resource_group}}}\nCLUSTER_NAME={{{cluster_name}}}\nCUSTOM_LOCATION_ID={{{custom_location_id}}}\n\nmkdir -p $MYWORK\ncd $MYWORK\n\nSTORAGE_ACCOUNT=${CLUSTER_NAME}storage\nSCHEMA_REGISTRY=${CLUSTER_NAME}-schema\nSCHEMA_REGISTRY_NAMESPACE=${CLUSTER_NAME}-schema-ns\n\necho\necho \"+-----------------------------------------------------------+\"\necho \" Setting up the environment with the following parameters:\"\necho \"   Location           = ${LOCATION}\"   \necho \"   Resource Group     = ${RESOURCE_GROUP}\"\necho \"   Cluster Name       = ${CLUSTER_NAME}\"\necho \"   Custom Location ID = ${CUSTOM_LOCATION_ID}\"\necho \"+-----------------------------------------------------------+\"\necho\n\necho\necho \"+------------------------------------+\"\necho \"| Waiting for cloud-init completion  |\"\necho \"+------------------------------------+\"\ncloud-init status --wait\n\n# echo\n# echo \"=========================================\"\n# echo \"=== Cloning repository ===\"\n# echo \"=========================================\"\n# git clone https://github.com/azure/iot-operations-sdks\n\necho\necho \"+------------------------------------+\"\necho \"| Install pre-requisites             |\"\necho \"+------------------------------------+\"\ncurl -s https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash\ncurl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash\nwget -q https://github.com/derailed/k9s/releases/latest/download/k9s_linux_amd64.deb && dpkg -i ./k9s_linux_amd64.deb\n\necho\necho \"+------------------------------------+\"\necho \"| Creating k8s cluster               |\"\necho \"+------------------------------------+\"\nk3d cluster create \\\n    -p '1883:1883@loadbalancer' \\\n    -p '8883:8883@loadbalancer' \\\n    -p '8884:8884@loadbalancer' \\\n    --wait\n\n# Set the default context / namespace to azure-iot-operations\nkubectl config set-context k3d-k3s-default --namespace=azure-iot-operations\n\necho\necho \"+------------------------------------+\"\necho \"| Configuring user access to cluster |\"\necho \"+------------------------------------+\"\ninstall -D -o $MYUSER -g $MYUSER -m 600 $MYWORK/.kube/config $MYHOME/.kube/config\nchown -R $MYUSER:$MYUSER $MYWORK\n\n# echo\n# echo \"=========================================\"\n# echo \"=== Logging in to Azure ===\"\n# echo \"=========================================\"\n# az login --identity\n\n# echo\n# echo \"=========================================\"\n# echo \"=== Registering Azure providers ===\"\n# echo \"=========================================\"\n# Issue #1: Cant register providers with system identity\n# az provider register -n \"Microsoft.ExtendedLocation\"\n# az provider register -n \"Microsoft.Kubernetes\"\n# az provider register -n \"Microsoft.KubernetesConfiguration\"\n# az provider register -n \"Microsoft.IoTOperations\"\n# az provider register -n \"Microsoft.DeviceRegistry\"\n# az provider register -n \"Microsoft.SecretSyncController\"\n\necho\necho \"+------------------------------------+\"\necho \"| Arc connecting the cluster         |\"\necho \"+------------------------------------+\"\naz connectedk8s connect --name $CLUSTER_NAME --location $LOCATION -g $RESOURCE_GROUP --kube-config .kube/config\n\necho\necho \"+------------------------------------+\"\necho \"| Enabling custom locations          |\"\necho \"+------------------------------------+\"\naz connectedk8s enable-features -n $CLUSTER_NAME -g $RESOURCE_GROUP --custom-locations-oid $CUSTOM_LOCATION_ID --kube-config .kube/config --features cluster-connect custom-locations\n\necho\necho \"+------------------------------------+\"\necho \"| Creating Schema Registry resource  |\"\necho \"+------------------------------------+\"\naz storage account create --name $STORAGE_ACCOUNT --location $LOCATION -g $RESOURCE_GROUP --enable-hierarchical-namespace\naz iot ops schema registry create --name $SCHEMA_REGISTRY -g $RESOURCE_GROUP --registry-namespace $SCHEMA_REGISTRY_NAMESPACE --sa-resource-id $(az storage account show --name $STORAGE_ACCOUNT -o tsv --query id)\n\n# echo\n# echo \"=========================================\"\n# echo \"=== Installing IoT Operations ===\"\n# echo \"=========================================\"\n# az iot ops init --cluster $CLUSTER_NAME -g $RESOURCE_GROUP\n# az iot ops create --cluster $CLUSTER_NAME -g $RESOURCE_GROUP --name ${CLUSTER_NAME}-instance --sr-resource-id $(az iot ops schema registry show --name $SCHEMA_REGISTRY -g $RESOURCE_GROUP -o tsv --query id) --broker-frontend-replicas 1 --broker-frontend-workers 1  --broker-backend-part 1  --broker-backend-workers 1 --broker-backend-rf 2 --broker-mem-profile Low\n",
    "location": "[resourceGroup().location]",
    "addressPrefix": "10.1.0.0/16",
    "subnetAddressPrefix": "10.1.0.0/24",
    "dnsLabelPrefix": "[toLower(format('{0}-{1}', parameters('name'), uniqueString(resourceGroup().id)))]",
    "subnetName": "[format('{0}-subnet', uniqueString(variables('dnsLabelPrefix')))]",
    "customLocationId": "[resourceId('Microsoft.ManagedIdentity/systemAssignedIdentities', 'bc313c14-388c-4e7d-a58e-70017303ee3b')]",
    "ubuntuOSVersion": {
      "publisher": "Canonical",
      "offer": "ubuntu-24_04-lts",
      "sku": "server",
      "version": "latest"
    },
    "osDiskType": "Standard_LRS",
    "linuxConfiguration": {
      "disablePasswordAuthentication": true,
      "ssh": {
        "publicKeys": [
          {
            "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('adminUsername'))]",
            "keyData": "[parameters('adminPasswordOrKey')]"
          }
        ]
      }
    },
    "cloudInitReplacements": [
      {
        "key": "{{{location}}}",
        "value": "[variables('location')]"
      },
      {
        "key": "{{{resource_group}}}",
        "value": "[resourceGroup().name]"
      },
      {
        "key": "{{{cluster_name}}}",
        "value": "[parameters('name')]"
      },
      {
        "key": "{{{custom_location_id}}}",
        "value": "[variables('customLocationId')]"
      }
    ],
    "cloudInit": "[reduce(variables('cloudInitReplacements'), variables('$fxv#0'), lambda('cur', 'next', replace(string(lambdaVariables('cur')), lambdaVariables('next').key, lambdaVariables('next').value)))]",
    "installScript": "[reduce(variables('cloudInitReplacements'), variables('$fxv#1'), lambda('cur', 'next', replace(string(lambdaVariables('cur')), lambdaVariables('next').key, lambdaVariables('next').value)))]"
  },
  "resources": [
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2023-09-01",
      "name": "[format('{0}-ip', parameters('name'))]",
      "location": "[variables('location')]",
      "sku": {
        "name": "Basic"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "publicIPAddressVersion": "IPv4",
        "dnsSettings": {
          "domainNameLabel": "[parameters('name')]"
        },
        "idleTimeoutInMinutes": 4
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2023-09-01",
      "name": "[format('{0}-nic', parameters('name'))]",
      "location": "[variables('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "subnet": {
                "id": "[reference(resourceId('Microsoft.Network/virtualNetworks', format('{0}-vnet', parameters('name'))), '2023-09-01').subnets[0].id]"
              },
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}-ip', parameters('name')))]"
              }
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-nsg', parameters('name')))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-nsg', parameters('name')))]",
        "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}-ip', parameters('name')))]",
        "[resourceId('Microsoft.Network/virtualNetworks', format('{0}-vnet', parameters('name')))]"
      ]
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2023-09-01",
      "name": "[format('{0}-nsg', parameters('name'))]",
      "location": "[variables('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "SSH",
            "properties": {
              "priority": 1000,
              "protocol": "Tcp",
              "access": "Allow",
              "direction": "Inbound",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "22"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2023-09-01",
      "name": "[format('{0}-vnet', parameters('name'))]",
      "location": "[variables('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-nsg', parameters('name')))]"
              },
              "addressPrefix": "[variables('subnetAddressPrefix')]",
              "privateEndpointNetworkPolicies": "Enabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-nsg', parameters('name')))]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2023-09-01",
      "name": "[parameters('name')]",
      "location": "[variables('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "storageProfile": {
          "osDisk": {
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "[variables('osDiskType')]"
            }
          },
          "imageReference": "[variables('ubuntuOSVersion')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic', parameters('name')))]"
            }
          ]
        },
        "osProfile": {
          "computerName": "[parameters('name')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrKey')]",
          "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), null(), variables('linuxConfiguration'))]",
          "customData": "[base64(variables('cloudInit'))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic', parameters('name')))]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2019-03-01",
      "name": "[format('{0}/{1}', parameters('name'), parameters('name'))]",
      "location": "[variables('location')]",
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.1",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "script": "[base64(variables('installScript'))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceGroup().id, resourceId('Microsoft.Compute/virtualMachines', parameters('name')), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c'))]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
        "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('name')), '2023-09-01', 'full').identity.principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
      ]
    },
    {
      "type": "Microsoft.DevTestLab/schedules",
      "apiVersion": "2018-09-15",
      "name": "[format('shutdown-computevm-{0}', parameters('name'))]",
      "location": "[variables('location')]",
      "properties": {
        "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]",
        "status": "Enabled",
        "taskType": "ComputeVmShutdownTask",
        "timeZoneId": "Pacific Standard Time",
        "dailyRecurrence": {
          "time": "0100"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
      ]
    }
  ],
  "outputs": {
    "adminUsername": {
      "type": "string",
      "value": "[parameters('adminUsername')]"
    },
    "hostname": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', format('{0}-ip', parameters('name'))), '2023-09-01').dnsSettings.fqdn]"
    },
    "sshCommand": {
      "type": "string",
      "value": "[format('ssh {0}@{1}', parameters('adminUsername'), reference(resourceId('Microsoft.Network/publicIPAddresses', format('{0}-ip', parameters('name'))), '2023-09-01').dnsSettings.fqdn)]"
    }
  }
}