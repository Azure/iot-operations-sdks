### YamlMime:ManagedReference
items:
- uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient
  commentId: T:Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient
  id: LeasedLockClient
  parent: Azure.Iot.Operations.Services.LeasedLock
  children:
  - Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.#ctor(Azure.Iot.Operations.Protocol.IMqttPubSubClient,System.String,System.String)
  - Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.#ctor(Azure.Iot.Operations.Services.StateStore.IStateStoreClient,System.String,System.String)
  - Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AcquireLockAndUpdateValueAsync(Azure.Iot.Operations.Services.StateStore.StateStoreKey,System.Func{Azure.Iot.Operations.Services.StateStore.StateStoreValue,Azure.Iot.Operations.Services.StateStore.StateStoreValue},System.Nullable{System.TimeSpan},System.Threading.CancellationToken)
  - Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AcquireLockAsync(System.TimeSpan,Azure.Iot.Operations.Services.LeasedLock.AcquireLockRequestOptions,System.Threading.CancellationToken)
  - Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AutomaticRenewalOptions
  - Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.DisposeAsync
  - Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.DisposeAsync(System.Boolean)
  - Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.DisposeAsyncCore(System.Boolean)
  - Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.GetLockHolderAsync(System.Threading.CancellationToken)
  - Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.LockChangeEventReceivedAsync
  - Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.LockHolderName
  - Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.MostRecentAcquireLockResponse
  - Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.ObserveLockAsync(Azure.Iot.Operations.Services.LeasedLock.ObserveLockRequestOptions,System.Threading.CancellationToken)
  - Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.ReleaseLockAsync(Azure.Iot.Operations.Services.LeasedLock.ReleaseLockRequestOptions,System.Threading.CancellationToken)
  - Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.TryAcquireLockAsync(System.TimeSpan,Azure.Iot.Operations.Services.LeasedLock.AcquireLockRequestOptions,System.Threading.CancellationToken)
  - Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.UnobserveLockAsync(System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: LeasedLockClient
  nameWithType: LeasedLockClient
  fullName: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient
  type: Class
  source:
    remote:
      path: dotnet/src/Azure.Iot.Operations.Services/LeasedLock/LeasedLockClient.cs
      branch: docfx
      repo: https://github.com/ryanwinterms/iot-operations-sdks
    id: LeasedLockClient
    path: ../../dotnet/src/Azure.Iot.Operations.Services/LeasedLock/LeasedLockClient.cs
    startLine: 20
  assemblies:
  - Azure.Iot.Operations.Services
  namespace: Azure.Iot.Operations.Services.LeasedLock
  summary: A client to facilitate leased lock operations on a specific, provided lock name.
  remarks: >-
    <p>
     Once acquired, a lock will not be automatically renewed by default. This client allows you to opt-in to auto-renew
     with <xref href="Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AutomaticRenewalOptions" data-throw-if-not-resolved="false"></xref>, though.
     </p>
    <p>
     When a lock is granted via <xref href="Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AcquireLockAsync(System.TimeSpan%2cAzure.Iot.Operations.Services.LeasedLock.AcquireLockRequestOptions%2cSystem.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref>,
     the service will respond with a fencing token via <xref href="Azure.Iot.Operations.Services.LeasedLock.AcquireLockResponse.FencingToken" data-throw-if-not-resolved="false"></xref>. This fencing token
     allows for State Store set/delete operations on shared resources without risk of race conditions.
     </p>
  example: []
  syntax:
    content: 'public class LeasedLockClient : IAsyncDisposable'
    content.vb: Public Class LeasedLockClient Implements IAsyncDisposable
  inheritance:
  - System.Object
  implements:
  - System.IAsyncDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.LockChangeEventReceivedAsync
  commentId: E:Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.LockChangeEventReceivedAsync
  id: LockChangeEventReceivedAsync
  parent: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient
  langs:
  - csharp
  - vb
  name: LockChangeEventReceivedAsync
  nameWithType: LeasedLockClient.LockChangeEventReceivedAsync
  fullName: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.LockChangeEventReceivedAsync
  type: Event
  source:
    remote:
      path: dotnet/src/Azure.Iot.Operations.Services/LeasedLock/LeasedLockClient.cs
      branch: docfx
      repo: https://github.com/ryanwinterms/iot-operations-sdks
    id: LockChangeEventReceivedAsync
    path: ../../dotnet/src/Azure.Iot.Operations.Services/LeasedLock/LeasedLockClient.cs
    startLine: 42
  assemblies:
  - Azure.Iot.Operations.Services
  namespace: Azure.Iot.Operations.Services.LeasedLock
  summary: The callback that executes whenever the current holder of the lock changes.
  remarks: >-
    Users who want to watch lock holder change events must first set this callback, then

    call <xref href="Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.ObserveLockAsync(Azure.Iot.Operations.Services.LeasedLock.ObserveLockRequestOptions%2cSystem.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref>

    To stop watching lock holder change events, call <xref href="Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.UnobserveLockAsync(System.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref>

    and then remove any handlers from this object.
  example: []
  syntax:
    content: public event Func<object?, LockChangeEventArgs, Task>? LockChangeEventReceivedAsync
    return:
      type: System.Func{System.Object,Azure.Iot.Operations.Services.LeasedLock.LockChangeEventArgs,System.Threading.Tasks.Task}
    content.vb: Public Event LockChangeEventReceivedAsync As Func(Of Object, LockChangeEventArgs, Task)
- uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.LockHolderName
  commentId: P:Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.LockHolderName
  id: LockHolderName
  parent: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient
  langs:
  - csharp
  - vb
  name: LockHolderName
  nameWithType: LeasedLockClient.LockHolderName
  fullName: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.LockHolderName
  type: Property
  source:
    remote:
      path: dotnet/src/Azure.Iot.Operations.Services/LeasedLock/LeasedLockClient.cs
      branch: docfx
      repo: https://github.com/ryanwinterms/iot-operations-sdks
    id: LockHolderName
    path: ../../dotnet/src/Azure.Iot.Operations.Services/LeasedLock/LeasedLockClient.cs
    startLine: 47
  assemblies:
  - Azure.Iot.Operations.Services
  namespace: Azure.Iot.Operations.Services.LeasedLock
  summary: The name this client uses when trying to acquire the leased lock.
  example: []
  syntax:
    content: public string LockHolderName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property LockHolderName As String
  overload: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.LockHolderName*
- uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AutomaticRenewalOptions
  commentId: P:Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AutomaticRenewalOptions
  id: AutomaticRenewalOptions
  parent: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient
  langs:
  - csharp
  - vb
  name: AutomaticRenewalOptions
  nameWithType: LeasedLockClient.AutomaticRenewalOptions
  fullName: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AutomaticRenewalOptions
  type: Property
  source:
    remote:
      path: dotnet/src/Azure.Iot.Operations.Services/LeasedLock/LeasedLockClient.cs
      branch: docfx
      repo: https://github.com/ryanwinterms/iot-operations-sdks
    id: AutomaticRenewalOptions
    path: ../../dotnet/src/Azure.Iot.Operations.Services/LeasedLock/LeasedLockClient.cs
    startLine: 62
  assemblies:
  - Azure.Iot.Operations.Services
  namespace: Azure.Iot.Operations.Services.LeasedLock
  summary: >-
    The options for automatically re-acquiring a lock before the previous lease expires. By default, 

    no automatic re-acquiring happens.
  remarks: >-
    <p>

    These options must be set before calling <xref href="Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AcquireLockAsync(System.TimeSpan%2cAzure.Iot.Operations.Services.LeasedLock.AcquireLockRequestOptions%2cSystem.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref>.

    Once set, the automatic renewal will begin after the first call to <xref href="Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AcquireLockAsync(System.TimeSpan%2cAzure.Iot.Operations.Services.LeasedLock.AcquireLockRequestOptions%2cSystem.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    The result of automatic renewals can be accessed via <xref href="Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.MostRecentAcquireLockResponse" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public LeasedLockAutomaticRenewalOptions AutomaticRenewalOptions { get; set; }
    parameters: []
    return:
      type: Azure.Iot.Operations.Services.LeasedLock.LeasedLockAutomaticRenewalOptions
    content.vb: Public Property AutomaticRenewalOptions As LeasedLockAutomaticRenewalOptions
  overload: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AutomaticRenewalOptions*
- uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.MostRecentAcquireLockResponse
  commentId: P:Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.MostRecentAcquireLockResponse
  id: MostRecentAcquireLockResponse
  parent: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient
  langs:
  - csharp
  - vb
  name: MostRecentAcquireLockResponse
  nameWithType: LeasedLockClient.MostRecentAcquireLockResponse
  fullName: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.MostRecentAcquireLockResponse
  type: Property
  source:
    remote:
      path: dotnet/src/Azure.Iot.Operations.Services/LeasedLock/LeasedLockClient.cs
      branch: docfx
      repo: https://github.com/ryanwinterms/iot-operations-sdks
    id: MostRecentAcquireLockResponse
    path: ../../dotnet/src/Azure.Iot.Operations.Services/LeasedLock/LeasedLockClient.cs
    startLine: 90
  assemblies:
  - Azure.Iot.Operations.Services
  namespace: Azure.Iot.Operations.Services.LeasedLock
  summary: The result of the most recent attempt at acquiring the lock.
  remarks: This value captures the result of automatic re-renewing of the lock with <xref href="Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AutomaticRenewalOptions" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public AcquireLockResponse? MostRecentAcquireLockResponse { get; }
    parameters: []
    return:
      type: Azure.Iot.Operations.Services.LeasedLock.AcquireLockResponse
    content.vb: Public Property MostRecentAcquireLockResponse As AcquireLockResponse
  overload: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.MostRecentAcquireLockResponse*
- uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.#ctor(Azure.Iot.Operations.Protocol.IMqttPubSubClient,System.String,System.String)
  commentId: M:Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.#ctor(Azure.Iot.Operations.Protocol.IMqttPubSubClient,System.String,System.String)
  id: '#ctor(Azure.Iot.Operations.Protocol.IMqttPubSubClient,System.String,System.String)'
  parent: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient
  langs:
  - csharp
  - vb
  name: LeasedLockClient(IMqttPubSubClient, string, string?)
  nameWithType: LeasedLockClient.LeasedLockClient(IMqttPubSubClient, string, string?)
  fullName: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.LeasedLockClient(Azure.Iot.Operations.Protocol.IMqttPubSubClient, string, string?)
  type: Constructor
  source:
    remote:
      path: dotnet/src/Azure.Iot.Operations.Services/LeasedLock/LeasedLockClient.cs
      branch: docfx
      repo: https://github.com/ryanwinterms/iot-operations-sdks
    id: .ctor
    path: ../../dotnet/src/Azure.Iot.Operations.Services/LeasedLock/LeasedLockClient.cs
    startLine: 100
  assemblies:
  - Azure.Iot.Operations.Services
  namespace: Azure.Iot.Operations.Services.LeasedLock
  summary: Construct a new leased lock client.
  example: []
  syntax:
    content: public LeasedLockClient(IMqttPubSubClient mqttClient, string lockName, string? lockHolderName = null)
    parameters:
    - id: mqttClient
      type: Azure.Iot.Operations.Protocol.IMqttPubSubClient
      description: The client to use for I/O operations.
    - id: lockName
      type: System.String
      description: The name of the lock to acquire/release.
    - id: lockHolderName
      type: System.String
      description: >-
        The name for this client that will hold a lock. Other processes 
            will be able to check which client holds a lock by name. By default, this is set to the MQTT client ID.
    content.vb: Public Sub New(mqttClient As IMqttPubSubClient, lockName As String, lockHolderName As String = Nothing)
  overload: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.#ctor*
  nameWithType.vb: LeasedLockClient.New(IMqttPubSubClient, String, String)
  fullName.vb: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.New(Azure.Iot.Operations.Protocol.IMqttPubSubClient, String, String)
  name.vb: New(IMqttPubSubClient, String, String)
- uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.#ctor(Azure.Iot.Operations.Services.StateStore.IStateStoreClient,System.String,System.String)
  commentId: M:Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.#ctor(Azure.Iot.Operations.Services.StateStore.IStateStoreClient,System.String,System.String)
  id: '#ctor(Azure.Iot.Operations.Services.StateStore.IStateStoreClient,System.String,System.String)'
  parent: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient
  langs:
  - csharp
  - vb
  name: LeasedLockClient(IStateStoreClient, string, string)
  nameWithType: LeasedLockClient.LeasedLockClient(IStateStoreClient, string, string)
  fullName: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.LeasedLockClient(Azure.Iot.Operations.Services.StateStore.IStateStoreClient, string, string)
  type: Constructor
  source:
    remote:
      path: dotnet/src/Azure.Iot.Operations.Services/LeasedLock/LeasedLockClient.cs
      branch: docfx
      repo: https://github.com/ryanwinterms/iot-operations-sdks
    id: .ctor
    path: ../../dotnet/src/Azure.Iot.Operations.Services/LeasedLock/LeasedLockClient.cs
    startLine: 127
  assemblies:
  - Azure.Iot.Operations.Services
  namespace: Azure.Iot.Operations.Services.LeasedLock
  syntax:
    content: public LeasedLockClient(IStateStoreClient stateStoreClient, string lockName, string lockHolderName)
    parameters:
    - id: stateStoreClient
      type: Azure.Iot.Operations.Services.StateStore.IStateStoreClient
    - id: lockName
      type: System.String
    - id: lockHolderName
      type: System.String
    content.vb: Public Sub New(stateStoreClient As IStateStoreClient, lockName As String, lockHolderName As String)
  overload: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.#ctor*
  nameWithType.vb: LeasedLockClient.New(IStateStoreClient, String, String)
  fullName.vb: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.New(Azure.Iot.Operations.Services.StateStore.IStateStoreClient, String, String)
  name.vb: New(IStateStoreClient, String, String)
- uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.TryAcquireLockAsync(System.TimeSpan,Azure.Iot.Operations.Services.LeasedLock.AcquireLockRequestOptions,System.Threading.CancellationToken)
  commentId: M:Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.TryAcquireLockAsync(System.TimeSpan,Azure.Iot.Operations.Services.LeasedLock.AcquireLockRequestOptions,System.Threading.CancellationToken)
  id: TryAcquireLockAsync(System.TimeSpan,Azure.Iot.Operations.Services.LeasedLock.AcquireLockRequestOptions,System.Threading.CancellationToken)
  parent: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient
  langs:
  - csharp
  - vb
  name: TryAcquireLockAsync(TimeSpan, AcquireLockRequestOptions?, CancellationToken)
  nameWithType: LeasedLockClient.TryAcquireLockAsync(TimeSpan, AcquireLockRequestOptions?, CancellationToken)
  fullName: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.TryAcquireLockAsync(System.TimeSpan, Azure.Iot.Operations.Services.LeasedLock.AcquireLockRequestOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: dotnet/src/Azure.Iot.Operations.Services/LeasedLock/LeasedLockClient.cs
      branch: docfx
      repo: https://github.com/ryanwinterms/iot-operations-sdks
    id: TryAcquireLockAsync
    path: ../../dotnet/src/Azure.Iot.Operations.Services/LeasedLock/LeasedLockClient.cs
    startLine: 166
  assemblies:
  - Azure.Iot.Operations.Services
  namespace: Azure.Iot.Operations.Services.LeasedLock
  summary: Attempt to acquire a lock with the provided name.
  remarks: >-
    <p>

    Once acquired, a lock will not be automatically renewed by default. This client allows you to opt-in to auto-renew

    with <xref href="Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AutomaticRenewalOptions" data-throw-if-not-resolved="false"></xref>, though.

    </p>

    <p>

    When acquired, a lock has a value assigned to it which follows either the format 

    {lockHolderName}:{sessionId} if a sessionId is provided by <code class="paramref">options</code> or 

    just {lockHolderName} if no sessionId is provided. The lock holder name is chosen 

    when constructing this client and a sessionId can be chosen (or omitted, by default) 

    each attempt to acquire a lock.

    </p>
  example: []
  syntax:
    content: public virtual Task<AcquireLockResponse> TryAcquireLockAsync(TimeSpan leaseDuration, AcquireLockRequestOptions? options = null, CancellationToken cancellationToken = default)
    parameters:
    - id: leaseDuration
      type: System.TimeSpan
      description: The duration for which the lock will be held. This value only has millisecond-level precision.
    - id: options
      type: Azure.Iot.Operations.Services.LeasedLock.AcquireLockRequestOptions
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{Azure.Iot.Operations.Services.LeasedLock.AcquireLockResponse}
      description: AcquireLockResponse object with result (and fencing token if the lock was successfully acquired.)
    content.vb: Public Overridable Function TryAcquireLockAsync(leaseDuration As TimeSpan, options As AcquireLockRequestOptions = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of AcquireLockResponse)
  overload: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.TryAcquireLockAsync*
  nameWithType.vb: LeasedLockClient.TryAcquireLockAsync(TimeSpan, AcquireLockRequestOptions, CancellationToken)
  fullName.vb: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.TryAcquireLockAsync(System.TimeSpan, Azure.Iot.Operations.Services.LeasedLock.AcquireLockRequestOptions, System.Threading.CancellationToken)
  name.vb: TryAcquireLockAsync(TimeSpan, AcquireLockRequestOptions, CancellationToken)
- uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AcquireLockAsync(System.TimeSpan,Azure.Iot.Operations.Services.LeasedLock.AcquireLockRequestOptions,System.Threading.CancellationToken)
  commentId: M:Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AcquireLockAsync(System.TimeSpan,Azure.Iot.Operations.Services.LeasedLock.AcquireLockRequestOptions,System.Threading.CancellationToken)
  id: AcquireLockAsync(System.TimeSpan,Azure.Iot.Operations.Services.LeasedLock.AcquireLockRequestOptions,System.Threading.CancellationToken)
  parent: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient
  langs:
  - csharp
  - vb
  name: AcquireLockAsync(TimeSpan, AcquireLockRequestOptions?, CancellationToken)
  nameWithType: LeasedLockClient.AcquireLockAsync(TimeSpan, AcquireLockRequestOptions?, CancellationToken)
  fullName: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AcquireLockAsync(System.TimeSpan, Azure.Iot.Operations.Services.LeasedLock.AcquireLockRequestOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: dotnet/src/Azure.Iot.Operations.Services/LeasedLock/LeasedLockClient.cs
      branch: docfx
      repo: https://github.com/ryanwinterms/iot-operations-sdks
    id: AcquireLockAsync
    path: ../../dotnet/src/Azure.Iot.Operations.Services/LeasedLock/LeasedLockClient.cs
    startLine: 283
  assemblies:
  - Azure.Iot.Operations.Services
  namespace: Azure.Iot.Operations.Services.LeasedLock
  syntax:
    content: public virtual Task<AcquireLockResponse> AcquireLockAsync(TimeSpan leaseDuration, AcquireLockRequestOptions? options = null, CancellationToken cancellationToken = default)
    parameters:
    - id: leaseDuration
      type: System.TimeSpan
    - id: options
      type: Azure.Iot.Operations.Services.LeasedLock.AcquireLockRequestOptions
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{Azure.Iot.Operations.Services.LeasedLock.AcquireLockResponse}
    content.vb: Public Overridable Function AcquireLockAsync(leaseDuration As TimeSpan, options As AcquireLockRequestOptions = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of AcquireLockResponse)
  overload: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AcquireLockAsync*
  nameWithType.vb: LeasedLockClient.AcquireLockAsync(TimeSpan, AcquireLockRequestOptions, CancellationToken)
  fullName.vb: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AcquireLockAsync(System.TimeSpan, Azure.Iot.Operations.Services.LeasedLock.AcquireLockRequestOptions, System.Threading.CancellationToken)
  name.vb: AcquireLockAsync(TimeSpan, AcquireLockRequestOptions, CancellationToken)
- uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AcquireLockAndUpdateValueAsync(Azure.Iot.Operations.Services.StateStore.StateStoreKey,System.Func{Azure.Iot.Operations.Services.StateStore.StateStoreValue,Azure.Iot.Operations.Services.StateStore.StateStoreValue},System.Nullable{System.TimeSpan},System.Threading.CancellationToken)
  commentId: M:Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AcquireLockAndUpdateValueAsync(Azure.Iot.Operations.Services.StateStore.StateStoreKey,System.Func{Azure.Iot.Operations.Services.StateStore.StateStoreValue,Azure.Iot.Operations.Services.StateStore.StateStoreValue},System.Nullable{System.TimeSpan},System.Threading.CancellationToken)
  id: AcquireLockAndUpdateValueAsync(Azure.Iot.Operations.Services.StateStore.StateStoreKey,System.Func{Azure.Iot.Operations.Services.StateStore.StateStoreValue,Azure.Iot.Operations.Services.StateStore.StateStoreValue},System.Nullable{System.TimeSpan},System.Threading.CancellationToken)
  parent: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient
  langs:
  - csharp
  - vb
  name: AcquireLockAndUpdateValueAsync(StateStoreKey, Func<StateStoreValue?, StateStoreValue?>, TimeSpan?, CancellationToken)
  nameWithType: LeasedLockClient.AcquireLockAndUpdateValueAsync(StateStoreKey, Func<StateStoreValue?, StateStoreValue?>, TimeSpan?, CancellationToken)
  fullName: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AcquireLockAndUpdateValueAsync(Azure.Iot.Operations.Services.StateStore.StateStoreKey, System.Func<Azure.Iot.Operations.Services.StateStore.StateStoreValue?, Azure.Iot.Operations.Services.StateStore.StateStoreValue?>, System.TimeSpan?, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: dotnet/src/Azure.Iot.Operations.Services/LeasedLock/LeasedLockClient.cs
      branch: docfx
      repo: https://github.com/ryanwinterms/iot-operations-sdks
    id: AcquireLockAndUpdateValueAsync
    path: ../../dotnet/src/Azure.Iot.Operations.Services/LeasedLock/LeasedLockClient.cs
    startLine: 351
  assemblies:
  - Azure.Iot.Operations.Services
  namespace: Azure.Iot.Operations.Services.LeasedLock
  summary: >-
    Block until the lock is acquired, update the value of the state store resource based on

    its current value, then release the lock.
  remarks: >-
    This function will always release the lock if it was acquired. Even if cancellation is requested 

    when the lock is acquired, this function will release the lock.
  example: []
  syntax:
    content: public Task AcquireLockAndUpdateValueAsync(StateStoreKey key, Func<StateStoreValue?, StateStoreValue?> updateValueFunc, TimeSpan? maximumLeaseDuration = null, CancellationToken cancellationToken = default)
    parameters:
    - id: key
      type: Azure.Iot.Operations.Services.StateStore.StateStoreKey
      description: The state store key whose value will be updated.
    - id: updateValueFunc
      type: System.Func{Azure.Iot.Operations.Services.StateStore.StateStoreValue,Azure.Iot.Operations.Services.StateStore.StateStoreValue}
      description: >-
        The function to execute after the lock is acquired. The parameter of this function contains

        the current value of the state store key. The return value of this function is the new value

        that you wish the state store key to have.
    - id: maximumLeaseDuration
      type: System.Nullable{System.TimeSpan}
      description: >-
        The maximum length of time that the client will lease the lock for once acquired. Under normal circumstances,

        this function will release the lock after updating the value of the shared resource, but it is possible that 

        this client is interrupted or encounters a fatal exception. By setting a low value for this field, you limit

        how long the lock can be acquired for before it is released automatically by the service.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function AcquireLockAndUpdateValueAsync(key As StateStoreKey, updateValueFunc As Func(Of StateStoreValue, StateStoreValue), maximumLeaseDuration As TimeSpan? = Nothing, cancellationToken As CancellationToken = Nothing) As Task
  overload: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AcquireLockAndUpdateValueAsync*
  nameWithType.vb: LeasedLockClient.AcquireLockAndUpdateValueAsync(StateStoreKey, Func(Of StateStoreValue, StateStoreValue), TimeSpan?, CancellationToken)
  fullName.vb: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AcquireLockAndUpdateValueAsync(Azure.Iot.Operations.Services.StateStore.StateStoreKey, System.Func(Of Azure.Iot.Operations.Services.StateStore.StateStoreValue, Azure.Iot.Operations.Services.StateStore.StateStoreValue), System.TimeSpan?, System.Threading.CancellationToken)
  name.vb: AcquireLockAndUpdateValueAsync(StateStoreKey, Func(Of StateStoreValue, StateStoreValue), TimeSpan?, CancellationToken)
- uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.GetLockHolderAsync(System.Threading.CancellationToken)
  commentId: M:Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.GetLockHolderAsync(System.Threading.CancellationToken)
  id: GetLockHolderAsync(System.Threading.CancellationToken)
  parent: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient
  langs:
  - csharp
  - vb
  name: GetLockHolderAsync(CancellationToken)
  nameWithType: LeasedLockClient.GetLockHolderAsync(CancellationToken)
  fullName: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.GetLockHolderAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: dotnet/src/Azure.Iot.Operations.Services/LeasedLock/LeasedLockClient.cs
      branch: docfx
      repo: https://github.com/ryanwinterms/iot-operations-sdks
    id: GetLockHolderAsync
    path: ../../dotnet/src/Azure.Iot.Operations.Services/LeasedLock/LeasedLockClient.cs
    startLine: 419
  assemblies:
  - Azure.Iot.Operations.Services
  namespace: Azure.Iot.Operations.Services.LeasedLock
  summary: Get the current holder of the lock.
  remarks: >-
    When acquired, a lock has a value assigned to it which follows the format: {lockHolderName}:{sessionId}.

    This function will return this value so that the owner of the lock can be identified by one or both

    of these fields.
  example: []
  syntax:
    content: public virtual Task<GetLockHolderResponse> GetLockHolderAsync(CancellationToken cancellationToken = default)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token.
    return:
      type: System.Threading.Tasks.Task{Azure.Iot.Operations.Services.LeasedLock.GetLockHolderResponse}
      description: The details about the current holder of the lock.
    content.vb: Public Overridable Function GetLockHolderAsync(cancellationToken As CancellationToken = Nothing) As Task(Of GetLockHolderResponse)
  overload: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.GetLockHolderAsync*
- uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.ReleaseLockAsync(Azure.Iot.Operations.Services.LeasedLock.ReleaseLockRequestOptions,System.Threading.CancellationToken)
  commentId: M:Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.ReleaseLockAsync(Azure.Iot.Operations.Services.LeasedLock.ReleaseLockRequestOptions,System.Threading.CancellationToken)
  id: ReleaseLockAsync(Azure.Iot.Operations.Services.LeasedLock.ReleaseLockRequestOptions,System.Threading.CancellationToken)
  parent: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient
  langs:
  - csharp
  - vb
  name: ReleaseLockAsync(ReleaseLockRequestOptions?, CancellationToken)
  nameWithType: LeasedLockClient.ReleaseLockAsync(ReleaseLockRequestOptions?, CancellationToken)
  fullName: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.ReleaseLockAsync(Azure.Iot.Operations.Services.LeasedLock.ReleaseLockRequestOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: dotnet/src/Azure.Iot.Operations.Services/LeasedLock/LeasedLockClient.cs
      branch: docfx
      repo: https://github.com/ryanwinterms/iot-operations-sdks
    id: ReleaseLockAsync
    path: ../../dotnet/src/Azure.Iot.Operations.Services/LeasedLock/LeasedLockClient.cs
    startLine: 441
  assemblies:
  - Azure.Iot.Operations.Services
  namespace: Azure.Iot.Operations.Services.LeasedLock
  summary: Attempt to release a lock with the provided name.
  example: []
  syntax:
    content: public virtual Task<ReleaseLockResponse> ReleaseLockAsync(ReleaseLockRequestOptions? options = null, CancellationToken cancellationToken = default)
    parameters:
    - id: options
      type: Azure.Iot.Operations.Services.LeasedLock.ReleaseLockRequestOptions
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{Azure.Iot.Operations.Services.LeasedLock.ReleaseLockResponse}
      description: The response to the request.
    content.vb: Public Overridable Function ReleaseLockAsync(options As ReleaseLockRequestOptions = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of ReleaseLockResponse)
  overload: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.ReleaseLockAsync*
  nameWithType.vb: LeasedLockClient.ReleaseLockAsync(ReleaseLockRequestOptions, CancellationToken)
  fullName.vb: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.ReleaseLockAsync(Azure.Iot.Operations.Services.LeasedLock.ReleaseLockRequestOptions, System.Threading.CancellationToken)
  name.vb: ReleaseLockAsync(ReleaseLockRequestOptions, CancellationToken)
- uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.ObserveLockAsync(Azure.Iot.Operations.Services.LeasedLock.ObserveLockRequestOptions,System.Threading.CancellationToken)
  commentId: M:Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.ObserveLockAsync(Azure.Iot.Operations.Services.LeasedLock.ObserveLockRequestOptions,System.Threading.CancellationToken)
  id: ObserveLockAsync(Azure.Iot.Operations.Services.LeasedLock.ObserveLockRequestOptions,System.Threading.CancellationToken)
  parent: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient
  langs:
  - csharp
  - vb
  name: ObserveLockAsync(ObserveLockRequestOptions?, CancellationToken)
  nameWithType: LeasedLockClient.ObserveLockAsync(ObserveLockRequestOptions?, CancellationToken)
  fullName: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.ObserveLockAsync(Azure.Iot.Operations.Services.LeasedLock.ObserveLockRequestOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: dotnet/src/Azure.Iot.Operations.Services/LeasedLock/LeasedLockClient.cs
      branch: docfx
      repo: https://github.com/ryanwinterms/iot-operations-sdks
    id: ObserveLockAsync
    path: ../../dotnet/src/Azure.Iot.Operations.Services/LeasedLock/LeasedLockClient.cs
    startLine: 487
  assemblies:
  - Azure.Iot.Operations.Services
  namespace: Azure.Iot.Operations.Services.LeasedLock
  summary: Start receiving notifications when the lock holder changes for this leased lock.
  remarks: >-
    Users who want to watch lock holder change events must first set one or more handlers on 

    <xref href="Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.LockChangeEventReceivedAsync" data-throw-if-not-resolved="false"></xref>, then call this function.

    To stop watching lock holder change events, call <xref href="Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.UnobserveLockAsync(System.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref>

    and then remove any handlers from <xref href="Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.LockChangeEventReceivedAsync" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public virtual Task ObserveLockAsync(ObserveLockRequestOptions? options = null, CancellationToken cancellationToken = default)
    parameters:
    - id: options
      type: Azure.Iot.Operations.Services.LeasedLock.ObserveLockRequestOptions
      description: The optional parameters for this request.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function ObserveLockAsync(options As ObserveLockRequestOptions = Nothing, cancellationToken As CancellationToken = Nothing) As Task
  overload: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.ObserveLockAsync*
  nameWithType.vb: LeasedLockClient.ObserveLockAsync(ObserveLockRequestOptions, CancellationToken)
  fullName.vb: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.ObserveLockAsync(Azure.Iot.Operations.Services.LeasedLock.ObserveLockRequestOptions, System.Threading.CancellationToken)
  name.vb: ObserveLockAsync(ObserveLockRequestOptions, CancellationToken)
- uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.UnobserveLockAsync(System.Threading.CancellationToken)
  commentId: M:Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.UnobserveLockAsync(System.Threading.CancellationToken)
  id: UnobserveLockAsync(System.Threading.CancellationToken)
  parent: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient
  langs:
  - csharp
  - vb
  name: UnobserveLockAsync(CancellationToken)
  nameWithType: LeasedLockClient.UnobserveLockAsync(CancellationToken)
  fullName: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.UnobserveLockAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: dotnet/src/Azure.Iot.Operations.Services/LeasedLock/LeasedLockClient.cs
      branch: docfx
      repo: https://github.com/ryanwinterms/iot-operations-sdks
    id: UnobserveLockAsync
    path: ../../dotnet/src/Azure.Iot.Operations.Services/LeasedLock/LeasedLockClient.cs
    startLine: 515
  assemblies:
  - Azure.Iot.Operations.Services
  namespace: Azure.Iot.Operations.Services.LeasedLock
  summary: Stop receiving notifications when the lock holder changes.
  remarks: >-
    Users who want to watch lock holder change events must first set one or more handlers on 

    <xref href="Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.LockChangeEventReceivedAsync" data-throw-if-not-resolved="false"></xref>, then call <xref href="Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.ObserveLockAsync(Azure.Iot.Operations.Services.LeasedLock.ObserveLockRequestOptions%2cSystem.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref>.

    To stop watching lock holder change events, call this function

    and then remove any handlers from <xref href="Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.LockChangeEventReceivedAsync" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public virtual Task UnobserveLockAsync(CancellationToken cancellationToken = default)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function UnobserveLockAsync(cancellationToken As CancellationToken = Nothing) As Task
  overload: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.UnobserveLockAsync*
- uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.DisposeAsync
  commentId: M:Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.DisposeAsync
  id: DisposeAsync
  parent: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient
  langs:
  - csharp
  - vb
  name: DisposeAsync()
  nameWithType: LeasedLockClient.DisposeAsync()
  fullName: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.DisposeAsync()
  type: Method
  source:
    remote:
      path: dotnet/src/Azure.Iot.Operations.Services/LeasedLock/LeasedLockClient.cs
      branch: docfx
      repo: https://github.com/ryanwinterms/iot-operations-sdks
    id: DisposeAsync
    path: ../../dotnet/src/Azure.Iot.Operations.Services/LeasedLock/LeasedLockClient.cs
    startLine: 525
  assemblies:
  - Azure.Iot.Operations.Services
  namespace: Azure.Iot.Operations.Services.LeasedLock
  summary: Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously.
  example: []
  syntax:
    content: public ValueTask DisposeAsync()
    return:
      type: System.Threading.Tasks.ValueTask
      description: A task that represents the asynchronous dispose operation.
    content.vb: Public Function DisposeAsync() As ValueTask
  overload: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.DisposeAsync*
  implements:
  - System.IAsyncDisposable.DisposeAsync
- uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.DisposeAsync(System.Boolean)
  commentId: M:Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.DisposeAsync(System.Boolean)
  id: DisposeAsync(System.Boolean)
  parent: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient
  langs:
  - csharp
  - vb
  name: DisposeAsync(bool)
  nameWithType: LeasedLockClient.DisposeAsync(bool)
  fullName: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.DisposeAsync(bool)
  type: Method
  source:
    remote:
      path: dotnet/src/Azure.Iot.Operations.Services/LeasedLock/LeasedLockClient.cs
      branch: docfx
      repo: https://github.com/ryanwinterms/iot-operations-sdks
    id: DisposeAsync
    path: ../../dotnet/src/Azure.Iot.Operations.Services/LeasedLock/LeasedLockClient.cs
    startLine: 531
  assemblies:
  - Azure.Iot.Operations.Services
  namespace: Azure.Iot.Operations.Services.LeasedLock
  syntax:
    content: public ValueTask DisposeAsync(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
    return:
      type: System.Threading.Tasks.ValueTask
    content.vb: Public Function DisposeAsync(disposing As Boolean) As ValueTask
  overload: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.DisposeAsync*
  nameWithType.vb: LeasedLockClient.DisposeAsync(Boolean)
  fullName.vb: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.DisposeAsync(Boolean)
  name.vb: DisposeAsync(Boolean)
- uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.DisposeAsyncCore(System.Boolean)
  commentId: M:Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.DisposeAsyncCore(System.Boolean)
  id: DisposeAsyncCore(System.Boolean)
  parent: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient
  langs:
  - csharp
  - vb
  name: DisposeAsyncCore(bool)
  nameWithType: LeasedLockClient.DisposeAsyncCore(bool)
  fullName: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.DisposeAsyncCore(bool)
  type: Method
  source:
    remote:
      path: dotnet/src/Azure.Iot.Operations.Services/LeasedLock/LeasedLockClient.cs
      branch: docfx
      repo: https://github.com/ryanwinterms/iot-operations-sdks
    id: DisposeAsyncCore
    path: ../../dotnet/src/Azure.Iot.Operations.Services/LeasedLock/LeasedLockClient.cs
    startLine: 537
  assemblies:
  - Azure.Iot.Operations.Services
  namespace: Azure.Iot.Operations.Services.LeasedLock
  syntax:
    content: protected virtual ValueTask DisposeAsyncCore(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
    return:
      type: System.Threading.Tasks.ValueTask
    content.vb: Protected Overridable Function DisposeAsyncCore(disposing As Boolean) As ValueTask
  overload: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.DisposeAsyncCore*
  nameWithType.vb: LeasedLockClient.DisposeAsyncCore(Boolean)
  fullName.vb: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.DisposeAsyncCore(Boolean)
  name.vb: DisposeAsyncCore(Boolean)
references:
- uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AutomaticRenewalOptions
  commentId: P:Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AutomaticRenewalOptions
  href: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.html#Azure_Iot_Operations_Services_LeasedLock_LeasedLockClient_AutomaticRenewalOptions
  name: AutomaticRenewalOptions
  nameWithType: LeasedLockClient.AutomaticRenewalOptions
  fullName: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AutomaticRenewalOptions
- uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AcquireLockAsync(System.TimeSpan,Azure.Iot.Operations.Services.LeasedLock.AcquireLockRequestOptions,System.Threading.CancellationToken)
  commentId: M:Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AcquireLockAsync(System.TimeSpan,Azure.Iot.Operations.Services.LeasedLock.AcquireLockRequestOptions,System.Threading.CancellationToken)
  isExternal: true
  href: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.html#Azure_Iot_Operations_Services_LeasedLock_LeasedLockClient_AcquireLockAsync_System_TimeSpan_Azure_Iot_Operations_Services_LeasedLock_AcquireLockRequestOptions_System_Threading_CancellationToken_
  name: AcquireLockAsync(TimeSpan, AcquireLockRequestOptions, CancellationToken)
  nameWithType: LeasedLockClient.AcquireLockAsync(TimeSpan, AcquireLockRequestOptions, CancellationToken)
  fullName: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AcquireLockAsync(System.TimeSpan, Azure.Iot.Operations.Services.LeasedLock.AcquireLockRequestOptions, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AcquireLockAsync(System.TimeSpan,Azure.Iot.Operations.Services.LeasedLock.AcquireLockRequestOptions,System.Threading.CancellationToken)
    name: AcquireLockAsync
    href: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.html#Azure_Iot_Operations_Services_LeasedLock_LeasedLockClient_AcquireLockAsync_System_TimeSpan_Azure_Iot_Operations_Services_LeasedLock_AcquireLockRequestOptions_System_Threading_CancellationToken_
  - name: (
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: ','
  - name: " "
  - uid: Azure.Iot.Operations.Services.LeasedLock.AcquireLockRequestOptions
    name: AcquireLockRequestOptions
    href: Azure.Iot.Operations.Services.LeasedLock.AcquireLockRequestOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AcquireLockAsync(System.TimeSpan,Azure.Iot.Operations.Services.LeasedLock.AcquireLockRequestOptions,System.Threading.CancellationToken)
    name: AcquireLockAsync
    href: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.html#Azure_Iot_Operations_Services_LeasedLock_LeasedLockClient_AcquireLockAsync_System_TimeSpan_Azure_Iot_Operations_Services_LeasedLock_AcquireLockRequestOptions_System_Threading_CancellationToken_
  - name: (
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: ','
  - name: " "
  - uid: Azure.Iot.Operations.Services.LeasedLock.AcquireLockRequestOptions
    name: AcquireLockRequestOptions
    href: Azure.Iot.Operations.Services.LeasedLock.AcquireLockRequestOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Azure.Iot.Operations.Services.LeasedLock.AcquireLockResponse.FencingToken
  commentId: P:Azure.Iot.Operations.Services.LeasedLock.AcquireLockResponse.FencingToken
  href: Azure.Iot.Operations.Services.LeasedLock.AcquireLockResponse.html#Azure_Iot_Operations_Services_LeasedLock_AcquireLockResponse_FencingToken
  name: FencingToken
  nameWithType: AcquireLockResponse.FencingToken
  fullName: Azure.Iot.Operations.Services.LeasedLock.AcquireLockResponse.FencingToken
- uid: Azure.Iot.Operations.Services.LeasedLock
  commentId: N:Azure.Iot.Operations.Services.LeasedLock
  href: Azure.html
  name: Azure.Iot.Operations.Services.LeasedLock
  nameWithType: Azure.Iot.Operations.Services.LeasedLock
  fullName: Azure.Iot.Operations.Services.LeasedLock
  spec.csharp:
  - uid: Azure
    name: Azure
    href: Azure.html
  - name: .
  - uid: Azure.Iot
    name: Iot
    href: Azure.Iot.html
  - name: .
  - uid: Azure.Iot.Operations
    name: Operations
    href: Azure.Iot.Operations.html
  - name: .
  - uid: Azure.Iot.Operations.Services
    name: Services
    href: Azure.Iot.Operations.Services.html
  - name: .
  - uid: Azure.Iot.Operations.Services.LeasedLock
    name: LeasedLock
    href: Azure.Iot.Operations.Services.LeasedLock.html
  spec.vb:
  - uid: Azure
    name: Azure
    href: Azure.html
  - name: .
  - uid: Azure.Iot
    name: Iot
    href: Azure.Iot.html
  - name: .
  - uid: Azure.Iot.Operations
    name: Operations
    href: Azure.Iot.Operations.html
  - name: .
  - uid: Azure.Iot.Operations.Services
    name: Services
    href: Azure.Iot.Operations.Services.html
  - name: .
  - uid: Azure.Iot.Operations.Services.LeasedLock
    name: LeasedLock
    href: Azure.Iot.Operations.Services.LeasedLock.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.IAsyncDisposable
  commentId: T:System.IAsyncDisposable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iasyncdisposable
  name: IAsyncDisposable
  nameWithType: IAsyncDisposable
  fullName: System.IAsyncDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.ObserveLockAsync(Azure.Iot.Operations.Services.LeasedLock.ObserveLockRequestOptions,System.Threading.CancellationToken)
  commentId: M:Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.ObserveLockAsync(Azure.Iot.Operations.Services.LeasedLock.ObserveLockRequestOptions,System.Threading.CancellationToken)
  isExternal: true
  href: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.html#Azure_Iot_Operations_Services_LeasedLock_LeasedLockClient_ObserveLockAsync_Azure_Iot_Operations_Services_LeasedLock_ObserveLockRequestOptions_System_Threading_CancellationToken_
  name: ObserveLockAsync(ObserveLockRequestOptions, CancellationToken)
  nameWithType: LeasedLockClient.ObserveLockAsync(ObserveLockRequestOptions, CancellationToken)
  fullName: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.ObserveLockAsync(Azure.Iot.Operations.Services.LeasedLock.ObserveLockRequestOptions, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.ObserveLockAsync(Azure.Iot.Operations.Services.LeasedLock.ObserveLockRequestOptions,System.Threading.CancellationToken)
    name: ObserveLockAsync
    href: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.html#Azure_Iot_Operations_Services_LeasedLock_LeasedLockClient_ObserveLockAsync_Azure_Iot_Operations_Services_LeasedLock_ObserveLockRequestOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Azure.Iot.Operations.Services.LeasedLock.ObserveLockRequestOptions
    name: ObserveLockRequestOptions
    href: Azure.Iot.Operations.Services.LeasedLock.ObserveLockRequestOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.ObserveLockAsync(Azure.Iot.Operations.Services.LeasedLock.ObserveLockRequestOptions,System.Threading.CancellationToken)
    name: ObserveLockAsync
    href: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.html#Azure_Iot_Operations_Services_LeasedLock_LeasedLockClient_ObserveLockAsync_Azure_Iot_Operations_Services_LeasedLock_ObserveLockRequestOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Azure.Iot.Operations.Services.LeasedLock.ObserveLockRequestOptions
    name: ObserveLockRequestOptions
    href: Azure.Iot.Operations.Services.LeasedLock.ObserveLockRequestOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.UnobserveLockAsync(System.Threading.CancellationToken)
  commentId: M:Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.UnobserveLockAsync(System.Threading.CancellationToken)
  isExternal: true
  href: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.html#Azure_Iot_Operations_Services_LeasedLock_LeasedLockClient_UnobserveLockAsync_System_Threading_CancellationToken_
  name: UnobserveLockAsync(CancellationToken)
  nameWithType: LeasedLockClient.UnobserveLockAsync(CancellationToken)
  fullName: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.UnobserveLockAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.UnobserveLockAsync(System.Threading.CancellationToken)
    name: UnobserveLockAsync
    href: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.html#Azure_Iot_Operations_Services_LeasedLock_LeasedLockClient_UnobserveLockAsync_System_Threading_CancellationToken_
  - name: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.UnobserveLockAsync(System.Threading.CancellationToken)
    name: UnobserveLockAsync
    href: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.html#Azure_Iot_Operations_Services_LeasedLock_LeasedLockClient_UnobserveLockAsync_System_Threading_CancellationToken_
  - name: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: System.Func{System.Object,Azure.Iot.Operations.Services.LeasedLock.LockChangeEventArgs,System.Threading.Tasks.Task}
  commentId: T:System.Func{System.Object,Azure.Iot.Operations.Services.LeasedLock.LockChangeEventArgs,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<object, LockChangeEventArgs, Task>
  nameWithType: Func<object, LockChangeEventArgs, Task>
  fullName: System.Func<object, Azure.Iot.Operations.Services.LeasedLock.LockChangeEventArgs, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of Object, LockChangeEventArgs, Task)
  fullName.vb: System.Func(Of Object, Azure.Iot.Operations.Services.LeasedLock.LockChangeEventArgs, System.Threading.Tasks.Task)
  name.vb: Func(Of Object, LockChangeEventArgs, Task)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: Azure.Iot.Operations.Services.LeasedLock.LockChangeEventArgs
    name: LockChangeEventArgs
    href: Azure.Iot.Operations.Services.LeasedLock.LockChangeEventArgs.html
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: Azure.Iot.Operations.Services.LeasedLock.LockChangeEventArgs
    name: LockChangeEventArgs
    href: Azure.Iot.Operations.Services.LeasedLock.LockChangeEventArgs.html
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  - name: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.LockHolderName*
  commentId: Overload:Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.LockHolderName
  href: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.html#Azure_Iot_Operations_Services_LeasedLock_LeasedLockClient_LockHolderName
  name: LockHolderName
  nameWithType: LeasedLockClient.LockHolderName
  fullName: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.LockHolderName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.MostRecentAcquireLockResponse
  commentId: P:Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.MostRecentAcquireLockResponse
  href: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.html#Azure_Iot_Operations_Services_LeasedLock_LeasedLockClient_MostRecentAcquireLockResponse
  name: MostRecentAcquireLockResponse
  nameWithType: LeasedLockClient.MostRecentAcquireLockResponse
  fullName: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.MostRecentAcquireLockResponse
- uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AutomaticRenewalOptions*
  commentId: Overload:Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AutomaticRenewalOptions
  href: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.html#Azure_Iot_Operations_Services_LeasedLock_LeasedLockClient_AutomaticRenewalOptions
  name: AutomaticRenewalOptions
  nameWithType: LeasedLockClient.AutomaticRenewalOptions
  fullName: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AutomaticRenewalOptions
- uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockAutomaticRenewalOptions
  commentId: T:Azure.Iot.Operations.Services.LeasedLock.LeasedLockAutomaticRenewalOptions
  parent: Azure.Iot.Operations.Services.LeasedLock
  href: Azure.Iot.Operations.Services.LeasedLock.LeasedLockAutomaticRenewalOptions.html
  name: LeasedLockAutomaticRenewalOptions
  nameWithType: LeasedLockAutomaticRenewalOptions
  fullName: Azure.Iot.Operations.Services.LeasedLock.LeasedLockAutomaticRenewalOptions
- uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.MostRecentAcquireLockResponse*
  commentId: Overload:Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.MostRecentAcquireLockResponse
  href: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.html#Azure_Iot_Operations_Services_LeasedLock_LeasedLockClient_MostRecentAcquireLockResponse
  name: MostRecentAcquireLockResponse
  nameWithType: LeasedLockClient.MostRecentAcquireLockResponse
  fullName: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.MostRecentAcquireLockResponse
- uid: Azure.Iot.Operations.Services.LeasedLock.AcquireLockResponse
  commentId: T:Azure.Iot.Operations.Services.LeasedLock.AcquireLockResponse
  parent: Azure.Iot.Operations.Services.LeasedLock
  href: Azure.Iot.Operations.Services.LeasedLock.AcquireLockResponse.html
  name: AcquireLockResponse
  nameWithType: AcquireLockResponse
  fullName: Azure.Iot.Operations.Services.LeasedLock.AcquireLockResponse
- uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.#ctor*
  commentId: Overload:Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.#ctor
  href: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.html#Azure_Iot_Operations_Services_LeasedLock_LeasedLockClient__ctor_Azure_Iot_Operations_Protocol_IMqttPubSubClient_System_String_System_String_
  name: LeasedLockClient
  nameWithType: LeasedLockClient.LeasedLockClient
  fullName: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.LeasedLockClient
  nameWithType.vb: LeasedLockClient.New
  fullName.vb: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.New
  name.vb: New
- uid: Azure.Iot.Operations.Protocol.IMqttPubSubClient
  commentId: T:Azure.Iot.Operations.Protocol.IMqttPubSubClient
  parent: Azure.Iot.Operations.Protocol
  href: Azure.Iot.Operations.Protocol.IMqttPubSubClient.html
  name: IMqttPubSubClient
  nameWithType: IMqttPubSubClient
  fullName: Azure.Iot.Operations.Protocol.IMqttPubSubClient
- uid: Azure.Iot.Operations.Protocol
  commentId: N:Azure.Iot.Operations.Protocol
  href: Azure.html
  name: Azure.Iot.Operations.Protocol
  nameWithType: Azure.Iot.Operations.Protocol
  fullName: Azure.Iot.Operations.Protocol
  spec.csharp:
  - uid: Azure
    name: Azure
    href: Azure.html
  - name: .
  - uid: Azure.Iot
    name: Iot
    href: Azure.Iot.html
  - name: .
  - uid: Azure.Iot.Operations
    name: Operations
    href: Azure.Iot.Operations.html
  - name: .
  - uid: Azure.Iot.Operations.Protocol
    name: Protocol
    href: Azure.Iot.Operations.Protocol.html
  spec.vb:
  - uid: Azure
    name: Azure
    href: Azure.html
  - name: .
  - uid: Azure.Iot
    name: Iot
    href: Azure.Iot.html
  - name: .
  - uid: Azure.Iot.Operations
    name: Operations
    href: Azure.Iot.Operations.html
  - name: .
  - uid: Azure.Iot.Operations.Protocol
    name: Protocol
    href: Azure.Iot.Operations.Protocol.html
- uid: Azure.Iot.Operations.Services.StateStore.IStateStoreClient
  commentId: T:Azure.Iot.Operations.Services.StateStore.IStateStoreClient
  parent: Azure.Iot.Operations.Services.StateStore
  href: Azure.Iot.Operations.Services.StateStore.IStateStoreClient.html
  name: IStateStoreClient
  nameWithType: IStateStoreClient
  fullName: Azure.Iot.Operations.Services.StateStore.IStateStoreClient
- uid: Azure.Iot.Operations.Services.StateStore
  commentId: N:Azure.Iot.Operations.Services.StateStore
  href: Azure.html
  name: Azure.Iot.Operations.Services.StateStore
  nameWithType: Azure.Iot.Operations.Services.StateStore
  fullName: Azure.Iot.Operations.Services.StateStore
  spec.csharp:
  - uid: Azure
    name: Azure
    href: Azure.html
  - name: .
  - uid: Azure.Iot
    name: Iot
    href: Azure.Iot.html
  - name: .
  - uid: Azure.Iot.Operations
    name: Operations
    href: Azure.Iot.Operations.html
  - name: .
  - uid: Azure.Iot.Operations.Services
    name: Services
    href: Azure.Iot.Operations.Services.html
  - name: .
  - uid: Azure.Iot.Operations.Services.StateStore
    name: StateStore
    href: Azure.Iot.Operations.Services.StateStore.html
  spec.vb:
  - uid: Azure
    name: Azure
    href: Azure.html
  - name: .
  - uid: Azure.Iot
    name: Iot
    href: Azure.Iot.html
  - name: .
  - uid: Azure.Iot.Operations
    name: Operations
    href: Azure.Iot.Operations.html
  - name: .
  - uid: Azure.Iot.Operations.Services
    name: Services
    href: Azure.Iot.Operations.Services.html
  - name: .
  - uid: Azure.Iot.Operations.Services.StateStore
    name: StateStore
    href: Azure.Iot.Operations.Services.StateStore.html
- uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.TryAcquireLockAsync*
  commentId: Overload:Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.TryAcquireLockAsync
  href: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.html#Azure_Iot_Operations_Services_LeasedLock_LeasedLockClient_TryAcquireLockAsync_System_TimeSpan_Azure_Iot_Operations_Services_LeasedLock_AcquireLockRequestOptions_System_Threading_CancellationToken_
  name: TryAcquireLockAsync
  nameWithType: LeasedLockClient.TryAcquireLockAsync
  fullName: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.TryAcquireLockAsync
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Azure.Iot.Operations.Services.LeasedLock.AcquireLockRequestOptions
  commentId: T:Azure.Iot.Operations.Services.LeasedLock.AcquireLockRequestOptions
  parent: Azure.Iot.Operations.Services.LeasedLock
  href: Azure.Iot.Operations.Services.LeasedLock.AcquireLockRequestOptions.html
  name: AcquireLockRequestOptions
  nameWithType: AcquireLockRequestOptions
  fullName: Azure.Iot.Operations.Services.LeasedLock.AcquireLockRequestOptions
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{Azure.Iot.Operations.Services.LeasedLock.AcquireLockResponse}
  commentId: T:System.Threading.Tasks.Task{Azure.Iot.Operations.Services.LeasedLock.AcquireLockResponse}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<AcquireLockResponse>
  nameWithType: Task<AcquireLockResponse>
  fullName: System.Threading.Tasks.Task<Azure.Iot.Operations.Services.LeasedLock.AcquireLockResponse>
  nameWithType.vb: Task(Of AcquireLockResponse)
  fullName.vb: System.Threading.Tasks.Task(Of Azure.Iot.Operations.Services.LeasedLock.AcquireLockResponse)
  name.vb: Task(Of AcquireLockResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Azure.Iot.Operations.Services.LeasedLock.AcquireLockResponse
    name: AcquireLockResponse
    href: Azure.Iot.Operations.Services.LeasedLock.AcquireLockResponse.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Azure.Iot.Operations.Services.LeasedLock.AcquireLockResponse
    name: AcquireLockResponse
    href: Azure.Iot.Operations.Services.LeasedLock.AcquireLockResponse.html
  - name: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AcquireLockAsync*
  commentId: Overload:Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AcquireLockAsync
  href: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.html#Azure_Iot_Operations_Services_LeasedLock_LeasedLockClient_AcquireLockAsync_System_TimeSpan_Azure_Iot_Operations_Services_LeasedLock_AcquireLockRequestOptions_System_Threading_CancellationToken_
  name: AcquireLockAsync
  nameWithType: LeasedLockClient.AcquireLockAsync
  fullName: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AcquireLockAsync
- uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AcquireLockAndUpdateValueAsync*
  commentId: Overload:Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AcquireLockAndUpdateValueAsync
  href: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.html#Azure_Iot_Operations_Services_LeasedLock_LeasedLockClient_AcquireLockAndUpdateValueAsync_Azure_Iot_Operations_Services_StateStore_StateStoreKey_System_Func_Azure_Iot_Operations_Services_StateStore_StateStoreValue_Azure_Iot_Operations_Services_StateStore_StateStoreValue__System_Nullable_System_TimeSpan__System_Threading_CancellationToken_
  name: AcquireLockAndUpdateValueAsync
  nameWithType: LeasedLockClient.AcquireLockAndUpdateValueAsync
  fullName: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.AcquireLockAndUpdateValueAsync
- uid: Azure.Iot.Operations.Services.StateStore.StateStoreKey
  commentId: T:Azure.Iot.Operations.Services.StateStore.StateStoreKey
  parent: Azure.Iot.Operations.Services.StateStore
  href: Azure.Iot.Operations.Services.StateStore.StateStoreKey.html
  name: StateStoreKey
  nameWithType: StateStoreKey
  fullName: Azure.Iot.Operations.Services.StateStore.StateStoreKey
- uid: System.Func{Azure.Iot.Operations.Services.StateStore.StateStoreValue,Azure.Iot.Operations.Services.StateStore.StateStoreValue}
  commentId: T:System.Func{Azure.Iot.Operations.Services.StateStore.StateStoreValue,Azure.Iot.Operations.Services.StateStore.StateStoreValue}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<StateStoreValue, StateStoreValue>
  nameWithType: Func<StateStoreValue, StateStoreValue>
  fullName: System.Func<Azure.Iot.Operations.Services.StateStore.StateStoreValue, Azure.Iot.Operations.Services.StateStore.StateStoreValue>
  nameWithType.vb: Func(Of StateStoreValue, StateStoreValue)
  fullName.vb: System.Func(Of Azure.Iot.Operations.Services.StateStore.StateStoreValue, Azure.Iot.Operations.Services.StateStore.StateStoreValue)
  name.vb: Func(Of StateStoreValue, StateStoreValue)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: Azure.Iot.Operations.Services.StateStore.StateStoreValue
    name: StateStoreValue
    href: Azure.Iot.Operations.Services.StateStore.StateStoreValue.html
  - name: ','
  - name: " "
  - uid: Azure.Iot.Operations.Services.StateStore.StateStoreValue
    name: StateStoreValue
    href: Azure.Iot.Operations.Services.StateStore.StateStoreValue.html
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: Azure.Iot.Operations.Services.StateStore.StateStoreValue
    name: StateStoreValue
    href: Azure.Iot.Operations.Services.StateStore.StateStoreValue.html
  - name: ','
  - name: " "
  - uid: Azure.Iot.Operations.Services.StateStore.StateStoreValue
    name: StateStoreValue
    href: Azure.Iot.Operations.Services.StateStore.StateStoreValue.html
  - name: )
- uid: System.Nullable{System.TimeSpan}
  commentId: T:System.Nullable{System.TimeSpan}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: TimeSpan?
  nameWithType: TimeSpan?
  fullName: System.TimeSpan?
  spec.csharp:
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: '?'
  spec.vb:
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: '?'
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.GetLockHolderAsync*
  commentId: Overload:Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.GetLockHolderAsync
  href: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.html#Azure_Iot_Operations_Services_LeasedLock_LeasedLockClient_GetLockHolderAsync_System_Threading_CancellationToken_
  name: GetLockHolderAsync
  nameWithType: LeasedLockClient.GetLockHolderAsync
  fullName: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.GetLockHolderAsync
- uid: System.Threading.Tasks.Task{Azure.Iot.Operations.Services.LeasedLock.GetLockHolderResponse}
  commentId: T:System.Threading.Tasks.Task{Azure.Iot.Operations.Services.LeasedLock.GetLockHolderResponse}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<GetLockHolderResponse>
  nameWithType: Task<GetLockHolderResponse>
  fullName: System.Threading.Tasks.Task<Azure.Iot.Operations.Services.LeasedLock.GetLockHolderResponse>
  nameWithType.vb: Task(Of GetLockHolderResponse)
  fullName.vb: System.Threading.Tasks.Task(Of Azure.Iot.Operations.Services.LeasedLock.GetLockHolderResponse)
  name.vb: Task(Of GetLockHolderResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Azure.Iot.Operations.Services.LeasedLock.GetLockHolderResponse
    name: GetLockHolderResponse
    href: Azure.Iot.Operations.Services.LeasedLock.GetLockHolderResponse.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Azure.Iot.Operations.Services.LeasedLock.GetLockHolderResponse
    name: GetLockHolderResponse
    href: Azure.Iot.Operations.Services.LeasedLock.GetLockHolderResponse.html
  - name: )
- uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.ReleaseLockAsync*
  commentId: Overload:Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.ReleaseLockAsync
  href: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.html#Azure_Iot_Operations_Services_LeasedLock_LeasedLockClient_ReleaseLockAsync_Azure_Iot_Operations_Services_LeasedLock_ReleaseLockRequestOptions_System_Threading_CancellationToken_
  name: ReleaseLockAsync
  nameWithType: LeasedLockClient.ReleaseLockAsync
  fullName: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.ReleaseLockAsync
- uid: Azure.Iot.Operations.Services.LeasedLock.ReleaseLockRequestOptions
  commentId: T:Azure.Iot.Operations.Services.LeasedLock.ReleaseLockRequestOptions
  parent: Azure.Iot.Operations.Services.LeasedLock
  href: Azure.Iot.Operations.Services.LeasedLock.ReleaseLockRequestOptions.html
  name: ReleaseLockRequestOptions
  nameWithType: ReleaseLockRequestOptions
  fullName: Azure.Iot.Operations.Services.LeasedLock.ReleaseLockRequestOptions
- uid: System.Threading.Tasks.Task{Azure.Iot.Operations.Services.LeasedLock.ReleaseLockResponse}
  commentId: T:System.Threading.Tasks.Task{Azure.Iot.Operations.Services.LeasedLock.ReleaseLockResponse}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<ReleaseLockResponse>
  nameWithType: Task<ReleaseLockResponse>
  fullName: System.Threading.Tasks.Task<Azure.Iot.Operations.Services.LeasedLock.ReleaseLockResponse>
  nameWithType.vb: Task(Of ReleaseLockResponse)
  fullName.vb: System.Threading.Tasks.Task(Of Azure.Iot.Operations.Services.LeasedLock.ReleaseLockResponse)
  name.vb: Task(Of ReleaseLockResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Azure.Iot.Operations.Services.LeasedLock.ReleaseLockResponse
    name: ReleaseLockResponse
    href: Azure.Iot.Operations.Services.LeasedLock.ReleaseLockResponse.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Azure.Iot.Operations.Services.LeasedLock.ReleaseLockResponse
    name: ReleaseLockResponse
    href: Azure.Iot.Operations.Services.LeasedLock.ReleaseLockResponse.html
  - name: )
- uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.LockChangeEventReceivedAsync
  commentId: E:Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.LockChangeEventReceivedAsync
  href: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.html#Azure_Iot_Operations_Services_LeasedLock_LeasedLockClient_LockChangeEventReceivedAsync
  name: LockChangeEventReceivedAsync
  nameWithType: LeasedLockClient.LockChangeEventReceivedAsync
  fullName: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.LockChangeEventReceivedAsync
- uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.ObserveLockAsync*
  commentId: Overload:Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.ObserveLockAsync
  href: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.html#Azure_Iot_Operations_Services_LeasedLock_LeasedLockClient_ObserveLockAsync_Azure_Iot_Operations_Services_LeasedLock_ObserveLockRequestOptions_System_Threading_CancellationToken_
  name: ObserveLockAsync
  nameWithType: LeasedLockClient.ObserveLockAsync
  fullName: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.ObserveLockAsync
- uid: Azure.Iot.Operations.Services.LeasedLock.ObserveLockRequestOptions
  commentId: T:Azure.Iot.Operations.Services.LeasedLock.ObserveLockRequestOptions
  parent: Azure.Iot.Operations.Services.LeasedLock
  href: Azure.Iot.Operations.Services.LeasedLock.ObserveLockRequestOptions.html
  name: ObserveLockRequestOptions
  nameWithType: ObserveLockRequestOptions
  fullName: Azure.Iot.Operations.Services.LeasedLock.ObserveLockRequestOptions
- uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.UnobserveLockAsync*
  commentId: Overload:Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.UnobserveLockAsync
  href: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.html#Azure_Iot_Operations_Services_LeasedLock_LeasedLockClient_UnobserveLockAsync_System_Threading_CancellationToken_
  name: UnobserveLockAsync
  nameWithType: LeasedLockClient.UnobserveLockAsync
  fullName: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.UnobserveLockAsync
- uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.DisposeAsync*
  commentId: Overload:Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.DisposeAsync
  href: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.html#Azure_Iot_Operations_Services_LeasedLock_LeasedLockClient_DisposeAsync
  name: DisposeAsync
  nameWithType: LeasedLockClient.DisposeAsync
  fullName: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.DisposeAsync
- uid: System.IAsyncDisposable.DisposeAsync
  commentId: M:System.IAsyncDisposable.DisposeAsync
  parent: System.IAsyncDisposable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iasyncdisposable.disposeasync
  name: DisposeAsync()
  nameWithType: IAsyncDisposable.DisposeAsync()
  fullName: System.IAsyncDisposable.DisposeAsync()
  spec.csharp:
  - uid: System.IAsyncDisposable.DisposeAsync
    name: DisposeAsync
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iasyncdisposable.disposeasync
  - name: (
  - name: )
  spec.vb:
  - uid: System.IAsyncDisposable.DisposeAsync
    name: DisposeAsync
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iasyncdisposable.disposeasync
  - name: (
  - name: )
- uid: System.Threading.Tasks.ValueTask
  commentId: T:System.Threading.Tasks.ValueTask
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask
  name: ValueTask
  nameWithType: ValueTask
  fullName: System.Threading.Tasks.ValueTask
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.DisposeAsyncCore*
  commentId: Overload:Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.DisposeAsyncCore
  href: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.html#Azure_Iot_Operations_Services_LeasedLock_LeasedLockClient_DisposeAsyncCore_System_Boolean_
  name: DisposeAsyncCore
  nameWithType: LeasedLockClient.DisposeAsyncCore
  fullName: Azure.Iot.Operations.Services.LeasedLock.LeasedLockClient.DisposeAsyncCore
