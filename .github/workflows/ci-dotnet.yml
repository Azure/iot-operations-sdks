name: CI-dotnet

on:
  workflow_dispatch:
  pull_request:
    paths:
      - 'dotnet/**'
      - 'eng/test/test-cases/Protocol/**'
      - 'tools/dsscli'
  push:
    branches:
    - main  
  schedule:
  - cron: '0 11 * * *'  # Nightly at 4am PST

permissions:
  contents: read
  actions: read
  checks: write
    
jobs:
  build:

    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.301
    
    - name: dotnet info
      run: dotnet --info

    - name: Setup Cluster
      run: |
        tools/deployment/initialize-cluster.sh
        tools/deployment/deploy-aio.sh nightly
        
    - name: Create Kubernetes Token
      run: |
        kubectl create token default --duration=86400s --audience=aio-internal > .devcontainer/token.txt
        echo "TOKEN_FILE_PATH=$(pwd)/.devcontainer/token.txt" >> $GITHUB_ENV

    - name: Install Protoc
      uses: arduino/setup-protoc@v3

    - name: Install AvroGen
      run: (pushd /; dotnet tool install --global Apache.Avro.Tools; popd) # need to install from root to avoid using the nuget.config we for build and push
  
    - name: Build SDK (Debug)
      run: dotnet build -c Debug dotnet/Azure.Iot.Operations.sln

    - name: Build CodeGen (Debug)
      run: dotnet build -c Debug codegen/codegen.sln

    - name: Test CodeGen
      run: dotnet test codegen/codegen.sln

    - name: CodeGen .NET TestEnvoys
      run: (cd dotnet/samples/TestEnvoys; ./gen.sh)

    - name: CodeGen StateStore RPC client
      run: (cd dotnet/src/Azure.Iot.Operations.Services/StateStore; ./gen.sh)

    - name: CodeGen SchemaRegistryEnvoy
      run: (cd dotnet/src/Azure.Iot.Operations.Services/SchemaRegistry; ./gen.sh)

    - name: Build SDK (Debug)
      run: dotnet build -c Debug dotnet/Azure.Iot.Operations.sln

    - name: Build SDK (Release)
      run: dotnet build -c Release dotnet/Azure.Iot.Operations.sln

    - name: Setup Faultable MQTT Broker
      run: RUNNER_TRACKING_ID="" && dotnet run --project eng/test/faultablemqttbroker/src/Azure.Iot.Operations.FaultableMqttBroker/Azure.Iot.Operations.FaultableMqttBroker.csproj &

    - name: Setup SchemaRegistry Host
      run: RUNNER_TRACKING_ID="" && dotnet run --project eng/test/schema-registry/src/Azure.Iot.Operations.Services.SchemaRegistry.Host/Azure.Iot.Operations.Services.SchemaRegistry.Host.csproj &
      
    # This file is created by deploy-aio.sh
    - name: Load test service account token into environment
      run: |
        if [ ! -f "./.devcontainer/token.txt" ]; then
          echo "Missing 'token.txt' file"
          exit 1
        fi

        echo "TOKEN_FILE_PATH=$(pwd)/.devcontainer/token.txt" >> $GITHUB_ENV

    # This file is created by deploy-aio.sh
    - name: Load CA certificate into environment
      run: |
        if [ ! -f "./.devcontainer/mqtt-broker-ca.crt" ]; then
          echo "Missing 'mqtt-broker-ca.crt' file"
          exit 1
        fi

        echo "CA_FILE_PATH=$(pwd)/.devcontainer/mqtt-broker-ca.crt" >> $GITHUB_ENV

    # These files are created by deploy-aio.sh
    - name: Load client certificates into environment
      run: |
        if [ ! -f "./.devcontainer/client.key" ]; then
          echo "Missing 'client.key' file"
          exit 1
        fi

        if [ ! -f "./.devcontainer/client.crt" ]; then
          echo "Missing 'client.crt' file"
          exit 1
        fi

        echo "CLIENT_KEY=$(pwd)/.devcontainer/client.key" >> $GITHUB_ENV
        echo "CLIENT_CERT=$(pwd)/.devcontainer/client.crt" >> $GITHUB_ENV 
      
    - name: Test SDK (TLS + SAT)
      run: dotnet test dotnet/Azure.Iot.Operations.sln -e MQTT_TEST_BROKER_CS="HostName=127.0.0.1;TcpPort=8884;UseTls=true;CaFile=${{ env.CA_FILE_PATH }};SatAuthFile=${{ env.TOKEN_FILE_PATH }}" -e FAULTABLE_MQTT_TEST_BROKER_CS="HostName=localhost;TcpPort=1884;UseTls=false" --logger:"trx;LogFileName=test-results.trx" -- xunit.parallelizeAssembly=true

    - name: Test SDK (TLS + x509)
      run: dotnet test dotnet/Azure.Iot.Operations.sln --filter "FullyQualifiedName~Azure.Iot.Operations.Services.IntegrationTests.LeaderElectionClientIntegrationTests.TestFencing" -e MQTT_TEST_BROKER_CS="HostName=127.0.0.1;TcpPort=8883;UseTls=true;CaFile=${{ env.CA_FILE_PATH }};KeyFile=${{ env.CLIENT_KEY }};CertFile=${{ env.CLIENT_CERT }}" --logger:"trx;LogFileName=test-results.trx" -- xunit.parallelizeAssembly=true    
    
    - uses: dorny/test-reporter@v1
      id: test-reporter
      if: always()
      with:
        name: dotnet test report
        path: 'dotnet/**/test-results.trx,tools/**/test-results.trx'
        reporter: dotnet-trx  

    - name: Annotate Test Report
      if: always()
      run: echo Test Report ${{ steps.test-reporter.outputs.url_html }} >> $GITHUB_STEP_SUMMARY