name: CI-Rust

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  # Triggers the workflow on PR events
  pull_request:
    paths:
      - '.github/**'
      - 'rust/**'
      - 'eng/test/**'
      - 'tools/statestore-cli/**'
      - 'codegen/**'
      - 'tools/deployment/**'

  # Triggers the workflow on push events for the "main" branch
  push:
    branches:
      - "main"
  # Triggers the workflow on a schedule
  schedule:
    - cron: '0 11 * * *'  # Nightly at 4am PST

# only allow one run / branch at a time
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  actions: read
  checks: write

defaults:
  run:
    shell: bash
    working-directory: ./rust

env:
  CARGO_TERM_COLOR: always

jobs:

  build:
    name: CI-rust
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v4

    - name: Install AIO
      uses: ./.github/actions/configure-aio
      with:
        wait-for-broker: 'true'
        install-rust: 'true'
        action-token: ${{ secrets.AIO_SDKS_ACTION_TOKEN }}
    
    - name: Create ADR resources
      run: kubectl apply -f ../eng/test/test-adr-resources
    
    - name: Deploy Polling Rest Connector
      working-directory: rust/azure_iot_operations_connector/examples/rest_connector_resources
      run: ./deploy-connector-and-device.sh

    - name: Run Checks
      run: |
        set -e
        make check

    - name: Run Tests
      run: |
        set -e
        ENABLE_NETWORK_TESTS=true cargo test test_connector_simple_recv -- --nocapture

    - name: Run Coverage Report
      run: |
        set -e
        make coverage

    - uses: "actions/upload-artifact@v4"
      with:
        name: "report-azure-iot-operations"
        path: "${{ runner.temp }}/report"
        if-no-files-found: "error"
        retention-days: 10

    - name: Verify Statestore CLI
      working-directory: tools/statestore-cli
      run:
        source ../../rust/ci/build-deps.sh
        cargo clippy --all-features
        cargo fmt --verbose --all

    - name: Verify Stub Service
      working-directory: tools/azure_iot_operations_stub_services
      run:
        source ../../rust/ci/build-deps.sh
        cargo clippy --all-features
        cargo fmt --verbose --all

    - name: Display logs from all kubernetes pods
      if: always()
      run: |
        kubectl get pods -n azure-iot-operations
        for pod in $(kubectl get pods -o jsonpath='{.items[*].metadata.name}'); do
          echo "Logs for pod: $pod"
          kubectl describe pod $pod
          kubectl logs $pod
          echo "-----------------------------------"
        done

    # TODO: Enable and configure these once the codegen is ready
    # - name: CodeGen Rust TestEnvoys
    #   run: |
    #     cd samples/rust/test_envoys
    #     sh ./gen.sh
    # - name: Build with CodeGen TestEnvoys
    #   run: cargo build --verbose

    # - name: Run clippy with CodeGen TestEnvoys
    #   run: |
    #     cargo clippy --all-targets --all-features
    #     # If this test fails, some fixes may be able to be automatically performed with `cargo clippy --fix`
    # - name: Run format check
    #   run: |
    #     cargo fmt --check || echo "::error::Code formatting issues detected in generated code"
    #   continue-on-error: true
