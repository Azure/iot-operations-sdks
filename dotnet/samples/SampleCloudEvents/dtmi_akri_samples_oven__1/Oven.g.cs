/* Code generated by Azure.Iot.Operations.ProtocolCompiler; DO NOT EDIT. */

#nullable enable

namespace SampleCloudEvents.dtmi_akri_samples_oven__1
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;
    using Azure.Iot.Operations.Protocol.Models;
    using Azure.Iot.Operations.Protocol;
    using Azure.Iot.Operations.Protocol.RPC;
    using Azure.Iot.Operations.Protocol.Telemetry;
    using SampleCloudEvents;

    [TelemetryTopic("akri/samples/{modelId}/{senderId}")]
    public static partial class Oven
    {
        public abstract partial class Service : IAsyncDisposable
        {
            private IMqttPubSubClient mqttClient;
            private readonly TelemetryCollectionSender telemetryCollectionSender;

            public Service(ApplicationContext applicationContext, IMqttPubSubClient mqttClient)
            {
                this.mqttClient = mqttClient;
                this.CustomTopicTokenMap = new();

                this.telemetryCollectionSender = new TelemetryCollectionSender(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
            }

            public TelemetryCollectionSender TelemetryCollectionSender { get => this.telemetryCollectionSender; }

            public Dictionary<string, string> CustomTopicTokenMap { get; private init; }

            public async Task SendTelemetryAsync(TelemetryCollection telemetry, OutgoingTelemetryMetadata metadata, MqttQualityOfServiceLevel qos = MqttQualityOfServiceLevel.AtLeastOnce, TimeSpan? messageExpiryInterval = null, CancellationToken cancellationToken = default)
            {
                await this.telemetryCollectionSender.SendTelemetryAsync(telemetry, metadata, null, qos, messageExpiryInterval, cancellationToken);
            }

            public async ValueTask DisposeAsync()
            {
                await this.telemetryCollectionSender.DisposeAsync().ConfigureAwait(false);
            }

            public async ValueTask DisposeAsync(bool disposing)
            {
                await this.telemetryCollectionSender.DisposeAsync(disposing).ConfigureAwait(false);
            }
        }

        //public abstract partial class Client
        //{
        //    private IMqttPubSubClient mqttClient;
        //    private readonly TelemetryCollectionReceiver telemetryCollectionReceiver;

        //    public Client(ApplicationContext applicationContext, IMqttPubSubClient mqttClient)
        //    {
        //        this.mqttClient = mqttClient;
        //        this.CustomTopicTokenMap = new();

        //        this.telemetryCollectionReceiver = new TelemetryCollectionReceiver(applicationContext, mqttClient) { OnTelemetryReceived = this.ReceiveTelemetry, CustomTopicTokenMap = this.CustomTopicTokenMap };
        //    }

        //    public TelemetryCollectionReceiver TelemetryCollectionReceiver { get => this.telemetryCollectionReceiver; }

        //    public Dictionary<string, string> CustomTopicTokenMap { get; private init; }

        //    public abstract Task ReceiveTelemetry(string senderId, TelemetryCollection telemetry, IncomingTelemetryMetadata metadata);

        //    public async Task StartAsync(CancellationToken cancellationToken = default)
        //    {
        //        await Task.WhenAll(
        //            this.telemetryCollectionReceiver.StartAsync(cancellationToken)).ConfigureAwait(false);
        //    }

        //    public async Task StopAsync(CancellationToken cancellationToken = default)
        //    {
        //        await Task.WhenAll(
        //            this.telemetryCollectionReceiver.StopAsync(cancellationToken)).ConfigureAwait(false);
        //    }

        //    public async ValueTask DisposeAsync()
        //    {
        //        await this.telemetryCollectionReceiver.DisposeAsync().ConfigureAwait(false);
        //    }

        //    public async ValueTask DisposeAsync(bool disposing)
        //    {
        //        await this.telemetryCollectionReceiver.DisposeAsync(disposing).ConfigureAwait(false);
        //    }
        //}
    }
}
