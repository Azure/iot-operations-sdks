/* Code generated by Azure.Iot.Operations.ProtocolCompiler; DO NOT EDIT. */

#nullable enable

namespace TestEnvoys.dtmi_rpc_samples_math__1
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;
    using Azure.Iot.Operations.Protocol.Models;
    using Azure.Iot.Operations.Protocol;
    using Azure.Iot.Operations.Protocol.RPC;
    using Azure.Iot.Operations.Protocol.Telemetry;
    using TestEnvoys;

    [CommandTopic("rpc/samples/{modelId}/{executorId}/{commandName}")]
    public static partial class Math
    {
        public abstract partial class Service : IAsyncDisposable
        {
            private IMqttPubSubClient mqttClient;
            private readonly IsPrimeCommandExecutor isPrimeCommandExecutor;
            private readonly FibCommandExecutor fibCommandExecutor;
            private readonly GetRandomCommandExecutor getRandomCommandExecutor;

            public Service(IMqttPubSubClient mqttClient)
            {
                this.mqttClient = mqttClient;
                this.CustomTopicTokenMap = new();

                this.isPrimeCommandExecutor = new IsPrimeCommandExecutor(mqttClient) { OnCommandReceived = IsPrime_Int, CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.fibCommandExecutor = new FibCommandExecutor(mqttClient) { OnCommandReceived = Fib_Int, CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.getRandomCommandExecutor = new GetRandomCommandExecutor(mqttClient) { OnCommandReceived = GetRandom_Int, CustomTopicTokenMap = this.CustomTopicTokenMap };
            }

            public IsPrimeCommandExecutor IsPrimeCommandExecutor { get => this.isPrimeCommandExecutor; }
            public FibCommandExecutor FibCommandExecutor { get => this.fibCommandExecutor; }
            public GetRandomCommandExecutor GetRandomCommandExecutor { get => this.getRandomCommandExecutor; }

            public Dictionary<string, string> CustomTopicTokenMap { get; private init; }

            public abstract Task<ExtendedResponse<IsPrimeResponsePayload>> IsPrimeAsync(IsPrimeRequestPayload request, CommandRequestMetadata requestMetadata, CancellationToken cancellationToken);

            public abstract Task<ExtendedResponse<FibResponsePayload>> FibAsync(FibRequestPayload request, CommandRequestMetadata requestMetadata, CancellationToken cancellationToken);

            public abstract Task<ExtendedResponse<GetRandomResponsePayload>> GetRandomAsync(CommandRequestMetadata requestMetadata, CancellationToken cancellationToken);

            public async Task StartAsync(int? preferredDispatchConcurrency = null, CancellationToken cancellationToken = default)
            {
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "executorId", this.mqttClient.ClientId! },
                };

                await Task.WhenAll(
                    this.isPrimeCommandExecutor.StartAsync(preferredDispatchConcurrency, transientTopicTokenMap, cancellationToken),
                    this.fibCommandExecutor.StartAsync(preferredDispatchConcurrency, transientTopicTokenMap, cancellationToken),
                    this.getRandomCommandExecutor.StartAsync(preferredDispatchConcurrency, transientTopicTokenMap, cancellationToken)).ConfigureAwait(false);
            }

            public async Task StopAsync(CancellationToken cancellationToken = default)
            {
                await Task.WhenAll(
                    this.isPrimeCommandExecutor.StopAsync(cancellationToken),
                    this.fibCommandExecutor.StopAsync(cancellationToken),
                    this.getRandomCommandExecutor.StopAsync(cancellationToken)).ConfigureAwait(false);
            }
            private async Task<ExtendedResponse<IsPrimeResponsePayload>> IsPrime_Int(ExtendedRequest<IsPrimeRequestPayload> req, CancellationToken cancellationToken)
            {
                ExtendedResponse<IsPrimeResponsePayload> extended = await this.IsPrimeAsync(req.Request!, req.RequestMetadata!, cancellationToken);
                return new ExtendedResponse<IsPrimeResponsePayload> { Response = extended.Response, ResponseMetadata = extended.ResponseMetadata };
            }
            private async Task<ExtendedResponse<FibResponsePayload>> Fib_Int(ExtendedRequest<FibRequestPayload> req, CancellationToken cancellationToken)
            {
                ExtendedResponse<FibResponsePayload> extended = await this.FibAsync(req.Request!, req.RequestMetadata!, cancellationToken);
                return new ExtendedResponse<FibResponsePayload> { Response = extended.Response, ResponseMetadata = extended.ResponseMetadata };
            }
            private async Task<ExtendedResponse<GetRandomResponsePayload>> GetRandom_Int(ExtendedRequest<Google.Protobuf.WellKnownTypes.Empty> req, CancellationToken cancellationToken)
            {
                ExtendedResponse<GetRandomResponsePayload> extended = await this.GetRandomAsync(req.RequestMetadata!, cancellationToken);
                return new ExtendedResponse<GetRandomResponsePayload> { Response = extended.Response, ResponseMetadata = extended.ResponseMetadata };
            }

            public async ValueTask DisposeAsync()
            {
                await this.isPrimeCommandExecutor.DisposeAsync().ConfigureAwait(false);
                await this.fibCommandExecutor.DisposeAsync().ConfigureAwait(false);
                await this.getRandomCommandExecutor.DisposeAsync().ConfigureAwait(false);
            }

            public async ValueTask DisposeAsync(bool disposing)
            {
                await this.isPrimeCommandExecutor.DisposeAsync(disposing).ConfigureAwait(false);
                await this.fibCommandExecutor.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getRandomCommandExecutor.DisposeAsync(disposing).ConfigureAwait(false);
            }
        }

        public abstract partial class Client : IAsyncDisposable
        {
            private IMqttPubSubClient mqttClient;
            private readonly IsPrimeCommandInvoker isPrimeCommandInvoker;
            private readonly FibCommandInvoker fibCommandInvoker;
            private readonly GetRandomCommandInvoker getRandomCommandInvoker;

            public Client(IMqttPubSubClient mqttClient)
            {
                this.mqttClient = mqttClient;
                this.CustomTopicTokenMap = new();

                this.isPrimeCommandInvoker = new IsPrimeCommandInvoker(mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.fibCommandInvoker = new FibCommandInvoker(mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.getRandomCommandInvoker = new GetRandomCommandInvoker(mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
            }

            public IsPrimeCommandInvoker IsPrimeCommandInvoker { get => this.isPrimeCommandInvoker; }
            public FibCommandInvoker FibCommandInvoker { get => this.fibCommandInvoker; }
            public GetRandomCommandInvoker GetRandomCommandInvoker { get => this.getRandomCommandInvoker; }

            public Dictionary<string, string> CustomTopicTokenMap { get; private init; }

            public RpcCallAsync<IsPrimeResponsePayload> IsPrimeAsync(string executorId, IsPrimeRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", this.mqttClient.ClientId! },
                    { "executorId", executorId },
                };

                return new RpcCallAsync<IsPrimeResponsePayload>(this.isPrimeCommandInvoker.InvokeCommandAsync(request, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<FibResponsePayload> FibAsync(string executorId, FibRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", this.mqttClient.ClientId! },
                    { "executorId", executorId },
                };

                return new RpcCallAsync<FibResponsePayload>(this.fibCommandInvoker.InvokeCommandAsync(request, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<GetRandomResponsePayload> GetRandomAsync(string executorId, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", this.mqttClient.ClientId! },
                    { "executorId", executorId },
                };

                return new RpcCallAsync<GetRandomResponsePayload>(this.getRandomCommandInvoker.InvokeCommandAsync(new Google.Protobuf.WellKnownTypes.Empty(), metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public async ValueTask DisposeAsync()
            {
                await this.isPrimeCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.fibCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.getRandomCommandInvoker.DisposeAsync().ConfigureAwait(false);
            }

            public async ValueTask DisposeAsync(bool disposing)
            {
                await this.isPrimeCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.fibCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getRandomCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
            }
        }
    }
}
