/* Code generated by Azure.Iot.Operations.ProtocolCompiler v0.9.0.0; DO NOT EDIT. */

#nullable enable

namespace Azure.Iot.Operations.Services.StateStore.StateStore
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Xml;
    using Azure.Iot.Operations.Protocol;
    using Azure.Iot.Operations.Protocol.RPC;
    using Azure.Iot.Operations.Protocol.Models;
    using Azure.Iot.Operations.Services.StateStore;

    public static partial class StateStore
    {
        /// <summary>
        /// Specializes a <c>CommandExecutor</c> class for Command 'invoke'.
        /// </summary>
        public class InvokeCommandExecutor : CommandExecutor<byte[], byte[]>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="InvokeCommandExecutor"/> class.
            /// </summary>
            public InvokeCommandExecutor(ApplicationContext applicationContext, IMqttPubSubClient mqttClient)
                : base(applicationContext, mqttClient, "invoke", new PassthroughSerializer())
            {
                TopicTokenReplacementMap["modelId"] = "dtmi:ms:aio:mq:StateStore;1";
                if (mqttClient.ClientId != null)
                {
                    TopicTokenReplacementMap["executorId"] = mqttClient.ClientId;
                }
                TopicTokenReplacementMap["commandName"] = "invoke";
            }
        }
    }
}
