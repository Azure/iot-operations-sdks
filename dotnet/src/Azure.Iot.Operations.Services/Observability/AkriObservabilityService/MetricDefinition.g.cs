/* Code generated by Azure.Iot.Operations.ProtocolCompiler v0.10.0.0; DO NOT EDIT. */

#nullable enable

namespace Azure.Iot.Operations.Services.Observability.AkriObservabilityService
{
    using System;
    using System.Collections.Generic;
    using System.Text.Json.Serialization;
    using Azure.Iot.Operations.Services.Observability;

    /// <summary>
    /// Shared identifying and descriptive properties of a metric.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Azure.Iot.Operations.ProtocolCompiler", "0.10.0.0")]
    public partial class MetricDefinition : IJsonOnDeserialized, IJsonOnSerializing
    {
        /// <summary>
        /// Key-value pairs that provide dimensional context for the metric.
        /// </summary>
        [JsonPropertyName("labels")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public Dictionary<string, string> Labels { get; set; } = default!;

        /// <summary>
        /// A unique, human-readable name that identifies the metric.
        /// </summary>
        [JsonPropertyName("name")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public string Name { get; set; } = default!;

        /// <summary>
        /// The unit of measurement associated with the metric (e.g., seconds, bytes).
        /// </summary>
        [JsonPropertyName("unit")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public string? Unit { get; set; } = default;

        void IJsonOnDeserialized.OnDeserialized()
        {
            if (Labels is null)
            {
                throw new ArgumentNullException("labels field cannot be null");
            }
            if (Name is null)
            {
                throw new ArgumentNullException("name field cannot be null");
            }
        }

        void IJsonOnSerializing.OnSerializing()
        {
            if (Labels is null)
            {
                throw new ArgumentNullException("labels field cannot be null");
            }
            if (Name is null)
            {
                throw new ArgumentNullException("name field cannot be null");
            }
        }
    }
}
