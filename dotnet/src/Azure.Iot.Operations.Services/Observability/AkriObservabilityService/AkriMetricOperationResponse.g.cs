/* Code generated by Azure.Iot.Operations.ProtocolCompiler v0.10.0.0; DO NOT EDIT. */

#nullable enable

namespace Azure.Iot.Operations.Services.Observability.AkriObservabilityService
{
    using System;
    using System.Collections.Generic;
    using System.Text.Json.Serialization;
    using Azure.Iot.Operations.Services.Observability;

    /// <summary>
    /// Represents the result of a single metric operation, including structured error information if applicable.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Azure.Iot.Operations.ProtocolCompiler", "0.10.0.0")]
    public partial class AkriMetricOperationResponse : IJsonOnDeserialized, IJsonOnSerializing
    {
        /// <summary>
        /// Structured classification of the error type, included only if status is Error.
        /// </summary>
        [JsonPropertyName("errorKind")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public AkriMetricErrorKind? ErrorKind { get; set; } = default;

        /// <summary>
        /// Optional human-readable description of the error.
        /// </summary>
        [JsonPropertyName("errorMessage")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public string? ErrorMessage { get; set; } = default;

        /// <summary>
        /// ID of the operation this response refers to.
        /// </summary>
        [JsonPropertyName("operationId")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public string OperationId { get; set; } = default!;

        /// <summary>
        /// Optional name of the field or conceptual field associated with the error.
        /// </summary>
        [JsonPropertyName("propertyName")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public string? PropertyName { get; set; } = default;

        /// <summary>
        /// Status of the operation: either Success or Error.
        /// </summary>
        [JsonPropertyName("status")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public AkriMetricOperationResponseStatus Status { get; set; } = default!;

        void IJsonOnDeserialized.OnDeserialized()
        {
            if (OperationId is null)
            {
                throw new ArgumentNullException("operationId field cannot be null");
            }
        }

        void IJsonOnSerializing.OnSerializing()
        {
            if (OperationId is null)
            {
                throw new ArgumentNullException("operationId field cannot be null");
            }
        }
    }
}
