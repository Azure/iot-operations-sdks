/* Code generated by Azure.Iot.Operations.ProtocolCompiler v0.10.0.0; DO NOT EDIT. */

#nullable enable

namespace Azure.Iot.Operations.Services.Observability.AkriObservabilityService
{
    using System;
    using System.Collections.Generic;
    using System.Text.Json.Serialization;
    using Azure.Iot.Operations.Services.Observability;

    /// <summary>
    /// Represents a Record operation used by Gauge and Histogram metrics.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Azure.Iot.Operations.ProtocolCompiler", "0.10.0.0")]
    public partial class RecordOperation : IJsonOnDeserialized, IJsonOnSerializing
    {
        /// <summary>
        /// Unique identifier for the operation, used to correlate responses.
        /// </summary>
        [JsonPropertyName("operationId")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public string OperationId { get; set; } = default!;

        /// <summary>
        /// Timestamp indicating when the metric value was recorded.
        /// </summary>
        [JsonPropertyName("timestamp")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public DateTime Timestamp { get; set; } = default!;

        /// <summary>
        /// The numeric value to be recorded by the Gauge or Histogram metric.
        /// </summary>
        [JsonPropertyName("value")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public double Value { get; set; } = default!;

        void IJsonOnDeserialized.OnDeserialized()
        {
            if (OperationId is null)
            {
                throw new ArgumentNullException("operationId field cannot be null");
            }
        }

        void IJsonOnSerializing.OnSerializing()
        {
            if (OperationId is null)
            {
                throw new ArgumentNullException("operationId field cannot be null");
            }
        }
    }
}
