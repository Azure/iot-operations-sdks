# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: mqtt-simulator
  namespace: azure-iot-operations
---
apiVersion: v1
kind: Pod
metadata:
  name: mqtt-simulator
  namespace: azure-iot-operations
spec:
  serviceAccountName: mqtt-simulator
  volumes:
    - name: mqtt-client-token
      projected:
        sources:
          - serviceAccountToken:
              path: mqtt-client-token
              audience: aio-internal
              expirationSeconds: 86400
    - name: aio-ca-trust-bundle
      configMap:
        name: aio-ca-trust-bundle-test-only
  containers:
    - name: mqtt-simulator
      image: alpine
      volumeMounts:
        - name: mqtt-client-token
          mountPath: /var/run/secrets/tokens/
        - name: aio-ca-trust-bundle
          mountPath: /var/run/certs/aio-ca/      
      command: ["sh", "-c"]
      args:
        - |
          apk --no-cache add mosquitto-clients

          SLEEP_DURATION=2
          REPORT_INTERVAL=10
          MSG_COUNT=0
          SECONDS=0

          echo "Starting simulator"
          while true; do
            DATA="{
                \"timestamp\": \"$(date -u +'%Y-%m-%dT%H:%M:%SZ')\",
                \"sensor_id\": \"Sensor-$(hostname)-$$\",
                \"msg_number\": $MSG_COUNT,
                \"temperature\": $(awk -v min=550 -v max=600 'BEGIN{srand(); print min+rand()*(max-min)}'),
                \"pressure\": $(awk -v min=290 -v max=300 'BEGIN{srand(); print min+rand()*(max-min)}'),
                \"vibration\": $(awk -v min=0.001 -v max=0.005 'BEGIN{srand(); print min+rand()*(max-min)}')
              }"

            mosquitto_pub -V mqttv311 -i mqtt-simulator -q 1 -L mqtts://aio-broker/sensor/data -m "$DATA" -u K8S-SAT -P $(cat /var/run/secrets/tokens/mqtt-client-token) --cafile /var/run/certs/aio-ca/ca.crt
            if [ $? -eq 0 ]; then
              MSG_COUNT=$((MSG_COUNT+1))
            else
              echo "Publish failed for message number $MSG_COUNT, will retry"
            fi

            SECONDS=$((SECONDS+$SLEEP_DURATION))
            
            if [ $SECONDS -ge $REPORT_INTERVAL ]; then
              echo "Published $MSG_COUNT messages"
              SECONDS=0
            fi

            sleep $SLEEP_DURATION
          done
