---
test-name: CommandExecutorRequestsCompleteOutOfOrder_RequestAckedInOrder
aka:
- MultipleExecutors_ReceivedMessagesAreAckedInOrder
description:
  condition: >-
    CommandExecutor receives two requests that synchronize so that they complete in reverse order.
  expect: >-
    CommandExecutor sends responses in reverse order and acknowledges in receipt order.

requires:
- ack-ordering

prologue:
  countdown-events:
    'pass': 1
  executors:
  - command-name: "waiter"
    request-topic: "mock/waiter"
    sync:
    - wait-event: 'pass'
  - command-name: "runner"
    request-topic: "mock/runner"

actions:
- action: receive request
  topic: "mock/waiter"
  correlation-index: 0
  response-topic: "mock/waiter/response"
  packet-index: 0
- action: receive request
  topic: "mock/runner"
  correlation-index: 1
  response-topic: "mock/runner/response"
  packet-index: 1
- action: await publish
  correlation-index: 1
- action: sync
  signal-event: 'pass'
- action: await publish
  correlation-index: 0
- action: await acknowledgement
  packet-index: 0
- action: await acknowledgement
  packet-index: 1

epilogue:
  subscribed-topics:
  - "mock/waiter"
  - "mock/runner"
  acknowledgement-count: 2
  published-messages:
  - correlation-index: 0
    topic: "mock/waiter/response"
    command-status: 200 # OK
  - correlation-index: 1
    topic: "mock/runner/response"
    command-status: 200 # OK
...
