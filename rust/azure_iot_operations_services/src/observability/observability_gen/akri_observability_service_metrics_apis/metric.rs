/* Code generated by Azure.Iot.Operations.ProtocolCompiler v0.10.0.0; DO NOT EDIT. */
#![allow(unused_imports)]

use std::collections::HashMap;

use chrono::{DateTime, Utc};
use derive_builder::Builder;
use iso8601_duration::Duration;
use serde::{Deserialize, Serialize};
use uuid::Uuid;

use super::super::common_types::{b64::Bytes, date_only::Date, decimal::Decimal, time_only::Time};
use super::metric_scope::MetricScope;
use super::metric_type::MetricType;

/// Metric data
#[derive(Serialize, Deserialize, Debug, Clone, Builder)]
pub struct Metric {
    /// Custom labels to associate with the metric
    #[serde(skip_serializing_if = "Option::is_none")]
    #[builder(default = "None")]
    pub labels: Option<HashMap<String, String>>,

    /// metricScope defines who can access the metric: internal for aio users, customer for customers only, and regular for both
    #[serde(rename = "metricScope")]
    pub metric_scope: MetricScope,

    /// Metric type: Counter, Gauge, Histogram
    #[serde(rename = "metricType")]
    pub metric_type: MetricType,

    /// Name of the metric
    pub name: String,

    /// timestamp of when the metric was recorded
    #[serde(skip_serializing_if = "Option::is_none")]
    #[builder(default = "None")]
    pub timestamp: Option<DateTime<Utc>>,

    /// Unit of the metric
    #[serde(skip_serializing_if = "Option::is_none")]
    #[builder(default = "None")]
    pub unit: Option<String>,

    /// Value of the metric
    pub value: f64,
}
