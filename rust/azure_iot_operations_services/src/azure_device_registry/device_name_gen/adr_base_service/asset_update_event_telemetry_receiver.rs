/* Code generated by Azure.Iot.Operations.ProtocolCompiler v0.10.0.0; DO NOT EDIT. */

use std::collections::HashMap;

use azure_iot_operations_mqtt::interface::{AckToken, ManagedClient};
use azure_iot_operations_protocol::common::aio_protocol_error::AIOProtocolError;
use azure_iot_operations_protocol::telemetry;
use azure_iot_operations_protocol::application::ApplicationContext;

use super::asset_update_event_telemetry::AssetUpdateEventTelemetry;
use super::MODEL_ID;
use super::TELEMETRY_TOPIC_PATTERN;
use super::super::common_types::common_options::TelemetryOptions;

pub type AssetUpdateEventTelemetryMessage = telemetry::receiver::Message<AssetUpdateEventTelemetry>;

/// Telemetry Receiver for `AssetUpdateEventTelemetry`
pub struct AssetUpdateEventTelemetryReceiver<C>(
    telemetry::Receiver<AssetUpdateEventTelemetry, C>,
)
where
    C: ManagedClient + Clone + Send + Sync + 'static,
    C::PubReceiver: Send + Sync + 'static;

impl<C> AssetUpdateEventTelemetryReceiver<C>
where
    C: ManagedClient + Clone + Send + Sync + 'static,
    C::PubReceiver: Send + Sync + 'static,
{
    /// Creates a new [`AssetUpdateEventTelemetryReceiver`]
    ///
    /// # Panics
    /// If the DTDL that generated this code was invalid
    pub fn new(application_context: ApplicationContext, client: C, options: &TelemetryOptions) -> Self {
        let mut receiver_options_builder = telemetry::receiver::OptionsBuilder::default();
        if let Some(topic_namespace) = &options.topic_namespace {
            receiver_options_builder.topic_namespace(topic_namespace.clone());
        }

        let mut topic_token_map: HashMap<String, String> = options
            .topic_token_map
            .clone()
            .into_iter()
            .map(|(k, v)| (format!("ex:{k}"), v))
            .collect();

        topic_token_map.insert("modelId".to_string(), MODEL_ID.to_string());
        topic_token_map.insert("telemetryName".to_string(), "assetUpdateEvent".to_string());

        let receiver_options = receiver_options_builder
            .topic_pattern(TELEMETRY_TOPIC_PATTERN)
            .topic_token_map(topic_token_map)
            .auto_ack(options.auto_ack)
            .build()
            .expect("DTDL schema generated invalid arguments");

        Self(
            telemetry::Receiver::new(application_context, client, receiver_options)
                .expect("DTDL schema generated invalid arguments"),
        )
    }

    /// Shut down the [`AssetUpdateEventTelemetryReceiver`]
    ///
    /// # Errors
    /// [`AIOProtocolError`] if there is a failure in graceful shutdown
    pub async fn shutdown(&mut self) -> Result<(), AIOProtocolError> {
        self.0.shutdown().await
    }

    /// Receive the next [`AssetUpdateEventTelemetryMessage`]
    ///
    /// # Errors
    /// [`AIOProtocolError`] if there is a failure receiving a message
    pub async fn recv(
        &mut self,
    ) -> Option<Result<(AssetUpdateEventTelemetryMessage, Option<AckToken>), AIOProtocolError>> {
        self.0.recv().await
    }
}
