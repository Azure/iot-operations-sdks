<#@ template language="C#" linePragmas="false" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="OpcUaDigest" #>
<#@ import namespace="SpecMapper" #>
    {
<# if (this.isHistorized) { #>
      "@type": [ "Property", "Qualified", "Historized" ],
<# } else { #>
      "@type": [ "Property", "Qualified" ],
<# } #>
      "name": "<#=TypeConverter.LegalizeName(TypeConverter.StripAngles(TypeConverter.Dequalify(definedType.BrowseName)))#>",
      "namespace": "<#=SpecMapper.GetUriFromSpecName(TypeConverter.GetSpecName(definedType))#>",
<# if (this.SubVars.Count == 0) { #>
      "schema": <#=this.typeConverter.GetDtdlTypeFromOpcUaType(this.modelId, this.definedType.Datatype, this.definedType.ValueRank, definedType.BrowseName, 6)#>,
<# } else { #>
      "schema": {
        "@type": [ "Object", "Detail" ],
        "fields": [
          {
<# if (GetIsOptional(this.definedType)) { #>
            "@type": [ "Field", "Qualified", "Subject" ],
<# } else { #>
            "@type": [ "Field", "Qualified", "Subject", "Required" ],
<# } #>
            "name": "<#=TypeConverter.LegalizeName(TypeConverter.StripAngles(TypeConverter.Dequalify(definedType.BrowseName)))#>",
            "namespace": "<#=SpecMapper.GetUriFromSpecName(TypeConverter.GetSpecName(definedType))#>",
            "schema": <#=this.typeConverter.GetDtdlTypeFromOpcUaType(this.modelId, this.definedType.Datatype, this.definedType.ValueRank, definedType.BrowseName, 12)#>
          },
<# int ix = 1; foreach (OpcUaDefinedType subVar in this.SubVars) { #>
          {
<# if (GetIsOptional(subVar)) { #>
            "@type": [ "Field", "Qualified" ],
<# } else { #>
            "@type": [ "Field", "Qualified", "Required" ],
<# } #>
            "name": "<#=TypeConverter.LegalizeName(TypeConverter.StripAngles(TypeConverter.Dequalify(subVar.BrowseName)))#>",
            "namespace": "<#=SpecMapper.GetUriFromSpecName(TypeConverter.GetSpecName(subVar))#>",
            "schema": <#=this.typeConverter.GetDtdlTypeFromOpcUaType(this.modelId, subVar.Datatype, subVar.ValueRank, 12)#>
          }<#=ix < this.SubVars.Count ? "," : ""#>
<# ix++; } #>
        ]
      },
<# } #>
      "writable": <#=this.isWritable ? "true" : "false"#>
    }